/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
Typography Fixers Plugin for Obsidian
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TypographyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/ui/decorations.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var currentSettings;
function createDecorations(settings) {
  currentSettings = settings;
  const nonBreakingSpaceDecoration = import_view.Decoration.mark({
    class: "nonBreakingSpace"
  });
  const thinSpaceDecoration = import_view.Decoration.mark({
    class: "thinSpace"
  });
  const emDashDecoration = import_view.Decoration.mark({
    class: "em-dash"
  });
  const regularSpaceDecoration = import_view.Decoration.mark({
    class: "regularSpace"
  });
  return import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.buildDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = this.buildDecorations(update.view);
      }
    }
    buildDecorations(view) {
      const builder = new import_state.RangeSetBuilder();
      if (currentSettings && currentSettings.highlightEnabled) {
        for (let { from, to } of view.visibleRanges) {
          let text = view.state.doc.sliceString(from, to);
          let startPos = from;
          let inFrontmatter = false;
          let inCodeBlock = false;
          let lineStart = true;
          for (let i = 0; i < text.length; i++) {
            const char = text[i];
            const pos = startPos + i;
            if (lineStart && text.substr(i, 3) === "---") {
              inFrontmatter = !inFrontmatter;
              i += 2;
              lineStart = false;
              continue;
            }
            if (lineStart && text.substr(i, 3) === "```") {
              inCodeBlock = !inCodeBlock;
              i += 2;
              lineStart = false;
              continue;
            }
            if (char === "\n") {
              lineStart = true;
            } else if (lineStart && char !== " " && char !== "	") {
              lineStart = false;
            }
            const isInSpecialBlock = inFrontmatter || inCodeBlock;
            if (!isInSpecialBlock) {
              if (char === "\xA0") {
                builder.add(pos, pos + 1, nonBreakingSpaceDecoration);
              }
              if (char === "\u202F") {
                builder.add(pos, pos + 1, thinSpaceDecoration);
              }
              if (char === "\u2014") {
                builder.add(pos, pos + 1, emDashDecoration);
              }
              if (char === " ") {
                builder.add(pos, pos + 1, regularSpaceDecoration);
              }
            }
          }
        }
      }
      return builder.finish();
    }
  }, {
    decorations: (v) => v.decorations
  });
}

// src/ui/statusBar.ts
var import_obsidian = require("obsidian");
function createStatusBarButton(plugin, isEnabled, toggleCallback) {
  const statusBarItemEl = plugin.addStatusBarItem();
  statusBarItemEl.id = "highlight-status-bar-button";
  statusBarItemEl.addClass("mod-clickable");
  (0, import_obsidian.setIcon)(statusBarItemEl, "pilcrow");
  statusBarItemEl.setAttribute("aria-label", "Afficher/Masquer les caract\xE8res invisibles");
  statusBarItemEl.setAttribute("data-tooltip-position", "top");
  updateStatusBarButton(statusBarItemEl, isEnabled);
  statusBarItemEl.onClickEvent(() => {
    toggleCallback();
  });
  return statusBarItemEl;
}
function createTabTitleBarButton(plugin, isEnabled, toggleCallback) {
  const buttonEl = document.createElement("button");
  buttonEl.id = "highlight-tab-title-button";
  buttonEl.className = "clickable-icon view-action";
  buttonEl.setAttribute("aria-label", "Afficher/Masquer les caract\xE8res invisibles");
  (0, import_obsidian.setIcon)(buttonEl, "pilcrow");
  updateTabTitleBarButton(buttonEl, isEnabled);
  buttonEl.addEventListener("click", (event) => {
    event.preventDefault();
    toggleCallback();
  });
  const titleBarEl = document.querySelector(".view-header-title-container");
  if (titleBarEl) {
    const actionsEl = titleBarEl.nextElementSibling;
    if (actionsEl && actionsEl.classList.contains("view-actions")) {
      actionsEl.prepend(buttonEl);
    }
  }
  return buttonEl;
}
function updateStatusBarButton(buttonEl, isEnabled) {
  if (!buttonEl) return;
  if (isEnabled) {
    buttonEl.addClass("is-active");
  } else {
    buttonEl.removeClass("is-active");
  }
}
function updateTabTitleBarButton(buttonEl, isEnabled) {
  if (!buttonEl) return;
  if (isEnabled) {
    buttonEl.addClass("is-active");
  } else {
    buttonEl.removeClass("is-active");
  }
}
function removeStatusBarButton(buttonEl) {
  if (buttonEl) {
    buttonEl.remove();
  }
}
function removeTabTitleBarButton(buttonEl) {
  if (buttonEl) {
    buttonEl.remove();
  }
}

// src/fixers/base/base-fixer.ts
var BaseFixer = class {
  constructor() {
    this.enabled = true;
    this.locale = "fr-FR";
  }
  /**
   * Configuration de la locale (optionnelle)
   */
  setLocale(locale) {
    this.locale = locale;
  }
  /**
   * Vérifie si le fixer est compatible avec la locale actuelle
   */
  isLocaleCompatible(targetLocales) {
    return targetLocales.some(
      (locale) => this.locale.startsWith(locale)
    );
  }
  /**
   * Vérifie si le fixer est activé et compatible
   */
  isActive() {
    return this.enabled;
  }
  /**
   * Applique une transformation regex simple - implémentation
   */
  applyRegexTransform(text, pattern, replacement) {
    if (typeof replacement === "string") {
      return text.replace(pattern, replacement);
    } else {
      return text.replace(pattern, replacement);
    }
  }
  /**
   * Applique plusieurs transformations regex en séquence
   */
  applyMultipleTransforms(text, transforms) {
    return transforms.reduce((result, transform) => {
      if (typeof transform.replacement === "string") {
        return this.applyRegexTransform(result, transform.pattern, transform.replacement);
      } else {
        return this.applyRegexTransform(result, transform.pattern, transform.replacement);
      }
    }, text);
  }
  /**
   * Vérifie si une position dans le texte est dans un contexte valide
   * (pas dans du code, des liens, etc.)
   */
  isValidContext(text, position) {
    const beforeContext = text.substring(Math.max(0, position - 10), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 10));
    if (beforeContext.includes("`") && afterContext.includes("`")) {
      return false;
    }
    if (beforeContext.includes("[") && afterContext.includes("]")) {
      return false;
    }
    return true;
  }
  /**
   * Méthode utilitaire pour logger les corrections (développement)
   */
  logCorrection(original, corrected) {
    if (original !== corrected) {
      console.debug(`[${this.id}] "${original}" \u2192 "${corrected}"`);
    }
  }
};

// src/constants/unicode.ts
var UNICODE_CHARS = {
  // ========================
  // ESPACES SPÉCIAUX
  // ========================
  NO_BREAK_THIN_SPACE: "\u202F",
  NO_BREAK_SPACE: "\xA0",
  NORMAL_SPACE: " ",
  // ========================
  // PONCTUATION
  // ========================
  ELLIPSIS: "\u2026",
  NDASH: "\u2013",
  MDASH: "\u2014",
  // ========================
  // GUILLEMETS ET APOSTROPHES
  // ========================
  LDQUO: "\u201C",
  RDQUO: "\u201D",
  /** LSQUO: '“',  Apostrophe ouvrante (U+2018) - Rarement utilisée */
  RSQUO: "\u2019",
  LAQUO: "\xAB",
  RAQUO: "\xBB",
  BDQUO: "\u201E",
  // &bdquo; or &#8222;
  SHY: "\xC2\xAD",
  // &shy;
  // ========================
  // SYMBOLES MATHÉMATIQUES
  // ========================
  TIMES: "\xD7",
  DIVIDE: "\xF7",
  PLUS_MINUS: "\xB1",
  /** Symbole plus ou moins (U+00B1) */
  MINUS: "\u2212",
  /** Symbole moins (U+2212) - Plus long que le trait d'union standard */
  // ========================
  // SYMBOLES DE MARQUE
  // ========================
  /** Symbole trademark (U+2122) - Remplace (tm) */
  TRADE: "\u2122",
  REG: "\xAE",
  /** Symbole registered (U+00AE) - Remplace (r) */
  COPY: "\xA9",
  /** Symbole copyright (U+00A9) - Remplace (c) */
  // ========================
  // AUTRES SYMBOLES UTILES
  // ========================
  PRIME: "\u2032",
  /** Prime (U+2032) - Minutes, pieds */
  DOUBLE_PRIME: "\u2033",
  /** Double prime (U+2033) - Secondes, pouces */
  SECTION: "\xA7",
  /** Section (U+00A7) */
  PARAGRAPH: "\xB6",
  /** Paragraphe (U+00B6) */
  BULLET: "\u2022",
  /** Puce (U+2022) */
  ARROW_RIGHT: "\u2192",
  /** Flèche droite (U+2192) */
  ARROW_LEFT: "\u2190",
  /** Flèche gauche (U+2190) */
  EURO: "\u20AC",
  /** Euro (U+20AC) */
  POUND: "\xA3",
  /** Livre sterling (U+00A3) */
  YEN: "\xA5"
  /** Yen (U+00A5) */
};
var UNICODE_PATTERNS = {
  MULTIPLE_SPACES: /\s{2,}/g,
  /** Détecte les espaces multiples */
  ELLIPSIS_DOTS: /\.{3,}/g,
  /** Détecte les points de suspension standards */
  DOUBLE_DASH: /--/g,
  /** Détecte les doubles tirets */
  STRAIGHT_QUOTES: /"/g,
  /** Détecte les guillemets droits */
  STRAIGHT_APOSTROPHES: /(\w)'/g,
  /** Détecte les apostrophes droites dans les contractions */
  MULTIPLY_X: /(\d+)\s*[xX]\s*(\d+)/g,
  /** Détecte x entre nombres pour multiplication */
  MULTIPLY_STAR: /(\d+)\s*\*\s*(\d+)/g,
  /** Détecte * entre nombres pour multiplication */
  /** Détecte les symboles de marque textuels */
  TRADEMARK_TEXT: /\(tm\)/gi,
  REGISTERED_TEXT: /\(r\)/gi,
  COPYRIGHT_TEXT: /\(c\)/gi
};

// src/fixers/punctuation/ellipsis.ts
var Ellipsis = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Ellipsis";
    this.name = "Points de suspension";
    this.description = "Remplace ... par le caract\xE8re ellipse Unicode (\u2026)";
    this.category = "punctuation";
    this.priority = 1;
  }
  /**
   * Transforme les points multiples en ellipse Unicode
   */
  fix(text) {
    return this.applyRegexTransform(
      text,
      UNICODE_PATTERNS.ELLIPSIS_DOTS,
      UNICODE_CHARS.ELLIPSIS
    );
  }
  /**
   * Gère la saisie en temps réel des points de suspension
   */
  handleKeyEvent(event, editor) {
    if (event.key === "." && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      if (beforeCursor.endsWith("..")) {
        const newLine = line.substring(0, cursor.ch - 2) + UNICODE_CHARS.ELLIPSIS + line.substring(cursor.ch);
        editor.setLine(cursor.line, newLine);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch - 1
          // Position après l'ellipse
        });
        return true;
      }
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "En fait... c'est compliqu\xE9...",
      after: `En fait${UNICODE_CHARS.ELLIPSIS} c'est compliqu\xE9${UNICODE_CHARS.ELLIPSIS}`
    };
  }
};

// src/fixers/punctuation/dash.ts
var Dash = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Dash";
    this.name = "Tirets typographiques";
    this.description = "Convertit -- en \u2014 et am\xE9liore les tirets entre nombres";
    this.category = "punctuation";
    this.priority = 2;
  }
  /**
   * Applique les transformations de tirets
   */
  fix(text) {
    const transforms = [
      // Double tiret vers tiret cadratin
      {
        pattern: /--/g,
        replacement: UNICODE_CHARS.MDASH
      },
      // Tiret entre nombres (dates, plages) vers tiret demi-cadratin
      {
        pattern: /(\d+)\s*-\s*(\d+)/g,
        replacement: `$1${UNICODE_CHARS.NDASH}$2`
      },
      // Espaces autour du tiret cadratin pour le français
      {
        pattern: /\s*—\s*/g,
        replacement: this.isLocaleCompatible(["fr"]) ? ` ${UNICODE_CHARS.MDASH} ` : `${UNICODE_CHARS.MDASH}`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Gère la saisie en temps réel des doubles tirets
   */
  handleKeyEvent(event, editor) {
    if (event.key === "-" && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      if (beforeCursor.endsWith("-")) {
        const replacement = this.isLocaleCompatible(["fr"]) ? ` ${UNICODE_CHARS.MDASH} ` : `${UNICODE_CHARS.MDASH}`;
        const newLine = line.substring(0, cursor.ch - 1) + replacement + line.substring(cursor.ch);
        editor.setLine(cursor.line, newLine);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch - 1 + replacement.length
        });
        return true;
      }
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    const beforeDash = this.isLocaleCompatible(["fr"]) ? " \u2014 " : "\u2014";
    return {
      before: "P\xE9riode 2020-2024 -- une \xE9poque importante",
      after: `P\xE9riode 2020${UNICODE_CHARS.NDASH}2024${beforeDash}une \xE9poque importante`
    };
  }
};

// src/fixers/punctuation/hyphen.ts
var Hyphen = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Hyphen";
    this.name = "C\xE9sures typographiques";
    this.description = "Am\xE9liore les tirets et c\xE9sures (fonctionnalit\xE9 basique)";
    this.category = "punctuation";
    this.priority = 10;
    this.enabled = false;
  }
  // Désactivé par défaut - règles complexes
  /**
   * Applique quelques transformations basiques de tirets
   * Note: Les vraies règles de césure nécessiteraient un dictionnaire complet
   */
  fix(text) {
    const transforms = [
      // Corriger les tirets mal espacés dans les dialogues français
      {
        pattern: /^(\s*)-\s*/gm,
        replacement: this.isLocaleCompatible(["fr"]) ? `$1${UNICODE_CHARS.MDASH} ` : `$1${UNICODE_CHARS.MDASH}`
      },
      // Tirets dans les énumérations
      {
        pattern: /(\n\s*)-\s+/g,
        replacement: `$1${UNICODE_CHARS.MDASH} `
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "- Premier point\n- Deuxi\xE8me point\n- Dialogue",
      after: `${UNICODE_CHARS.MDASH} Premier point
${UNICODE_CHARS.MDASH} Deuxi\xE8me point
${UNICODE_CHARS.MDASH} Dialogue`
    };
  }
};

// src/fixers/spacing/french-spacing.ts
var FrenchNoBreakSpace = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "FrenchNoBreakSpace";
    this.name = "Espaces fran\xE7ais";
    this.description = "Ajoute des espaces ins\xE9cables selon les r\xE8gles fran\xE7aises";
    this.category = "spacing";
    this.priority = 3;
    this.enabled = true;
  }
  // Activé par défaut pour le français
  /**
   * Applique les règles d'espacement françaises
   */
  fix(text) {
    if (!this.isLocaleCompatible(["fr"])) {
      return text;
    }
    const transforms = [
      // Espace fine insécable avant ; ! ? »
      {
        pattern: /\s*([;!?»])/g,
        replacement: `${UNICODE_CHARS.NO_BREAK_THIN_SPACE}$1`
      },
      // Espace insécable avant :
      {
        pattern: /\s*(:)/g,
        replacement: `${UNICODE_CHARS.NO_BREAK_SPACE}$1`
      },
      // Espace insécable après «
      {
        pattern: /(«)\s*/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_THIN_SPACE}`
      },
      // Corriger les espaces dans les nombres (optionnel)
      {
        pattern: /(\d)\s+(\d{3})/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_THIN_SPACE}$2`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Gère la saisie en temps réel des signes de ponctuation français
   */
  handleKeyEvent(event, editor) {
    if (!this.isLocaleCompatible(["fr"])) {
      return false;
    }
    const punctuationMap = {
      "!": UNICODE_CHARS.NO_BREAK_THIN_SPACE,
      "?": UNICODE_CHARS.NO_BREAK_THIN_SPACE,
      ";": UNICODE_CHARS.NO_BREAK_THIN_SPACE,
      ":": UNICODE_CHARS.NO_BREAK_SPACE
    };
    if (punctuationMap[event.key] && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      const cleanBefore = beforeCursor.replace(/\s+$/, "");
      const spaceChar = punctuationMap[event.key];
      const newLine = cleanBefore + spaceChar + event.key + line.substring(cursor.ch);
      editor.setLine(cursor.line, newLine);
      editor.setCursor({
        line: cursor.line,
        ch: cleanBefore.length + 2
        // Position après la ponctuation
      });
      return true;
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: `Il a dit "Bonjour" et c'est parti.`,
      after: `Il a dit ${UNICODE_CHARS.LAQUO}${UNICODE_CHARS.NO_BREAK_THIN_SPACE}Bonjour${UNICODE_CHARS.NO_BREAK_THIN_SPACE}${UNICODE_CHARS.RAQUO} et c${UNICODE_CHARS.RSQUO}est parti.`
    };
  }
};

// src/fixers/spacing/comma.ts
var NoSpaceBeforeComma = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "NoSpaceBeforeComma";
    this.name = "Virgules sans espace";
    this.description = "Supprime les espaces avant les virgules et normalise l'espacement";
    this.category = "spacing";
    this.priority = 6;
  }
  /**
   * Corrige l'espacement autour des virgules
   */
  fix(text) {
    const transforms = [
      // Supprimer les espaces avant les virgules
      {
        pattern: /\s+,/g,
        replacement: ","
      },
      // Normaliser l'espacement après les virgules (exactement un espace)
      {
        pattern: /,\s*/g,
        replacement: ", "
      },
      // Cas particulier : virgule en fin de ligne (pas d'espace après)
      {
        pattern: /,\s*$/gm,
        replacement: ","
      },
      // Cas particulier : virgule avant fermeture de parenthèse/crochet
      {
        pattern: /,\s*([)\]}])/g,
        replacement: ",$1"
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "Pommes , poires,oranges ,bananes",
      after: "Pommes, poires, oranges, bananes"
    };
  }
};

// src/fixers/spacing/unit.ts
var Unit = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "unit";
    this.name = "Espaces avant unit\xE9s";
    this.description = "Ajoute des espaces ins\xE9cables entre nombres et unit\xE9s (12 h, 50 \u20AC, 25 %)";
    this.category = "spacing";
    this.priority = 7;
    this.enabled = true;
  }
  /**
   * Applique les espaces insécables avant les unités
   */
  fix(text) {
    const transforms = [
      // === UNITÉS DE TEMPS ===
      {
        pattern: /(\d+)\s*([hms])\b(?![a-zA-Z])/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Unités complètes de temps
      {
        pattern: /(\d+)\s*(heures?|minutes?|secondes?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === UNITÉS MONÉTAIRES ===
      {
        pattern: /(\d+)\s*([€$£¥₹₽])/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Unités monétaires écrites
      {
        pattern: /(\d+)\s*(euros?|dollars?|livres?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === POURCENTAGES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*%/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}%`
      },
      // === UNITÉS SI ET MÉTRIQUES ===
      // Masse
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(mg|[cdk]?g|tonnes?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Distance
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(mm|cm|dm|[dk]?m|km)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Volume
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(ml|[cdk]?l|litres?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Énergie et puissance
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(W|[kmMG]W|kWh?|[kmMG]Wh?)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Fréquence
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(Hz|[kmMG]Hz)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === TEMPÉRATURES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*°([CF]?)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}\xB0$2`
      },
      // === UNITÉS INFORMATIQUES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*([kmMGT]?[Bb]|[kmMGT]?o)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Unités complètes
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(octets?|bytes?|bits?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === UNITÉS D'ANGLES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(degrés?|rad|radiants?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === UNITÉS DE VITESSE ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(km\/h|mph|m\/s)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Vérifie si le contexte est valide pour l'ajout d'espace
   */
  isValidContext(text, position) {
    if (!super.isValidContext(text, position)) {
      return false;
    }
    const beforeContext = text.substring(Math.max(0, position - 5), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 5));
    if (beforeContext.match(/^\s*#*\s*\d+$/) && afterContext.match(/^[hH]\d/)) {
      return false;
    }
    return true;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "Temp\xE9rature: 25 \xB0C, vitesse: 120 km/h, taille: 1.8 m, poids: 75 kg, prix: 299 \u20AC",
      after: `Temp\xE9rature: 25${UNICODE_CHARS.NO_BREAK_SPACE}\xB0C, vitesse: 120${UNICODE_CHARS.NO_BREAK_SPACE}km/h, taille: 1.8${UNICODE_CHARS.NO_BREAK_SPACE}m, poids: 75${UNICODE_CHARS.NO_BREAK_SPACE}kg, prix: 299${UNICODE_CHARS.NO_BREAK_SPACE}\u20AC`
    };
  }
};

// src/fixers/spacing/dimension.ts
var Dimension = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Dimension";
    this.name = "Symboles de multiplication";
    this.description = "Convertit x et * entre nombres en symbole \xD7 (12 x 34 \u2192 12\xD734)";
    this.category = "spacing";
    this.priority = 8;
    this.enabled = true;
  }
  /**
   * Applique les transformations de multiplication
   */
  fix(text) {
    const transforms = [
      // Multiplication avec 'x' ou 'X' entre nombres
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*[xX]\s*(\d+(?:[,.]?\d+)?)/g,
        replacement: `$1${UNICODE_CHARS.TIMES}$2`
      },
      // Multiplication avec '*' entre nombres
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*\*\s*(\d+(?:[,.]?\d+)?)/g,
        replacement: `$1${UNICODE_CHARS.TIMES}$2`
      },
      // Dimensions (longueur x largeur x hauteur)
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*[xX]\s*(\d+(?:[,.]?\d+)?)\s*[xX]\s*(\d+(?:[,.]?\d+)?)/g,
        replacement: `$1${UNICODE_CHARS.TIMES}$2${UNICODE_CHARS.TIMES}$3`
      },
      // Format "dimensions" avec unités (ex: 12cm x 34cm)
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*([a-zA-Z]+)\s*[xX]\s*(\d+(?:[,.]?\d+)?)\s*([a-zA-Z]+)?/g,
        replacement: `$1$2${UNICODE_CHARS.TIMES}$3$4`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Vérifie si le contexte est valide (éviter de modifier le code, variables, etc.)
   */
  isValidContext(text, position) {
    if (!super.isValidContext(text, position)) {
      return false;
    }
    const beforeContext = text.substring(Math.max(0, position - 10), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 10));
    if (beforeContext.match(/[a-zA-Z]$/) && afterContext.match(/^[a-zA-Z]/)) {
      return false;
    }
    return true;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "R\xE9solution: 1920 x 1080, format 16 * 9, dimensions 12cm x 34cm x 56cm",
      after: `R\xE9solution: 1920${UNICODE_CHARS.TIMES}1080, format 16${UNICODE_CHARS.TIMES}9, dimensions 12cm${UNICODE_CHARS.TIMES}34cm${UNICODE_CHARS.TIMES}56cm`
    };
  }
};

// src/fixers/quotes/smart-quotes.ts
var SmartQuotes = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "SmartQuotes";
    this.name = "Guillemets intelligents";
    this.description = "Convertit les guillemets droits en guillemets typographiques";
    this.category = "quotes";
    this.priority = 4;
  }
  /**
   * Applique les guillemets intelligents selon la langue
   */
  fix(text) {
    if (this.isLocaleCompatible(["fr"])) {
      return this.fixFrenchQuotes(text);
    } else {
      return this.fixEnglishQuotes(text);
    }
  }
  /**
   * Applique les guillemets français « »
   */
  fixFrenchQuotes(text) {
    let result = text;
    let inQuote = false;
    result = result.replace(/"/g, () => {
      if (!inQuote) {
        inQuote = true;
        return `${UNICODE_CHARS.LAQUO}${UNICODE_CHARS.NO_BREAK_THIN_SPACE}`;
      } else {
        inQuote = false;
        return `${UNICODE_CHARS.NO_BREAK_THIN_SPACE}${UNICODE_CHARS.RAQUO}`;
      }
    });
    result = result.replace(/'/g, UNICODE_CHARS.RSQUO);
    return result;
  }
  /**
   * Applique les guillemets anglais " "
   */
  fixEnglishQuotes(text) {
    let result = text;
    let inQuote = false;
    result = result.replace(/"/g, () => {
      if (!inQuote) {
        inQuote = true;
        return UNICODE_CHARS.LDQUO;
      } else {
        inQuote = false;
        return UNICODE_CHARS.RDQUO;
      }
    });
    result = result.replace(/(\w)'/g, `$1${UNICODE_CHARS.RSQUO}`);
    return result;
  }
  /**
   * Fournit un exemple selon la langue
   */
  getExample() {
    if (this.isLocaleCompatible(["fr"])) {
      return {
        before: `Il a dit "Bonjour" et c'est parti.`,
        after: `Il a dit ${UNICODE_CHARS.LAQUO}${UNICODE_CHARS.NO_BREAK_THIN_SPACE}Bonjour${UNICODE_CHARS.NO_BREAK_THIN_SPACE}${UNICODE_CHARS.RAQUO} et c${UNICODE_CHARS.RSQUO}est parti.`
      };
    } else {
      return {
        before: `He said "Hello" and it's done.`,
        after: `He said ${UNICODE_CHARS.LDQUO}Hello${UNICODE_CHARS.RDQUO} and it${UNICODE_CHARS.RSQUO}s done.`
      };
    }
  }
};

// src/fixers/quotes/curly-quote.ts
var CurlyQuote = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "CurlyQuote";
    this.name = "Apostrophes courbes";
    this.description = "Convertit les apostrophes droites ' en apostrophes typographiques '";
    this.category = "quotes";
    this.priority = 5;
  }
  /**
   * Transforme les apostrophes droites en apostrophes courbes
   * Logique JoliTypo : cherche [lettre]' et remplace par [lettre]'
   */
  fix(text) {
    return this.applyRegexTransform(
      text,
      /([a-z])'/gim,
      `$1${UNICODE_CHARS.RSQUO}`
    );
  }
  /**
   * Gère la saisie en temps réel des apostrophes
   */
  handleKeyEvent(event, editor) {
    if (event.key === "'" && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      const lastChar = beforeCursor.slice(-1);
      if (lastChar && /[a-zA-Z]/.test(lastChar)) {
        const newLine = beforeCursor + UNICODE_CHARS.RSQUO + line.substring(cursor.ch);
        editor.setLine(cursor.line, newLine);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch + 1
        });
        return true;
      }
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "I'm happy, you're great, it's working!",
      after: `I${UNICODE_CHARS.RSQUO}m happy, you${UNICODE_CHARS.RSQUO}re great, it${UNICODE_CHARS.RSQUO}s working!`
    };
  }
};

// src/fixers/symbols/trademark.ts
var Trademark = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Trademark";
    this.name = "Symboles de marques";
    this.description = "Convertit (c) \u2192 \xA9, (r) \u2192 \xAE, (tm) \u2192 \u2122";
    this.category = "symbols";
    this.priority = 9;
    this.enabled = true;
  }
  /**
   * Applique les transformations des symboles de marques
   */
  fix(text) {
    const transforms = [
      // Copyright: (c) ou (C) → ©
      {
        pattern: /\(([cC])\)/g,
        replacement: UNICODE_CHARS.COPY
      },
      // Registered trademark: (r) ou (R) → ®
      {
        pattern: /\(([rR])\)/g,
        replacement: UNICODE_CHARS.REG
      },
      // Trademark: (tm) ou (TM) ou (Tm) → ™
      {
        pattern: /\(([tT][mM])\)/gi,
        replacement: UNICODE_CHARS.TRADE
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Vérifie si le contexte est approprié pour la transformation
   */
  isValidContext(text, position) {
    if (!super.isValidContext(text, position)) {
      return false;
    }
    const beforeContext = text.substring(Math.max(0, position - 20), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 20));
    if (beforeContext.includes("http") || beforeContext.includes("www.")) {
      return false;
    }
    if (beforeContext.includes("/") && afterContext.includes("/")) {
      return false;
    }
    return true;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "Microsoft (c) 2025, iPhone (r), Google Search (tm)",
      after: `Microsoft ${UNICODE_CHARS.COPY} 2025, iPhone ${UNICODE_CHARS.REG}, Google Search ${UNICODE_CHARS.TRADE}`
    };
  }
};

// src/fixers/index.ts
function createAllFixers() {
  return [
    // Ordre par priorité croissante
    new Ellipsis(),
    // priorité 1
    new Dash(),
    // priorité 2
    new FrenchNoBreakSpace(),
    // priorité 3
    new SmartQuotes(),
    // priorité 4
    new CurlyQuote(),
    // priorité 5
    new NoSpaceBeforeComma(),
    // priorité 6
    new Unit(),
    // priorité 7
    new Dimension(),
    // priorité 8
    new Trademark(),
    // priorité 9
    new Hyphen()
    // priorité 10 (désactivé par défaut)
  ];
}

// src/engine/typography-engine.ts
var TypographyEngine = class {
  constructor(settings) {
    this.fixers = /* @__PURE__ */ new Map();
    this.settings = settings;
    this.initializeFixers();
  }
  /**
   * Initialise tous les fixers disponibles
   */
  initializeFixers() {
    const allFixers = createAllFixers();
    allFixers.forEach((fixer) => {
      this.fixers.set(fixer.id, fixer);
      if (fixer.id in this.settings.fixers) {
        fixer.enabled = this.settings.fixers[fixer.id];
      }
      if (fixer.setLocale) {
        fixer.setLocale(this.settings.locale);
      }
    });
  }
  /**
   * Met à jour les paramètres et reconfigure les fixers
   */
  updateSettings(settings) {
    this.settings = settings;
    this.fixers.forEach((fixer) => {
      if (fixer.id in settings.fixers) {
        fixer.enabled = settings.fixers[fixer.id];
      }
      if (fixer.setLocale) {
        fixer.setLocale(settings.locale);
      }
    });
  }
  /**
   * Retourne tous les fixers triés par priorité
   */
  getFixers() {
    return Array.from(this.fixers.values()).sort((a, b) => a.priority - b.priority);
  }
  /**
   * Retourne uniquement les fixers activés
   */
  getEnabledFixers() {
    return this.getFixers().filter((fixer) => fixer.enabled);
  }
  /**
   * Retourne les fixers par catégorie
   */
  getFixersByCategory(category) {
    return this.getFixers().filter((fixer) => fixer.category === category);
  }
  /**
   * Obtient un fixer spécifique par son ID
   */
  getFixer(id) {
    return this.fixers.get(id);
  }
  /**
   * Traite un texte avec tous les fixers activés
   */
  processText(text) {
    const enabledFixers = this.getEnabledFixers();
    return enabledFixers.reduce((currentText, fixer) => {
      try {
        return fixer.fix(currentText);
      } catch (error) {
        console.warn(`[TypographyEngine] Erreur dans le fixer ${fixer.id}:`, error);
        return currentText;
      }
    }, text);
  }
  /**
   * Traite un texte et retourne des informations détaillées sur les corrections
   */
  processTextWithDetails(text) {
    const original = text;
    const enabledFixers = this.getEnabledFixers();
    const fixersUsed = [];
    let correctionsCount = 0;
    const corrected = enabledFixers.reduce((currentText, fixer) => {
      try {
        const fixedText = fixer.fix(currentText);
        if (fixedText !== currentText) {
          fixersUsed.push(fixer.id);
          correctionsCount++;
        }
        return fixedText;
      } catch (error) {
        console.warn(`[TypographyEngine] Erreur dans le fixer ${fixer.id}:`, error);
        return currentText;
      }
    }, text);
    return {
      original,
      corrected,
      correctionsCount,
      fixersUsed
    };
  }
  /**
   * Gère les événements clavier en temps réel
   */
  handleKeyEvent(event, editor) {
    if (!this.settings.enableRealTimeCorrection) {
      return false;
    }
    const enabledFixers = this.getEnabledFixers();
    for (const fixer of enabledFixers) {
      if (fixer.handleKeyEvent) {
        try {
          if (fixer.handleKeyEvent(event, editor)) {
            return true;
          }
        } catch (error) {
          console.warn(`[TypographyEngine] Erreur dans handleKeyEvent pour ${fixer.id}:`, error);
        }
      }
    }
    return false;
  }
  /**
   * Active ou désactive un fixer spécifique
   */
  toggleFixer(fixerId, enabled) {
    const fixer = this.fixers.get(fixerId);
    if (fixer) {
      fixer.enabled = enabled;
      this.settings.fixers[fixerId] = enabled;
      return true;
    }
    return false;
  }
  /**
   * Active ou désactive tous les fixers d'une catégorie
   */
  toggleCategory(category, enabled) {
    const categoryFixers = this.getFixersByCategory(category);
    categoryFixers.forEach((fixer) => {
      fixer.enabled = enabled;
      this.settings.fixers[fixer.id] = enabled;
    });
    return categoryFixers.length;
  }
  /**
   * Réinitialise tous les fixers à leur état par défaut
   */
  resetToDefaults() {
    this.fixers.forEach((fixer) => {
      const defaultEnabled = this.getDefaultEnabledState(fixer.id);
      fixer.enabled = defaultEnabled;
      this.settings.fixers[fixer.id] = defaultEnabled;
    });
  }
  /**
   * Détermine l'état par défaut d'un fixer selon la configuration
   */
  getDefaultEnabledState(fixerId) {
    const frenchEssentialFixers = ["ellipsis", "dash", "french-spacing", "smart-quotes", "comma"];
    const englishEssentialFixers = ["ellipsis", "dash", "smart-quotes", "comma"];
    if (this.settings.locale.startsWith("fr")) {
      return frenchEssentialFixers.includes(fixerId);
    } else {
      return englishEssentialFixers.includes(fixerId);
    }
  }
};

// src/settings/settings-tab.ts
var import_obsidian2 = require("obsidian");

// src/settings/default-settings.ts
var DEFAULT_SETTINGS = {
  enableRealTimeCorrection: true,
  locale: "fr_FR",
  highlightEnabled: false,
  highlightButton: true,
  tabTitleBarButton: false,
  fixers: {
    // Fixers JoliTypo - IDs exacts
    "Ellipsis": true,
    // Points de suspension : ... → …
    "Dash": true,
    // Tirets typographiques : -- → —
    "SmartQuotes": true,
    // Guillemets intelligents selon locale
    "CurlyQuote": true,
    // Apostrophes courbes : ' → '
    "FrenchNoBreakSpace": true,
    // Espaces insécables français : ! ? ; :
    "NoSpaceBeforeComma": true,
    // Virgules sans espace avant
    "Unit": true,
    // Espaces avant unités : 25 kg
    "Dimension": true,
    // Multiplication : 12 x 34 → 12×34
    "Hyphen": false,
    // Césure (complexe, désactivé par défaut)
    "Trademark": true
    // Marques : (c) → ©, (r) → ®, (tm) → ™
  }
};
var LOCALE_CONFIGURATIONS = {
  "en_GB": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ],
  "fr_FR": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "FrenchNoBreakSpace",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ],
  "fr_CA": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ],
  "de_DE": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ]
};
var LOCALE_NAMES = {
  "fr_FR": "\u{1F1EB}\u{1F1F7} Fran\xE7ais (France)",
  "fr_CA": "\u{1F1E8}\u{1F1E6} Fran\xE7ais (Canada)",
  "en_GB": "\u{1F1EC}\u{1F1E7} English (UK)",
  "de_DE": "\u{1F1E9}\u{1F1EA} Deutsch (Deutschland)"
};
function validateSettings(settings) {
  var _a, _b, _c, _d, _e;
  const validated = {
    enableRealTimeCorrection: (_a = settings.enableRealTimeCorrection) != null ? _a : DEFAULT_SETTINGS.enableRealTimeCorrection,
    locale: (_b = settings.locale) != null ? _b : DEFAULT_SETTINGS.locale,
    highlightEnabled: (_c = settings.highlightEnabled) != null ? _c : DEFAULT_SETTINGS.highlightEnabled,
    highlightButton: (_d = settings.highlightButton) != null ? _d : DEFAULT_SETTINGS.highlightButton,
    // ✅ Ajouté
    tabTitleBarButton: (_e = settings.tabTitleBarButton) != null ? _e : DEFAULT_SETTINGS.tabTitleBarButton,
    // ✅ Ajouté
    fixers: { ...DEFAULT_SETTINGS.fixers, ...settings.fixers }
  };
  Object.keys(DEFAULT_SETTINGS.fixers).forEach((fixerId) => {
    if (typeof validated.fixers[fixerId] !== "boolean") {
      validated.fixers[fixerId] = DEFAULT_SETTINGS.fixers[fixerId];
    }
  });
  if (!(validated.locale in LOCALE_CONFIGURATIONS)) {
    validated.locale = "fr_FR";
  }
  return validated;
}
var CATEGORY_NAMES = {
  "punctuation": "Ponctuation",
  "spacing": "Espacement",
  "quotes": "Guillemets",
  "symbols": "Symboles"
};

// src/settings/settings-tab.ts
var TypographySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Param\xE8tres Typography Fixers" });
    containerEl.createEl("p", {
      text: "Plugin de correction typographique bas\xE9 sur JoliTypo. Corrige automatiquement les erreurs typographiques selon les r\xE8gles fran\xE7aises, anglaises et allemandes.",
      cls: "setting-item-description"
    });
    this.createGeneralSettings(containerEl);
    this.createFixerSettings(containerEl);
    this.createActionsSection(containerEl);
    this.addCustomStyles(containerEl);
    this.createHighlightSettings(containerEl);
  }
  /**
   * Crée la section de configuration générale
   */
  createGeneralSettings(containerEl) {
    containerEl.createEl("h3", { text: "Configuration g\xE9n\xE9rale" });
    new import_obsidian2.Setting(containerEl).setName("Correction en temps r\xE9el").setDesc("Active la correction automatique pendant la frappe").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableRealTimeCorrection).onChange(async (value) => {
        this.plugin.settings.enableRealTimeCorrection = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Langue typographique").setDesc(
      "Choisissez les r\xE8gles typographiques \xE0 appliquer. Change automatiquement les fixers recommand\xE9s."
    ).addDropdown((dropdown) => {
      Object.entries(LOCALE_NAMES).forEach(([locale, name]) => {
        dropdown.addOption(locale, name);
      });
      return dropdown.setValue(this.plugin.settings.locale).onChange(async (value) => {
        this.plugin.settings.locale = value;
        this.updateFixersForLocale(value);
        await this.plugin.saveSettings();
      });
    });
    const activeFixersCount = Object.values(this.plugin.settings.fixers).filter(
      Boolean
    ).length;
    const totalFixersCount = Object.keys(this.plugin.settings.fixers).length;
    containerEl.createEl("p", {
      text: `${activeFixersCount}/${totalFixersCount} r\xE8gles activ\xE9es pour ${LOCALE_NAMES[this.plugin.settings.locale]}`,
      cls: "setting-item-description"
    });
  }
  /**
   * Crée la section des fixers par catégorie
   */
  createFixerSettings(containerEl) {
    containerEl.createEl("h3", { text: "R\xE8gles de correction" });
    containerEl.createEl("p", {
      text: "Activez ou d\xE9sactivez les r\xE8gles typographiques selon vos besoins. Les r\xE8gles recommand\xE9es pour votre langue sont activ\xE9es automatiquement.",
      cls: "setting-item-description"
    });
    const fixersByCategory = this.plugin.engine.getFixers().reduce((acc, fixer) => {
      if (!acc[fixer.category]) acc[fixer.category] = [];
      acc[fixer.category].push(fixer);
      return acc;
    }, {});
    Object.entries(fixersByCategory).forEach(([category, fixers]) => {
      const categoryHeader = containerEl.createEl("h4", {
        text: CATEGORY_NAMES[category] || category,
        cls: "typography-category-header"
      });
      const toggleAllButton = categoryHeader.createEl("button", {
        text: "Tout basculer",
        cls: "typography-toggle-category"
      });
      toggleAllButton.addEventListener("click", async () => {
        const allEnabled = fixers.every((f) => f.enabled);
        const newState = !allEnabled;
        fixers.forEach((fixer) => {
          this.plugin.settings.fixers[fixer.id] = newState;
        });
        await this.plugin.saveSettings();
        this.display();
      });
      fixers.forEach((fixer) => {
        const setting = new import_obsidian2.Setting(containerEl).setName(fixer.name).setDesc(fixer.description).addToggle(
          (toggle) => toggle.setValue(fixer.enabled).onChange(async (value) => {
            this.plugin.settings.fixers[fixer.id] = value;
            await this.plugin.saveSettings();
          })
        );
        const isRecommended = this.isFixerRecommendedForCurrentLocale(fixer.id);
        if (isRecommended) {
          const badge = setting.nameEl.createEl("span", {
            text: "Recommand\xE9",
            cls: "typography-recommended-badge"
          });
        }
        if (fixer.getExample) {
          const example = fixer.getExample();
          const exampleEl = setting.descEl.createDiv({
            cls: "typography-example"
          });
          exampleEl.createDiv({
            cls: "typography-example-before"
          }).innerHTML = `<span class="typography-example-label">Avant :</span> <code>${example.before}</code>`;
          exampleEl.createDiv({
            cls: "typography-example-after"
          }).innerHTML = `<span class="typography-example-label">Apr\xE8s :</span> <code>${example.after}</code>`;
        }
      });
    });
  }
  /**
   * Crée la section des actions
   */
  createActionsSection(containerEl) {
    containerEl.createEl("h3", { text: "Actions" });
    new import_obsidian2.Setting(containerEl).setName("Restaurer la configuration recommand\xE9e").setDesc(
      `Active les fixers recommand\xE9s pour ${LOCALE_NAMES[this.plugin.settings.locale]}`
    ).addButton(
      (button) => button.setButtonText("Restaurer").onClick(async () => {
        this.updateFixersForLocale(this.plugin.settings.locale);
        await this.plugin.saveSettings();
        new import_obsidian2.Notice("Configuration restaur\xE9e");
      })
    );
  }
  /**
   * Met à jour les fixers actifs selon la locale choisie
   */
  updateFixersForLocale(locale) {
    const activeFixers = LOCALE_CONFIGURATIONS[locale];
    if (activeFixers) {
      Object.keys(this.plugin.settings.fixers).forEach((fixerId) => {
        this.plugin.settings.fixers[fixerId] = false;
      });
      activeFixers.forEach((fixerId) => {
        this.plugin.settings.fixers[fixerId] = true;
      });
      this.display();
    }
  }
  /**
   * Vérifie si un fixer est recommandé pour la locale actuelle
   */
  isFixerRecommendedForCurrentLocale(fixerId) {
    const recommendedFixers = LOCALE_CONFIGURATIONS[this.plugin.settings.locale];
    return recommendedFixers ? recommendedFixers.includes(fixerId) : false;
  }
  /**
   * Ajoute les styles CSS personnalisés
   */
  addCustomStyles(containerEl) {
    if (!containerEl.querySelector(".typography-custom-styles")) {
      const style = containerEl.createEl("style", {
        cls: "typography-custom-styles"
      });
      style.textContent = `
                .typography-category-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-top: 24px;
                    margin-bottom: 12px;
                    padding-bottom: 8px;
                    border-bottom: 1px solid var(--background-modifier-border);
                }
                
                .typography-toggle-category {
                    font-size: 0.8em;
                    padding: 4px 8px;
                    border-radius: 4px;
                }
                
                .typography-recommended-badge {
                    display: inline-block;
                    background: var(--color-accent);
                    color: var(--text-on-accent);
                    font-size: 0.7em;
                    padding: 2px 6px;
                    border-radius: 10px;
                    margin-left: 8px;
                    font-weight: 500;
                }
                
                .typography-example {
                    margin-top: 12px;
                    padding: 12px;
                    background: var(--background-primary);
                    border: 1px solid var(--background-modifier-border);
                    border-radius: 6px;
                    font-size: 0.85em;
                    line-height: 1.4;
                }
                
                .typography-example-label {
                    font-weight: 600;
                    color: var(--text-accent);
                    margin-right: 6px;
                }
                
                .typography-example code {
                    background: var(--background-modifier-form-field);
                    color: var(--text-normal);
                    padding: 3px 6px;
                    border-radius: 4px;
                    font-family: var(--font-monospace);
                    font-size: 0.9em;
                    border: 1px solid var(--background-modifier-border-hover);
                    user-select: text;
    pointer-events: auto;
    cursor: text;
                }
                
                .typography-example-before {
                    margin-bottom: 6px;
                }
                
                .typography-example-after {
                    margin-top: 6px;
                }
                
                .typography-test-original,
                .typography-test-corrected {
                    background: var(--background-secondary);
                    padding: 12px;
                    border-radius: 4px;
                    margin: 8px 0;
                    font-family: var(--font-monospace);
                    font-size: 0.9em;
                    white-space: pre-wrap;
                }
                
                .typography-no-changes {
                    color: var(--text-warning);
                    font-style: italic;
                    margin-top: 12px;
                }
            `;
    }
  }
  /**
   * Crée les paramètres de mise en évidence
   * @param containerEl Conteneur parent
   */
  createHighlightSettings(containerEl) {
    const desEl = containerEl.createEl("p", {
      text: "Affichage des caract\xE8res invisibles"
    });
    desEl.style.fontWeight = "bold";
    desEl.style.marginTop = "3em";
    new import_obsidian2.Setting(containerEl).setName("Activer l'affichage des caract\xE8res invisibles").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.highlightEnabled).onChange(async (value) => {
        this.plugin.settings.highlightEnabled = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var TypographyPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarButton = null;
    this.tabTitleBarButton = null;
    this.decorationExtension = null;
  }
  /**
   * Chargement du plugin
   */
  async onload() {
    console.log("\u{1F680} Chargement du plugin Typography");
    try {
      await this.loadSettings();
      this.engine = new TypographyEngine(this.settings);
      this.decorationExtension = createDecorations(this.settings);
      this.registerEditorExtension(this.decorationExtension);
      this.updateInvisibleCharsDisplay();
      if (this.settings.highlightButton) {
        this.statusBarButton = createStatusBarButton(
          this,
          this.settings.highlightEnabled,
          this.toggleHighlight.bind(this)
        );
      }
      if (this.settings.tabTitleBarButton) {
        this.tabTitleBarButton = createTabTitleBarButton(
          this,
          this.settings.highlightEnabled,
          () => this.toggleHighlight()
        );
      }
      this.addCommands();
      this.registerKeyboardHandlers();
      this.addSettingTab(new TypographySettingTab(this.app, this));
      new import_obsidian3.Notice("Typography Fixers charg\xE9 avec succ\xE8s!", 3e3);
    } catch (error) {
      console.error("\u274C Erreur lors du chargement:", error);
      new import_obsidian3.Notice("Erreur lors du chargement du plugin", 5e3);
    }
  }
  /**
   * Déchargement du plugin
   */
  onunload() {
    console.log("\u{1F44B} D\xE9chargement du plugin Typography Fixers");
    removeStatusBarButton(this.statusBarButton);
    removeTabTitleBarButton(this.tabTitleBarButton);
  }
  /**
   * Charge les paramètres depuis le stockage
   */
  async loadSettings() {
    const loadedData = await this.loadData();
    this.settings = validateSettings(loadedData || {});
  }
  /**
   * Sauvegarde les paramètres
   */
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.engine) {
      this.engine.updateSettings(this.settings);
    }
    this.updateInvisibleCharsDisplay();
  }
  /**
   * Ajoute les commandes du plugin
   */
  addCommands() {
    this.addCommand({
      id: "fix-selection",
      name: "Corriger la s\xE9lection",
      icon: "type",
      editorCallback: (editor) => {
        this.correctSelection(editor);
      }
    });
    this.addCommand({
      id: "fix-entire-note",
      name: "Corriger toute la note",
      icon: "whole-word",
      editorCallback: (editor) => {
        this.correctEntireNote(editor);
      }
    });
    this.addCommand({
      id: "toggle-realtime",
      name: "Basculer correction temps r\xE9el",
      icon: "zap",
      callback: async () => {
        await this.toggleRealTimeCorrection();
      }
    });
    this.addCommand({
      id: "toggle-highlight",
      name: "Afficher/Masquer les caract\xE8res invisibles",
      callback: () => {
        this.toggleHighlight();
      }
    });
  }
  /**
   * Corrige la sélection ou toute la note si rien n'est sélectionné
   */
  correctSelection(editor) {
    const selection = editor.getSelection();
    if (selection) {
      const result = this.engine.processTextWithDetails(selection);
      editor.replaceSelection(result.corrected);
      this.showCorrectionNotice(result.correctionsCount, result.fixersUsed);
    } else {
      this.correctEntireNote(editor);
    }
  }
  /**
   * Corrige toute la note
   */
  correctEntireNote(editor) {
    const content = editor.getValue();
    const result = this.engine.processTextWithDetails(content);
    if (result.corrected !== content) {
      editor.setValue(result.corrected);
      this.showCorrectionNotice(result.correctionsCount, result.fixersUsed);
    } else {
      new import_obsidian3.Notice("Aucune correction n\xE9cessaire", 2e3);
    }
  }
  /**
   * Bascule la correction en temps réel
   */
  async toggleRealTimeCorrection() {
    this.settings.enableRealTimeCorrection = !this.settings.enableRealTimeCorrection;
    await this.saveSettings();
    const status = this.settings.enableRealTimeCorrection ? "activ\xE9e" : "d\xE9sactiv\xE9e";
    new import_obsidian3.Notice(`Correction temps r\xE9el ${status}`, 3e3);
  }
  /**
   * Affiche une notification de correction
   */
  showCorrectionNotice(correctionsCount, fixersUsed) {
    if (correctionsCount === 0) {
      new import_obsidian3.Notice("Aucune correction appliqu\xE9e", 2e3);
      return;
    }
    const message = correctionsCount === 1 ? "1 correction appliqu\xE9e" : `${correctionsCount} corrections appliqu\xE9es`;
    new import_obsidian3.Notice(message, 3e3);
  }
  /**
   * Enregistre les gestionnaires d'événements clavier
   */
  registerKeyboardHandlers() {
    this.registerDomEvent(document, "keydown", (event) => {
      this.handleKeyDown(event);
    });
  }
  /**
   * Gère les événements clavier pour la correction temps réel
   */
  handleKeyDown(event) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView || activeView.getMode() !== "source") {
      return;
    }
    const editor = activeView.editor;
    if (this.engine.handleKeyEvent(event, editor)) {
      event.preventDefault();
    }
  }
  /**
   * API publique pour les autres plugins (optionnel)
   */
  getEngine() {
    return this.engine;
  }
  async applyCorrections(text) {
    return this.engine.processText(text);
  }
  getAvailableFixers() {
    return this.engine.getFixers().map((f) => f.id);
  }
  /**
   * Met à jour l'affichage des caractères invisibles via CSS
   */
  updateInvisibleCharsDisplay() {
    if (this.settings.highlightEnabled) {
      document.body.addClass("typography-show-invisible");
    } else {
      document.body.removeClass("typography-show-invisible");
    }
  }
  /**
   * Bascule l'affichage des caractères invisibles
   */
  async toggleHighlight() {
    this.settings.highlightEnabled = !this.settings.highlightEnabled;
    this.updateInvisibleCharsDisplay();
    await this.saveSettings();
    const status = this.settings.highlightEnabled ? "activ\xE9" : "d\xE9sactiv\xE9";
    new import_obsidian3.Notice(`Affichage des caract\xE8res invisibles ${status}`, 3e3);
    updateStatusBarButton(this.statusBarButton, this.settings.highlightEnabled);
    updateTabTitleBarButton(this.tabTitleBarButton, this.settings.highlightEnabled);
  }
};
//# sourceMappingURL=data:application/json;base64,

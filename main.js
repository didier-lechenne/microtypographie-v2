/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
Typography Fixers Plugin for Obsidian
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TypographyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/ui/decorations.ts
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var currentSettings;
function createDecorations(settings) {
  currentSettings = settings;
  const nonBreakingSpaceDecoration = import_view.Decoration.mark({
    class: "nonBreakingSpace"
  });
  const thinSpaceDecoration = import_view.Decoration.mark({
    class: "thinSpace"
  });
  const emDashDecoration = import_view.Decoration.mark({
    class: "em-dash"
  });
  const regularSpaceDecoration = import_view.Decoration.mark({
    class: "regularSpace"
  });
  return import_view.ViewPlugin.fromClass(class {
    constructor(view) {
      this.decorations = this.buildDecorations(view);
    }
    update(update) {
      if (update.docChanged || update.viewportChanged) {
        this.decorations = this.buildDecorations(update.view);
      }
    }
    buildDecorations(view) {
      const builder = new import_state.RangeSetBuilder();
      if (currentSettings && currentSettings.highlightEnabled) {
        for (let { from, to } of view.visibleRanges) {
          let text = view.state.doc.sliceString(from, to);
          let startPos = from;
          let inFrontmatter = false;
          let inCodeBlock = false;
          let lineStart = true;
          for (let i = 0; i < text.length; i++) {
            const char = text[i];
            const pos = startPos + i;
            if (lineStart && text.substr(i, 3) === "---") {
              inFrontmatter = !inFrontmatter;
              i += 2;
              lineStart = false;
              continue;
            }
            if (lineStart && text.substr(i, 3) === "```") {
              inCodeBlock = !inCodeBlock;
              i += 2;
              lineStart = false;
              continue;
            }
            if (char === "\n") {
              lineStart = true;
            } else if (lineStart && char !== " " && char !== "	") {
              lineStart = false;
            }
            const isInSpecialBlock = inFrontmatter || inCodeBlock;
            if (!isInSpecialBlock) {
              if (char === "\xA0") {
                builder.add(pos, pos + 1, nonBreakingSpaceDecoration);
              }
              if (char === "\u202F") {
                builder.add(pos, pos + 1, thinSpaceDecoration);
              }
              if (char === "\u2014") {
                builder.add(pos, pos + 1, emDashDecoration);
              }
              if (char === " ") {
                builder.add(pos, pos + 1, regularSpaceDecoration);
              }
            }
          }
        }
      }
      return builder.finish();
    }
  }, {
    decorations: (v) => v.decorations
  });
}

// src/ui/statusBar.ts
var import_obsidian = require("obsidian");
function createStatusBarButton(plugin, isEnabled, toggleCallback) {
  const statusBarItemEl = plugin.addStatusBarItem();
  statusBarItemEl.id = "highlight-status-bar-button";
  statusBarItemEl.addClass("mod-clickable");
  (0, import_obsidian.setIcon)(statusBarItemEl, "pilcrow");
  statusBarItemEl.setAttribute("aria-label", "Afficher/Masquer les caract\xE8res invisibles");
  statusBarItemEl.setAttribute("data-tooltip-position", "top");
  updateStatusBarButton(statusBarItemEl, isEnabled);
  statusBarItemEl.onClickEvent(() => {
    toggleCallback();
  });
  return statusBarItemEl;
}
function createTabTitleBarButton(plugin, isEnabled, toggleCallback) {
  const buttonEl = document.createElement("button");
  buttonEl.id = "highlight-tab-title-button";
  buttonEl.className = "clickable-icon view-action";
  buttonEl.setAttribute("aria-label", "Afficher/Masquer les caract\xE8res invisibles");
  (0, import_obsidian.setIcon)(buttonEl, "pilcrow");
  updateTabTitleBarButton(buttonEl, isEnabled);
  buttonEl.addEventListener("click", (event) => {
    event.preventDefault();
    toggleCallback();
  });
  const titleBarEl = document.querySelector(".view-header-title-container");
  if (titleBarEl) {
    const actionsEl = titleBarEl.nextElementSibling;
    if (actionsEl && actionsEl.classList.contains("view-actions")) {
      actionsEl.prepend(buttonEl);
    }
  }
  return buttonEl;
}
function updateStatusBarButton(buttonEl, isEnabled) {
  if (!buttonEl) return;
  if (isEnabled) {
    buttonEl.addClass("is-active");
  } else {
    buttonEl.removeClass("is-active");
  }
}
function updateTabTitleBarButton(buttonEl, isEnabled) {
  if (!buttonEl) return;
  if (isEnabled) {
    buttonEl.addClass("is-active");
  } else {
    buttonEl.removeClass("is-active");
  }
}
function removeStatusBarButton(buttonEl) {
  if (buttonEl) {
    buttonEl.remove();
  }
}
function removeTabTitleBarButton(buttonEl) {
  if (buttonEl) {
    buttonEl.remove();
  }
}

// src/fixers/base/base-fixer.ts
var BaseFixer = class {
  constructor() {
    this.enabled = true;
    this.locale = "fr-FR";
  }
  /**
   * Configuration de la locale (optionnelle)
   */
  setLocale(locale) {
    this.locale = locale;
  }
  /**
   * Vérifie si le fixer est compatible avec la locale actuelle
   */
  isLocaleCompatible(targetLocales) {
    return targetLocales.some(
      (locale) => this.locale.startsWith(locale)
    );
  }
  /**
   * Vérifie si le fixer est activé et compatible
   */
  isActive() {
    return this.enabled;
  }
  /**
   * Applique une transformation regex simple - implémentation
   */
  applyRegexTransform(text, pattern, replacement) {
    if (typeof replacement === "string") {
      return text.replace(pattern, replacement);
    } else {
      return text.replace(pattern, replacement);
    }
  }
  /**
   * Applique plusieurs transformations regex en séquence
   */
  applyMultipleTransforms(text, transforms) {
    return transforms.reduce((result, transform) => {
      if (typeof transform.replacement === "string") {
        return this.applyRegexTransform(result, transform.pattern, transform.replacement);
      } else {
        return this.applyRegexTransform(result, transform.pattern, transform.replacement);
      }
    }, text);
  }
  /**
   * Vérifie si une position dans le texte est dans un contexte valide
   * (pas dans du code, des liens, etc.)
   */
  isValidContext(text, position) {
    const beforeContext = text.substring(Math.max(0, position - 10), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 10));
    if (beforeContext.includes("`") && afterContext.includes("`")) {
      return false;
    }
    if (beforeContext.includes("[") && afterContext.includes("]")) {
      return false;
    }
    return true;
  }
  /**
   * Méthode utilitaire pour logger les corrections (développement)
   */
  logCorrection(original, corrected) {
    if (original !== corrected) {
      console.debug(`[${this.id}] "${original}" \u2192 "${corrected}"`);
    }
  }
};

// src/constants/unicode.ts
var UNICODE_CHARS = {
  // ========================
  // ESPACES SPÉCIAUX
  // ========================
  NO_BREAK_THIN_SPACE: "\u202F",
  NO_BREAK_SPACE: "\xA0",
  NORMAL_SPACE: " ",
  // ========================
  // PONCTUATION
  // ========================
  ELLIPSIS: "\u2026",
  NDASH: "\u2013",
  MDASH: "\u2014",
  // ========================
  // GUILLEMETS ET APOSTROPHES
  // ========================
  LDQUO: "\u201C",
  RDQUO: "\u201D",
  /** LSQUO: '“',  Apostrophe ouvrante (U+2018) - Rarement utilisée */
  RSQUO: "\u2019",
  LAQUO: "\xAB",
  RAQUO: "\xBB",
  BDQUO: "\u201E",
  // &bdquo; or &#8222;
  SHY: "\xC2\xAD",
  // &shy;
  // ========================
  // SYMBOLES MATHÉMATIQUES
  // ========================
  TIMES: "\xD7",
  DIVIDE: "\xF7",
  PLUS_MINUS: "\xB1",
  /** Symbole plus ou moins (U+00B1) */
  MINUS: "\u2212",
  /** Symbole moins (U+2212) - Plus long que le trait d'union standard */
  // ========================
  // SYMBOLES DE MARQUE
  // ========================
  /** Symbole trademark (U+2122) - Remplace (tm) */
  TRADE: "\u2122",
  REG: "\xAE",
  /** Symbole registered (U+00AE) - Remplace (r) */
  COPY: "\xA9",
  /** Symbole copyright (U+00A9) - Remplace (c) */
  // ========================
  // AUTRES SYMBOLES UTILES
  // ========================
  /** Prime (U+2032) - Minutes, pieds */
  PRIME: "\u2032",
  /** Double prime (U+2033) - Secondes, pouces */
  DOUBLE_PRIME: "\u2033",
  /** Section (U+00A7) */
  SECTION: "\xA7",
  /** Paragraphe (U+00B6) */
  PARAGRAPH: "\xB6",
  /** Puce (U+2022) */
  BULLET: "\u2022",
  /** Flèche droite (U+2192) */
  ARROW_RIGHT: "\u2192",
  /** Flèche gauche (U+2190) */
  ARROW_LEFT: "\u2190",
  /** Euro (U+20AC) */
  EURO: "\u20AC",
  /** Livre sterling (U+00A3) */
  POUND: "\xA3",
  /** Yen (U+00A5) */
  YEN: "\xA5"
};
var UNICODE_PATTERNS = {
  /** Détecte les espaces multiples */
  MULTIPLE_SPACES: /\s{2,}/g,
  /** Détecte les points de suspension standards */
  ELLIPSIS_DOTS: /\.{3,}/g,
  /** Détecte les doubles tirets */
  DOUBLE_DASH: /--/g,
  /** Détecte les guillemets droits */
  STRAIGHT_QUOTES: /"/g,
  /** Détecte les apostrophes droites dans les contractions */
  STRAIGHT_APOSTROPHES: /(\w)'/g,
  /** Détecte x entre nombres pour multiplication */
  MULTIPLY_X: /(\d+)\s*[xX]\s*(\d+)/g,
  /** Détecte * entre nombres pour multiplication */
  MULTIPLY_STAR: /(\d+)\s*\*\s*(\d+)/g,
  /** Détecte les symboles de marque textuels */
  TRADEMARK_TEXT: /\(tm\)/gi,
  REGISTERED_TEXT: /\(r\)/gi,
  COPYRIGHT_TEXT: /\(c\)/gi
};

// src/fixers/punctuation/ellipsis.ts
var Ellipsis = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Ellipsis";
    this.name = "Points de suspension";
    this.description = "Remplace ... par le caract\xE8re ellipse Unicode (\u2026)";
    this.category = "punctuation";
    this.priority = 1;
  }
  /**
   * Transforme les points multiples en ellipse Unicode
   */
  fix(text) {
    return this.applyRegexTransform(
      text,
      UNICODE_PATTERNS.ELLIPSIS_DOTS,
      UNICODE_CHARS.ELLIPSIS
    );
  }
  /**
   * Gère la saisie en temps réel des points de suspension
   */
  handleKeyEvent(event, editor) {
    if (event.key === "." && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      if (beforeCursor.endsWith("..")) {
        const newLine = line.substring(0, cursor.ch - 2) + UNICODE_CHARS.ELLIPSIS + line.substring(cursor.ch);
        editor.setLine(cursor.line, newLine);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch - 1
          // Position après l'ellipse
        });
        return true;
      }
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "En fait... c'est compliqu\xE9...",
      after: `En fait${UNICODE_CHARS.ELLIPSIS} c'est compliqu\xE9${UNICODE_CHARS.ELLIPSIS}`
    };
  }
};

// src/fixers/punctuation/dash.ts
var Dash = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Dash";
    this.name = "Tirets typographiques";
    this.description = "Convertit -- en \u2014 et am\xE9liore les tirets entre nombres";
    this.category = "punctuation";
    this.priority = 2;
  }
  /**
   * Applique les transformations de tirets
   */
  fix(text) {
    const transforms = [
      // Double tiret vers tiret cadratin
      {
        pattern: /--/g,
        replacement: UNICODE_CHARS.MDASH
      },
      // Tiret entre nombres (dates, plages) vers tiret demi-cadratin
      {
        pattern: /(\d+)\s*-\s*(\d+)/g,
        replacement: `$1${UNICODE_CHARS.NDASH}$2`
      },
      // Espaces autour du tiret cadratin pour le français
      {
        pattern: /\s*—\s*/g,
        replacement: this.isLocaleCompatible(["fr"]) ? ` ${UNICODE_CHARS.MDASH} ` : `${UNICODE_CHARS.MDASH}`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Gère la saisie en temps réel des doubles tirets
   */
  handleKeyEvent(event, editor) {
    if (event.key === "-" && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      if (beforeCursor.endsWith("-")) {
        const replacement = this.isLocaleCompatible(["fr"]) ? ` ${UNICODE_CHARS.MDASH} ` : `${UNICODE_CHARS.MDASH}`;
        const newLine = line.substring(0, cursor.ch - 1) + replacement + line.substring(cursor.ch);
        editor.setLine(cursor.line, newLine);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch - 1 + replacement.length
        });
        return true;
      }
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    const beforeDash = this.isLocaleCompatible(["fr"]) ? " \u2014 " : "\u2014";
    return {
      before: "P\xE9riode 2020-2024 -- une \xE9poque importante",
      after: `P\xE9riode 2020${UNICODE_CHARS.NDASH}2024${beforeDash}une \xE9poque importante`
    };
  }
};

// src/fixers/punctuation/hyphen.ts
var Hyphen = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Hyphen";
    this.name = "C\xE9sures typographiques";
    this.description = "Am\xE9liore les tirets et c\xE9sures (fonctionnalit\xE9 basique)";
    this.category = "punctuation";
    this.priority = 10;
    this.enabled = false;
  }
  // Désactivé par défaut - règles complexes
  /**
   * Applique quelques transformations basiques de tirets
   * Note: Les vraies règles de césure nécessiteraient un dictionnaire complet
   */
  fix(text) {
    const transforms = [
      // Corriger les tirets mal espacés dans les dialogues français
      {
        pattern: /^(\s*)-\s*/gm,
        replacement: this.isLocaleCompatible(["fr"]) ? `$1${UNICODE_CHARS.MDASH} ` : `$1${UNICODE_CHARS.MDASH}`
      },
      // Tirets dans les énumérations
      {
        pattern: /(\n\s*)-\s+/g,
        replacement: `$1${UNICODE_CHARS.MDASH} `
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "- Premier point\n- Deuxi\xE8me point\n- Dialogue",
      after: `${UNICODE_CHARS.MDASH} Premier point
${UNICODE_CHARS.MDASH} Deuxi\xE8me point
${UNICODE_CHARS.MDASH} Dialogue`
    };
  }
};

// src/fixers/spacing/french-spacing.ts
var FrenchNoBreakSpace = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "FrenchNoBreakSpace";
    this.name = "Espaces fran\xE7ais";
    this.description = "Ajoute des espaces ins\xE9cables selon les r\xE8gles fran\xE7aises";
    this.category = "spacing";
    this.priority = 3;
    this.enabled = true;
  }
  // Activé par défaut pour le français
  /**
   * Applique les règles d'espacement françaises
   */
  fix(text) {
    if (!this.isLocaleCompatible(["fr"])) {
      return text;
    }
    const transforms = [
      // Espace fine insécable avant ; ! ? »
      {
        pattern: /\s*([;!?»])/g,
        replacement: `${UNICODE_CHARS.NO_BREAK_THIN_SPACE}$1`
      },
      // Espace insécable avant :
      {
        pattern: /\s*(:)/g,
        replacement: `${UNICODE_CHARS.NO_BREAK_SPACE}$1`
      },
      // Espace insécable après «
      {
        pattern: /(«)\s*/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_THIN_SPACE}`
      },
      // Corriger les espaces dans les nombres (optionnel)
      {
        pattern: /(\d)\s+(\d{3})/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_THIN_SPACE}$2`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Gère la saisie en temps réel des signes de ponctuation français
   */
  handleKeyEvent(event, editor) {
    if (!this.isLocaleCompatible(["fr"])) {
      return false;
    }
    const punctuationMap = {
      "!": UNICODE_CHARS.NO_BREAK_THIN_SPACE,
      "?": UNICODE_CHARS.NO_BREAK_THIN_SPACE,
      ";": UNICODE_CHARS.NO_BREAK_THIN_SPACE,
      ":": UNICODE_CHARS.NO_BREAK_SPACE
    };
    if (punctuationMap[event.key] && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      const cleanBefore = beforeCursor.replace(/\s+$/, "");
      const spaceChar = punctuationMap[event.key];
      const newLine = cleanBefore + spaceChar + event.key + line.substring(cursor.ch);
      editor.setLine(cursor.line, newLine);
      editor.setCursor({
        line: cursor.line,
        ch: cleanBefore.length + 2
        // Position après la ponctuation
      });
      return true;
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: `Il a dit "Bonjour" et c'est parti.`,
      after: `Il a dit ${UNICODE_CHARS.LAQUO}${UNICODE_CHARS.NO_BREAK_THIN_SPACE}Bonjour${UNICODE_CHARS.NO_BREAK_THIN_SPACE}${UNICODE_CHARS.RAQUO} et c${UNICODE_CHARS.RSQUO}est parti.`
    };
  }
};

// src/fixers/spacing/comma.ts
var NoSpaceBeforeComma = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "NoSpaceBeforeComma";
    this.name = "Virgules sans espace";
    this.description = "Supprime les espaces avant les virgules et normalise l'espacement";
    this.category = "spacing";
    this.priority = 6;
  }
  /**
   * Corrige l'espacement autour des virgules
   */
  fix(text) {
    const transforms = [
      // Supprimer les espaces avant les virgules
      {
        pattern: /\s+,/g,
        replacement: ","
      },
      // Normaliser l'espacement après les virgules (exactement un espace)
      {
        pattern: /,\s*/g,
        replacement: ", "
      },
      // Cas particulier : virgule en fin de ligne (pas d'espace après)
      {
        pattern: /,\s*$/gm,
        replacement: ","
      },
      // Cas particulier : virgule avant fermeture de parenthèse/crochet
      {
        pattern: /,\s*([)\]}])/g,
        replacement: ",$1"
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "Pommes , poires,oranges ,bananes",
      after: "Pommes, poires, oranges, bananes"
    };
  }
};

// src/fixers/spacing/unit.ts
var Unit = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "unit";
    this.name = "Espaces avant unit\xE9s";
    this.description = "Ajoute des espaces ins\xE9cables entre nombres et unit\xE9s (12 h, 50 \u20AC, 25 %)";
    this.category = "spacing";
    this.priority = 7;
    this.enabled = true;
  }
  /**
   * Applique les espaces insécables avant les unités
   */
  fix(text) {
    const transforms = [
      // === UNITÉS DE TEMPS ===
      {
        pattern: /(\d+)\s*([hms])\b(?![a-zA-Z])/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Unités complètes de temps
      {
        pattern: /(\d+)\s*(heures?|minutes?|secondes?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === UNITÉS MONÉTAIRES ===
      {
        pattern: /(\d+)\s*([€$£¥₹₽])/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Unités monétaires écrites
      {
        pattern: /(\d+)\s*(euros?|dollars?|livres?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === POURCENTAGES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*%/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}%`
      },
      // === UNITÉS SI ET MÉTRIQUES ===
      // Masse
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(mg|[cdk]?g|tonnes?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Distance
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(mm|cm|dm|[dk]?m|km)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Volume
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(ml|[cdk]?l|litres?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Énergie et puissance
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(W|[kmMG]W|kWh?|[kmMG]Wh?)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Fréquence
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(Hz|[kmMG]Hz)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === TEMPÉRATURES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*°([CF]?)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}\xB0$2`
      },
      // === UNITÉS INFORMATIQUES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*([kmMGT]?[Bb]|[kmMGT]?o)\b/g,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // Unités complètes
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(octets?|bytes?|bits?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === UNITÉS D'ANGLES ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(degrés?|rad|radiants?)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      },
      // === UNITÉS DE VITESSE ===
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*(km\/h|mph|m\/s)\b/gi,
        replacement: `$1${UNICODE_CHARS.NO_BREAK_SPACE}$2`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Vérifie si le contexte est valide pour l'ajout d'espace
   */
  isValidContext(text, position) {
    if (!super.isValidContext(text, position)) {
      return false;
    }
    const beforeContext = text.substring(Math.max(0, position - 5), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 5));
    if (beforeContext.match(/^\s*#*\s*\d+$/) && afterContext.match(/^[hH]\d/)) {
      return false;
    }
    return true;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "Temp\xE9rature: 25 \xB0C, vitesse: 120 km/h, taille: 1.8 m, poids: 75 kg, prix: 299 \u20AC",
      after: `Temp\xE9rature: 25${UNICODE_CHARS.NO_BREAK_SPACE}\xB0C, vitesse: 120${UNICODE_CHARS.NO_BREAK_SPACE}km/h, taille: 1.8${UNICODE_CHARS.NO_BREAK_SPACE}m, poids: 75${UNICODE_CHARS.NO_BREAK_SPACE}kg, prix: 299${UNICODE_CHARS.NO_BREAK_SPACE}\u20AC`
    };
  }
};

// src/fixers/spacing/dimension.ts
var Dimension = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Dimension";
    this.name = "Symboles de multiplication";
    this.description = "Convertit x et * entre nombres en symbole \xD7 (12 x 34 \u2192 12\xD734)";
    this.category = "spacing";
    this.priority = 8;
    this.enabled = true;
  }
  /**
   * Applique les transformations de multiplication
   */
  fix(text) {
    const transforms = [
      // Multiplication avec 'x' ou 'X' entre nombres
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*[xX]\s*(\d+(?:[,.]?\d+)?)/g,
        replacement: `$1${UNICODE_CHARS.TIMES}$2`
      },
      // Multiplication avec '*' entre nombres
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*\*\s*(\d+(?:[,.]?\d+)?)/g,
        replacement: `$1${UNICODE_CHARS.TIMES}$2`
      },
      // Dimensions (longueur x largeur x hauteur)
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*[xX]\s*(\d+(?:[,.]?\d+)?)\s*[xX]\s*(\d+(?:[,.]?\d+)?)/g,
        replacement: `$1${UNICODE_CHARS.TIMES}$2${UNICODE_CHARS.TIMES}$3`
      },
      // Format "dimensions" avec unités (ex: 12cm x 34cm)
      {
        pattern: /(\d+(?:[,.]?\d+)?)\s*([a-zA-Z]+)\s*[xX]\s*(\d+(?:[,.]?\d+)?)\s*([a-zA-Z]+)?/g,
        replacement: `$1$2${UNICODE_CHARS.TIMES}$3$4`
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Vérifie si le contexte est valide (éviter de modifier le code, variables, etc.)
   */
  isValidContext(text, position) {
    if (!super.isValidContext(text, position)) {
      return false;
    }
    const beforeContext = text.substring(Math.max(0, position - 10), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 10));
    if (beforeContext.match(/[a-zA-Z]$/) && afterContext.match(/^[a-zA-Z]/)) {
      return false;
    }
    return true;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "R\xE9solution: 1920 x 1080, format 16 * 9, dimensions 12cm x 34cm x 56cm",
      after: `R\xE9solution: 1920${UNICODE_CHARS.TIMES}1080, format 16${UNICODE_CHARS.TIMES}9, dimensions 12cm${UNICODE_CHARS.TIMES}34cm${UNICODE_CHARS.TIMES}56cm`
    };
  }
};

// src/fixers/quotes/smart-quotes.ts
var SmartQuotes = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "SmartQuotes";
    this.name = "Guillemets intelligents";
    this.description = "Convertit les guillemets droits en guillemets typographiques";
    this.category = "quotes";
    this.priority = 4;
  }
  /**
   * Applique les guillemets intelligents selon la langue
   */
  fix(text) {
    if (this.isLocaleCompatible(["fr"])) {
      return this.fixFrenchQuotes(text);
    } else {
      return this.fixEnglishQuotes(text);
    }
  }
  /**
   * Applique les guillemets français « »
   */
  fixFrenchQuotes(text) {
    let result = text;
    let inQuote = false;
    result = result.replace(/"/g, () => {
      if (!inQuote) {
        inQuote = true;
        return `${UNICODE_CHARS.LAQUO}${UNICODE_CHARS.NO_BREAK_THIN_SPACE}`;
      } else {
        inQuote = false;
        return `${UNICODE_CHARS.NO_BREAK_THIN_SPACE}${UNICODE_CHARS.RAQUO}`;
      }
    });
    result = result.replace(/'/g, UNICODE_CHARS.RSQUO);
    return result;
  }
  /**
   * Applique les guillemets anglais " "
   */
  fixEnglishQuotes(text) {
    let result = text;
    let inQuote = false;
    result = result.replace(/"/g, () => {
      if (!inQuote) {
        inQuote = true;
        return UNICODE_CHARS.LDQUO;
      } else {
        inQuote = false;
        return UNICODE_CHARS.RDQUO;
      }
    });
    result = result.replace(/(\w)'/g, `$1${UNICODE_CHARS.RSQUO}`);
    return result;
  }
  /**
   * Fournit un exemple selon la langue
   */
  getExample() {
    if (this.isLocaleCompatible(["fr"])) {
      return {
        before: `Il a dit "Bonjour" et c'est parti.`,
        after: `Il a dit ${UNICODE_CHARS.LAQUO}${UNICODE_CHARS.NO_BREAK_SPACE}Bonjour${UNICODE_CHARS.NO_BREAK_SPACE}${UNICODE_CHARS.RAQUO} et c${UNICODE_CHARS.RSQUO}est parti.`
      };
    } else {
      return {
        before: `He said "Hello" and it's done.`,
        after: `He said ${UNICODE_CHARS.LDQUO}Hello${UNICODE_CHARS.RDQUO} and it${UNICODE_CHARS.RSQUO}s done.`
      };
    }
  }
};

// src/fixers/quotes/curly-quote.ts
var CurlyQuote = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "CurlyQuote";
    this.name = "Apostrophes courbes";
    this.description = "Convertit les apostrophes droites ' en apostrophes typographiques '";
    this.category = "quotes";
    this.priority = 5;
  }
  /**
   * Transforme les apostrophes droites en apostrophes courbes
   * Logique JoliTypo : cherche [lettre]' et remplace par [lettre]'
   */
  fix(text) {
    return this.applyRegexTransform(
      text,
      /([a-z])'/gim,
      `$1${UNICODE_CHARS.RSQUO}`
    );
  }
  /**
   * Gère la saisie en temps réel des apostrophes
   */
  handleKeyEvent(event, editor) {
    if (event.key === "'" && !event.ctrlKey && !event.metaKey) {
      const cursor = editor.getCursor();
      const line = editor.getLine(cursor.line);
      const beforeCursor = line.substring(0, cursor.ch);
      const lastChar = beforeCursor.slice(-1);
      if (lastChar && /[a-zA-Z]/.test(lastChar)) {
        const newLine = beforeCursor + UNICODE_CHARS.RSQUO + line.substring(cursor.ch);
        editor.setLine(cursor.line, newLine);
        editor.setCursor({
          line: cursor.line,
          ch: cursor.ch + 1
        });
        return true;
      }
    }
    return false;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "I'm happy, you're great, it's working!",
      after: `I${UNICODE_CHARS.RSQUO}m happy, you${UNICODE_CHARS.RSQUO}re great, it${UNICODE_CHARS.RSQUO}s working!`
    };
  }
};

// src/fixers/symbols/trademark.ts
var Trademark = class extends BaseFixer {
  constructor() {
    super(...arguments);
    this.id = "Trademark";
    this.name = "Symboles de marques";
    this.description = "Convertit (c) \u2192 \xA9, (r) \u2192 \xAE, (tm) \u2192 \u2122";
    this.category = "symbols";
    this.priority = 9;
    this.enabled = true;
  }
  /**
   * Applique les transformations des symboles de marques
   */
  fix(text) {
    const transforms = [
      // Copyright: (c) ou (C) → ©
      {
        pattern: /\(([cC])\)/g,
        replacement: UNICODE_CHARS.COPY
      },
      // Registered trademark: (r) ou (R) → ®
      {
        pattern: /\(([rR])\)/g,
        replacement: UNICODE_CHARS.REG
      },
      // Trademark: (tm) ou (TM) ou (Tm) → ™
      {
        pattern: /\(([tT][mM])\)/gi,
        replacement: UNICODE_CHARS.TRADE
      }
    ];
    return this.applyMultipleTransforms(text, transforms);
  }
  /**
   * Vérifie si le contexte est approprié pour la transformation
   */
  isValidContext(text, position) {
    if (!super.isValidContext(text, position)) {
      return false;
    }
    const beforeContext = text.substring(Math.max(0, position - 20), position);
    const afterContext = text.substring(position, Math.min(text.length, position + 20));
    if (beforeContext.includes("http") || beforeContext.includes("www.")) {
      return false;
    }
    if (beforeContext.includes("/") && afterContext.includes("/")) {
      return false;
    }
    return true;
  }
  /**
   * Fournit un exemple de transformation
   */
  getExample() {
    return {
      before: "Microsoft (c) 2025, iPhone (r), Google Search (tm)",
      after: `Microsoft ${UNICODE_CHARS.COPY} 2025, iPhone ${UNICODE_CHARS.REG}, Google Search ${UNICODE_CHARS.TRADE}`
    };
  }
};

// src/fixers/index.ts
function createAllFixers() {
  return [
    // Ordre par priorité croissante
    new Ellipsis(),
    // priorité 1
    new Dash(),
    // priorité 2
    new FrenchNoBreakSpace(),
    // priorité 3
    new SmartQuotes(),
    // priorité 4
    new CurlyQuote(),
    // priorité 5
    new NoSpaceBeforeComma(),
    // priorité 6
    new Unit(),
    // priorité 7
    new Dimension(),
    // priorité 8
    new Trademark(),
    // priorité 9
    new Hyphen()
    // priorité 10 (désactivé par défaut)
  ];
}

// src/engine/typography-engine.ts
var TypographyEngine = class {
  constructor(settings) {
    this.fixers = /* @__PURE__ */ new Map();
    this.settings = settings;
    this.initializeFixers();
  }
  /**
   * Initialise tous les fixers disponibles
   */
  initializeFixers() {
    const allFixers = createAllFixers();
    allFixers.forEach((fixer) => {
      this.fixers.set(fixer.id, fixer);
      if (fixer.id in this.settings.fixers) {
        fixer.enabled = this.settings.fixers[fixer.id];
      }
      if (fixer.setLocale) {
        fixer.setLocale(this.settings.locale);
      }
    });
  }
  /**
   * Met à jour les paramètres et reconfigure les fixers
   */
  updateSettings(settings) {
    this.settings = settings;
    this.fixers.forEach((fixer) => {
      if (fixer.id in settings.fixers) {
        fixer.enabled = settings.fixers[fixer.id];
      }
      if (fixer.setLocale) {
        fixer.setLocale(settings.locale);
      }
    });
  }
  /**
   * Retourne tous les fixers triés par priorité
   */
  getFixers() {
    return Array.from(this.fixers.values()).sort((a, b) => a.priority - b.priority);
  }
  /**
   * Retourne uniquement les fixers activés
   */
  getEnabledFixers() {
    return this.getFixers().filter((fixer) => fixer.enabled);
  }
  /**
   * Retourne les fixers par catégorie
   */
  getFixersByCategory(category) {
    return this.getFixers().filter((fixer) => fixer.category === category);
  }
  /**
   * Obtient un fixer spécifique par son ID
   */
  getFixer(id) {
    return this.fixers.get(id);
  }
  /**
   * Traite un texte avec tous les fixers activés
   */
  processText(text) {
    const enabledFixers = this.getEnabledFixers();
    return enabledFixers.reduce((currentText, fixer) => {
      try {
        return fixer.fix(currentText);
      } catch (error) {
        console.warn(`[TypographyEngine] Erreur dans le fixer ${fixer.id}:`, error);
        return currentText;
      }
    }, text);
  }
  /**
   * Traite un texte et retourne des informations détaillées sur les corrections
   */
  processTextWithDetails(text) {
    const original = text;
    const enabledFixers = this.getEnabledFixers();
    const fixersUsed = [];
    let correctionsCount = 0;
    const corrected = enabledFixers.reduce((currentText, fixer) => {
      try {
        const fixedText = fixer.fix(currentText);
        if (fixedText !== currentText) {
          fixersUsed.push(fixer.id);
          correctionsCount++;
        }
        return fixedText;
      } catch (error) {
        console.warn(`[TypographyEngine] Erreur dans le fixer ${fixer.id}:`, error);
        return currentText;
      }
    }, text);
    return {
      original,
      corrected,
      correctionsCount,
      fixersUsed
    };
  }
  /**
   * Gère les événements clavier en temps réel
   */
  handleKeyEvent(event, editor) {
    if (!this.settings.enableRealTimeCorrection) {
      return false;
    }
    const enabledFixers = this.getEnabledFixers();
    for (const fixer of enabledFixers) {
      if (fixer.handleKeyEvent) {
        try {
          if (fixer.handleKeyEvent(event, editor)) {
            return true;
          }
        } catch (error) {
          console.warn(`[TypographyEngine] Erreur dans handleKeyEvent pour ${fixer.id}:`, error);
        }
      }
    }
    return false;
  }
  /**
   * Active ou désactive un fixer spécifique
   */
  toggleFixer(fixerId, enabled) {
    const fixer = this.fixers.get(fixerId);
    if (fixer) {
      fixer.enabled = enabled;
      this.settings.fixers[fixerId] = enabled;
      return true;
    }
    return false;
  }
  /**
   * Active ou désactive tous les fixers d'une catégorie
   */
  toggleCategory(category, enabled) {
    const categoryFixers = this.getFixersByCategory(category);
    categoryFixers.forEach((fixer) => {
      fixer.enabled = enabled;
      this.settings.fixers[fixer.id] = enabled;
    });
    return categoryFixers.length;
  }
  /**
   * Réinitialise tous les fixers à leur état par défaut
   */
  resetToDefaults() {
    this.fixers.forEach((fixer) => {
      const defaultEnabled = this.getDefaultEnabledState(fixer.id);
      fixer.enabled = defaultEnabled;
      this.settings.fixers[fixer.id] = defaultEnabled;
    });
  }
  /**
   * Détermine l'état par défaut d'un fixer selon la configuration
   */
  getDefaultEnabledState(fixerId) {
    const frenchEssentialFixers = ["ellipsis", "dash", "french-spacing", "smart-quotes", "comma"];
    const englishEssentialFixers = ["ellipsis", "dash", "smart-quotes", "comma"];
    if (this.settings.locale.startsWith("fr")) {
      return frenchEssentialFixers.includes(fixerId);
    } else {
      return englishEssentialFixers.includes(fixerId);
    }
  }
};

// src/settings/settings-tab.ts
var import_obsidian2 = require("obsidian");

// src/settings/default-settings.ts
var DEFAULT_SETTINGS = {
  enableRealTimeCorrection: true,
  locale: "fr_FR",
  highlightEnabled: false,
  highlightButton: true,
  tabTitleBarButton: false,
  fixers: {
    // Fixers JoliTypo - IDs exacts
    "Ellipsis": true,
    // Points de suspension : ... → …
    "Dash": true,
    // Tirets typographiques : -- → —
    "SmartQuotes": true,
    // Guillemets intelligents selon locale
    "CurlyQuote": true,
    // Apostrophes courbes : ' → '
    "FrenchNoBreakSpace": true,
    // Espaces insécables français : ! ? ; :
    "NoSpaceBeforeComma": true,
    // Virgules sans espace avant
    "Unit": true,
    // Espaces avant unités : 25 kg
    "Dimension": true,
    // Multiplication : 12 x 34 → 12×34
    "Hyphen": false,
    // Césure (complexe, désactivé par défaut)
    "Trademark": true
    // Marques : (c) → ©, (r) → ®, (tm) → ™
  }
};
var LOCALE_CONFIGURATIONS = {
  "en_GB": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ],
  "fr_FR": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "FrenchNoBreakSpace",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ],
  "fr_CA": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ],
  "de_DE": [
    "Ellipsis",
    "Dimension",
    "Unit",
    "Dash",
    "SmartQuotes",
    "NoSpaceBeforeComma",
    "CurlyQuote",
    "Hyphen",
    "Trademark"
  ]
};
var LOCALE_NAMES = {
  "fr_FR": "\u{1F1EB}\u{1F1F7} Fran\xE7ais (France)",
  "fr_CA": "\u{1F1E8}\u{1F1E6} Fran\xE7ais (Canada)",
  "en_GB": "\u{1F1EC}\u{1F1E7} English (UK)",
  "de_DE": "\u{1F1E9}\u{1F1EA} Deutsch (Deutschland)"
};
function validateSettings(settings) {
  var _a, _b, _c, _d, _e;
  const validated = {
    enableRealTimeCorrection: (_a = settings.enableRealTimeCorrection) != null ? _a : DEFAULT_SETTINGS.enableRealTimeCorrection,
    locale: (_b = settings.locale) != null ? _b : DEFAULT_SETTINGS.locale,
    highlightEnabled: (_c = settings.highlightEnabled) != null ? _c : DEFAULT_SETTINGS.highlightEnabled,
    highlightButton: (_d = settings.highlightButton) != null ? _d : DEFAULT_SETTINGS.highlightButton,
    // ✅ Ajouté
    tabTitleBarButton: (_e = settings.tabTitleBarButton) != null ? _e : DEFAULT_SETTINGS.tabTitleBarButton,
    // ✅ Ajouté
    fixers: { ...DEFAULT_SETTINGS.fixers, ...settings.fixers }
  };
  Object.keys(DEFAULT_SETTINGS.fixers).forEach((fixerId) => {
    if (typeof validated.fixers[fixerId] !== "boolean") {
      validated.fixers[fixerId] = DEFAULT_SETTINGS.fixers[fixerId];
    }
  });
  if (!(validated.locale in LOCALE_CONFIGURATIONS)) {
    validated.locale = "fr_FR";
  }
  return validated;
}
var CATEGORY_NAMES = {
  "punctuation": "Ponctuation",
  "spacing": "Espacement",
  "quotes": "Guillemets",
  "symbols": "Symboles"
};

// src/settings/settings-tab.ts
var TypographySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Param\xE8tres Typography Fixers" });
    containerEl.createEl("p", {
      text: "Plugin de correction typographique bas\xE9 sur JoliTypo. Corrige automatiquement les erreurs typographiques selon les r\xE8gles fran\xE7aises, anglaises et allemandes.",
      cls: "setting-item-description"
    });
    this.createGeneralSettings(containerEl);
    this.createFixerSettings(containerEl);
    this.createActionsSection(containerEl);
    this.addCustomStyles(containerEl);
    this.createHighlightSettings(containerEl);
  }
  /**
   * Crée la section de configuration générale
   */
  createGeneralSettings(containerEl) {
    containerEl.createEl("h3", { text: "Configuration g\xE9n\xE9rale" });
    new import_obsidian2.Setting(containerEl).setName("Correction en temps r\xE9el").setDesc("Active la correction automatique pendant la frappe").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.enableRealTimeCorrection).onChange(async (value) => {
        this.plugin.settings.enableRealTimeCorrection = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Langue typographique").setDesc(
      "Choisissez les r\xE8gles typographiques \xE0 appliquer. Change automatiquement les fixers recommand\xE9s."
    ).addDropdown((dropdown) => {
      Object.entries(LOCALE_NAMES).forEach(([locale, name]) => {
        dropdown.addOption(locale, name);
      });
      return dropdown.setValue(this.plugin.settings.locale).onChange(async (value) => {
        this.plugin.settings.locale = value;
        this.updateFixersForLocale(value);
        await this.plugin.saveSettings();
      });
    });
    const activeFixersCount = Object.values(this.plugin.settings.fixers).filter(
      Boolean
    ).length;
    const totalFixersCount = Object.keys(this.plugin.settings.fixers).length;
    containerEl.createEl("p", {
      text: `${activeFixersCount}/${totalFixersCount} r\xE8gles activ\xE9es pour ${LOCALE_NAMES[this.plugin.settings.locale]}`,
      cls: "setting-item-description"
    });
  }
  /**
   * Crée la section des fixers par catégorie
   */
  createFixerSettings(containerEl) {
    containerEl.createEl("h3", { text: "R\xE8gles de correction" });
    containerEl.createEl("p", {
      text: "Activez ou d\xE9sactivez les r\xE8gles typographiques selon vos besoins. Les r\xE8gles recommand\xE9es pour votre langue sont activ\xE9es automatiquement.",
      cls: "setting-item-description"
    });
    const fixersByCategory = this.plugin.engine.getFixers().reduce((acc, fixer) => {
      if (!acc[fixer.category]) acc[fixer.category] = [];
      acc[fixer.category].push(fixer);
      return acc;
    }, {});
    Object.entries(fixersByCategory).forEach(([category, fixers]) => {
      const categoryHeader = containerEl.createEl("h4", {
        text: CATEGORY_NAMES[category] || category,
        cls: "typography-category-header"
      });
      const toggleAllButton = categoryHeader.createEl("button", {
        text: "Tout basculer",
        cls: "typography-toggle-category"
      });
      toggleAllButton.addEventListener("click", async () => {
        const allEnabled = fixers.every((f) => f.enabled);
        const newState = !allEnabled;
        fixers.forEach((fixer) => {
          this.plugin.settings.fixers[fixer.id] = newState;
        });
        await this.plugin.saveSettings();
        this.display();
      });
      fixers.forEach((fixer) => {
        const setting = new import_obsidian2.Setting(containerEl).setName(fixer.name).setDesc(fixer.description).addToggle(
          (toggle) => toggle.setValue(fixer.enabled).onChange(async (value) => {
            this.plugin.settings.fixers[fixer.id] = value;
            await this.plugin.saveSettings();
          })
        );
        const isRecommended = this.isFixerRecommendedForCurrentLocale(fixer.id);
        if (isRecommended) {
          const badge = setting.nameEl.createEl("span", {
            text: "Recommand\xE9",
            cls: "typography-recommended-badge"
          });
        }
        if (fixer.getExample) {
          const example = fixer.getExample();
          const exampleEl = setting.descEl.createDiv({
            cls: "typography-example"
          });
          exampleEl.createDiv({
            cls: "typography-example-before"
          }).innerHTML = `<span class="typography-example-label">Avant :</span> <code>${example.before}</code>`;
          exampleEl.createDiv({
            cls: "typography-example-after"
          }).innerHTML = `<span class="typography-example-label">Apr\xE8s :</span> <code>${example.after}</code>`;
        }
      });
    });
  }
  /**
   * Crée la section des actions
   */
  createActionsSection(containerEl) {
    containerEl.createEl("h3", { text: "Actions" });
    new import_obsidian2.Setting(containerEl).setName("Restaurer la configuration recommand\xE9e").setDesc(
      `Active les fixers recommand\xE9s pour ${LOCALE_NAMES[this.plugin.settings.locale]}`
    ).addButton(
      (button) => button.setButtonText("Restaurer").onClick(async () => {
        this.updateFixersForLocale(this.plugin.settings.locale);
        await this.plugin.saveSettings();
        new import_obsidian2.Notice("Configuration restaur\xE9e");
      })
    );
  }
  /**
   * Met à jour les fixers actifs selon la locale choisie
   */
  updateFixersForLocale(locale) {
    const activeFixers = LOCALE_CONFIGURATIONS[locale];
    if (activeFixers) {
      Object.keys(this.plugin.settings.fixers).forEach((fixerId) => {
        this.plugin.settings.fixers[fixerId] = false;
      });
      activeFixers.forEach((fixerId) => {
        this.plugin.settings.fixers[fixerId] = true;
      });
      this.display();
    }
  }
  /**
   * Vérifie si un fixer est recommandé pour la locale actuelle
   */
  isFixerRecommendedForCurrentLocale(fixerId) {
    const recommendedFixers = LOCALE_CONFIGURATIONS[this.plugin.settings.locale];
    return recommendedFixers ? recommendedFixers.includes(fixerId) : false;
  }
  /**
   * Ajoute les styles CSS personnalisés
   */
  addCustomStyles(containerEl) {
    if (!containerEl.querySelector(".typography-custom-styles")) {
      const style = containerEl.createEl("style", {
        cls: "typography-custom-styles"
      });
      style.textContent = `
                .typography-category-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-top: 24px;
                    margin-bottom: 12px;
                    padding-bottom: 8px;
                    border-bottom: 1px solid var(--background-modifier-border);
                }
                
                .typography-toggle-category {
                    font-size: 0.8em;
                    padding: 4px 8px;
                    border-radius: 4px;
                }
                
                .typography-recommended-badge {
                    display: inline-block;
                    background: var(--color-accent);
                    color: var(--text-on-accent);
                    font-size: 0.7em;
                    padding: 2px 6px;
                    border-radius: 10px;
                    margin-left: 8px;
                    font-weight: 500;
                }
                
                .typography-example {
                    margin-top: 12px;
                    padding: 12px;
                    background: var(--background-primary);
                    border: 1px solid var(--background-modifier-border);
                    border-radius: 6px;
                    font-size: 0.85em;
                    line-height: 1.4;
                }
                
                .typography-example-label {
                    font-weight: 600;
                    color: var(--text-accent);
                    margin-right: 6px;
                }
                
                .typography-example code {
                    background: var(--background-modifier-form-field);
                    color: var(--text-normal);
                    padding: 3px 6px;
                    border-radius: 4px;
                    font-family: var(--font-monospace);
                    font-size: 0.9em;
                    border: 1px solid var(--background-modifier-border-hover);
                    user-select: text;
    pointer-events: auto;
    cursor: text;
                }
                
                .typography-example-before {
                    margin-bottom: 6px;
                }
                
                .typography-example-after {
                    margin-top: 6px;
                }
                
                .typography-test-original,
                .typography-test-corrected {
                    background: var(--background-secondary);
                    padding: 12px;
                    border-radius: 4px;
                    margin: 8px 0;
                    font-family: var(--font-monospace);
                    font-size: 0.9em;
                    white-space: pre-wrap;
                }
                
                .typography-no-changes {
                    color: var(--text-warning);
                    font-style: italic;
                    margin-top: 12px;
                }
            `;
    }
  }
  /**
   * Crée les paramètres de mise en évidence
   * @param containerEl Conteneur parent
   */
  createHighlightSettings(containerEl) {
    const desEl = containerEl.createEl("p", {
      text: "Affichage des caract\xE8res invisibles"
    });
    desEl.style.fontWeight = "bold";
    desEl.style.marginTop = "3em";
    new import_obsidian2.Setting(containerEl).setName("Activer l'affichage des caract\xE8res invisibles").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.highlightEnabled).onChange(async (value) => {
        this.plugin.settings.highlightEnabled = value;
        await this.plugin.saveSettings();
      })
    );
  }
};

// src/main.ts
var TypographyPlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.statusBarButton = null;
    this.tabTitleBarButton = null;
    this.decorationExtension = null;
  }
  /**
   * Chargement du plugin
   */
  async onload() {
    console.log("\u{1F680} Chargement du plugin Typography");
    try {
      await this.loadSettings();
      this.engine = new TypographyEngine(this.settings);
      this.decorationExtension = createDecorations(this.settings);
      this.registerEditorExtension(this.decorationExtension);
      this.updateInvisibleCharsDisplay();
      if (this.settings.highlightButton) {
        this.statusBarButton = createStatusBarButton(
          this,
          this.settings.highlightEnabled,
          this.toggleHighlight.bind(this)
        );
      }
      this.tabTitleBarButton = createTabTitleBarButton(
        this,
        this.settings.highlightEnabled,
        () => this.toggleHighlight()
      );
      this.addCommands();
      this.registerKeyboardHandlers();
      this.addSettingTab(new TypographySettingTab(this.app, this));
      new import_obsidian3.Notice("Typography Fixers charg\xE9 avec succ\xE8s!", 3e3);
    } catch (error) {
      console.error("\u274C Erreur lors du chargement:", error);
      new import_obsidian3.Notice("Erreur lors du chargement du plugin", 5e3);
    }
  }
  /**
   * Déchargement du plugin
   */
  onunload() {
    console.log("\u{1F44B} D\xE9chargement du plugin Typography Fixers");
    removeStatusBarButton(this.statusBarButton);
    removeTabTitleBarButton(this.tabTitleBarButton);
  }
  /**
   * Charge les paramètres depuis le stockage
   */
  async loadSettings() {
    const loadedData = await this.loadData();
    this.settings = validateSettings(loadedData || {});
  }
  /**
   * Sauvegarde les paramètres
   */
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.engine) {
      this.engine.updateSettings(this.settings);
    }
    this.updateInvisibleCharsDisplay();
  }
  /**
   * Ajoute les commandes du plugin
   */
  addCommands() {
    this.addCommand({
      id: "fix-selection",
      name: "Corriger la s\xE9lection",
      icon: "type",
      editorCallback: (editor) => {
        this.correctSelection(editor);
      }
    });
    this.addCommand({
      id: "fix-entire-note",
      name: "Corriger toute la note",
      icon: "whole-word",
      editorCallback: (editor) => {
        this.correctEntireNote(editor);
      }
    });
    this.addCommand({
      id: "toggle-realtime",
      name: "Basculer correction temps r\xE9el",
      icon: "zap",
      callback: async () => {
        await this.toggleRealTimeCorrection();
      }
    });
    this.addCommand({
      id: "toggle-highlight",
      name: "Afficher/Masquer les caract\xE8res invisibles",
      callback: () => {
        this.toggleHighlight();
      }
    });
  }
  /**
   * Corrige la sélection ou toute la note si rien n'est sélectionné
   */
  correctSelection(editor) {
    const selection = editor.getSelection();
    if (selection) {
      const result = this.engine.processTextWithDetails(selection);
      editor.replaceSelection(result.corrected);
      this.showCorrectionNotice(result.correctionsCount, result.fixersUsed);
    } else {
      this.correctEntireNote(editor);
    }
  }
  /**
   * Corrige toute la note
   */
  correctEntireNote(editor) {
    const content = editor.getValue();
    const result = this.engine.processTextWithDetails(content);
    if (result.corrected !== content) {
      editor.setValue(result.corrected);
      this.showCorrectionNotice(result.correctionsCount, result.fixersUsed);
    } else {
      new import_obsidian3.Notice("Aucune correction n\xE9cessaire", 2e3);
    }
  }
  /**
   * Bascule la correction en temps réel
   */
  async toggleRealTimeCorrection() {
    this.settings.enableRealTimeCorrection = !this.settings.enableRealTimeCorrection;
    await this.saveSettings();
    const status = this.settings.enableRealTimeCorrection ? "activ\xE9e" : "d\xE9sactiv\xE9e";
    new import_obsidian3.Notice(`Correction temps r\xE9el ${status}`, 3e3);
  }
  /**
   * Affiche une notification de correction
   */
  showCorrectionNotice(correctionsCount, fixersUsed) {
    if (correctionsCount === 0) {
      new import_obsidian3.Notice("Aucune correction appliqu\xE9e", 2e3);
      return;
    }
    const message = correctionsCount === 1 ? "1 correction appliqu\xE9e" : `${correctionsCount} corrections appliqu\xE9es`;
    new import_obsidian3.Notice(message, 3e3);
  }
  /**
   * Enregistre les gestionnaires d'événements clavier
   */
  registerKeyboardHandlers() {
    this.registerDomEvent(document, "keydown", (event) => {
      this.handleKeyDown(event);
    });
  }
  /**
   * Gère les événements clavier pour la correction temps réel
   */
  handleKeyDown(event) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
    if (!activeView || activeView.getMode() !== "source") {
      return;
    }
    const editor = activeView.editor;
    if (this.engine.handleKeyEvent(event, editor)) {
      event.preventDefault();
    }
  }
  /**
   * API publique pour les autres plugins (optionnel)
   */
  getEngine() {
    return this.engine;
  }
  async applyCorrections(text) {
    return this.engine.processText(text);
  }
  getAvailableFixers() {
    return this.engine.getFixers().map((f) => f.id);
  }
  /**
   * Met à jour l'affichage des caractères invisibles via CSS
   */
  updateInvisibleCharsDisplay() {
    if (this.settings.highlightEnabled) {
      document.body.addClass("typography-show-invisible");
    } else {
      document.body.removeClass("typography-show-invisible");
    }
  }
  /**
   * Bascule l'affichage des caractères invisibles
   */
  async toggleHighlight() {
    this.settings.highlightEnabled = !this.settings.highlightEnabled;
    this.updateInvisibleCharsDisplay();
    await this.saveSettings();
    const status = this.settings.highlightEnabled ? "activ\xE9" : "d\xE9sactiv\xE9";
    new import_obsidian3.Notice(`Affichage des caract\xE8res invisibles ${status}`, 3e3);
    updateStatusBarButton(this.statusBarButton, this.settings.highlightEnabled);
    updateTabTitleBarButton(this.tabTitleBarButton, this.settings.highlightEnabled);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3VpL2RlY29yYXRpb25zLnRzIiwgInNyYy91aS9zdGF0dXNCYXIudHMiLCAic3JjL2ZpeGVycy9iYXNlL2Jhc2UtZml4ZXIudHMiLCAic3JjL2NvbnN0YW50cy91bmljb2RlLnRzIiwgInNyYy9maXhlcnMvcHVuY3R1YXRpb24vZWxsaXBzaXMudHMiLCAic3JjL2ZpeGVycy9wdW5jdHVhdGlvbi9kYXNoLnRzIiwgInNyYy9maXhlcnMvcHVuY3R1YXRpb24vaHlwaGVuLnRzIiwgInNyYy9maXhlcnMvc3BhY2luZy9mcmVuY2gtc3BhY2luZy50cyIsICJzcmMvZml4ZXJzL3NwYWNpbmcvY29tbWEudHMiLCAic3JjL2ZpeGVycy9zcGFjaW5nL3VuaXQudHMiLCAic3JjL2ZpeGVycy9zcGFjaW5nL2RpbWVuc2lvbi50cyIsICJzcmMvZml4ZXJzL3F1b3Rlcy9zbWFydC1xdW90ZXMudHMiLCAic3JjL2ZpeGVycy9xdW90ZXMvY3VybHktcXVvdGUudHMiLCAic3JjL2ZpeGVycy9zeW1ib2xzL3RyYWRlbWFyay50cyIsICJzcmMvZml4ZXJzL2luZGV4LnRzIiwgInNyYy9lbmdpbmUvdHlwb2dyYXBoeS1lbmdpbmUudHMiLCAic3JjL3NldHRpbmdzL3NldHRpbmdzLXRhYi50cyIsICJzcmMvc2V0dGluZ3MvZGVmYXVsdC1zZXR0aW5ncy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gc3JjL21haW4udHMgLSBQbHVnaW4gcHJpbmNpcGFsIG1vZHVsYWlyZVxyXG5pbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBQbHVnaW4sIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVEZWNvcmF0aW9ucyB9IGZyb20gJy4vdWkvZGVjb3JhdGlvbnMnO1xyXG5pbXBvcnQge1xyXG4gIGNyZWF0ZVN0YXR1c0JhckJ1dHRvbixcclxuICB1cGRhdGVTdGF0dXNCYXJCdXR0b24sXHJcbiAgcmVtb3ZlU3RhdHVzQmFyQnV0dG9uLFxyXG4gIGNyZWF0ZVRhYlRpdGxlQmFyQnV0dG9uLFxyXG4gIHVwZGF0ZVRhYlRpdGxlQmFyQnV0dG9uLFxyXG4gIHJlbW92ZVRhYlRpdGxlQmFyQnV0dG9uLFxyXG59IGZyb20gXCIuL3VpL3N0YXR1c0JhclwiO1xyXG5cclxuXHJcbi8vIEltcG9ydCBkZXMgdHlwZXNcclxuaW1wb3J0IHsgVHlwb2dyYXBoeVNldHRpbmdzIH0gZnJvbSBcIi4vdHlwZXMvaW50ZXJmYWNlc1wiO1xyXG5cclxuLy8gSW1wb3J0IGRlcyBtb2R1bGVzXHJcbmltcG9ydCB7IFR5cG9ncmFwaHlFbmdpbmUgfSBmcm9tIFwiLi9lbmdpbmUvdHlwb2dyYXBoeS1lbmdpbmVcIjtcclxuaW1wb3J0IHsgVHlwb2dyYXBoeVNldHRpbmdUYWIgfSBmcm9tIFwiLi9zZXR0aW5ncy9zZXR0aW5ncy10YWJcIjtcclxuaW1wb3J0IHtcclxuICB2YWxpZGF0ZVNldHRpbmdzLFxyXG59IGZyb20gXCIuL3NldHRpbmdzL2RlZmF1bHQtc2V0dGluZ3NcIjtcclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogUGx1Z2luIHByaW5jaXBhbCBUeXBvZ3JhcGh5IEZpeGVyc1xyXG4gKiBDb3JyZWN0aW9uIHR5cG9ncmFwaGlxdWUgbW9kdWxhaXJlIHBvdXIgT2JzaWRpYW5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFR5cG9ncmFwaHlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG4gIC8vIFV0aWxpc2F0aW9uIGRlIGwnYXNzZXJ0aW9uIGQnYXNzaWduYXRpb24gZFx1MDBFOWZpbml0aXZlICghKVxyXG4gIC8vIENlcyBwcm9wcmlcdTAwRTl0XHUwMEU5cyBzb250IGluaXRpYWxpc1x1MDBFOWVzIGRhbnMgb25sb2FkKCkgYXZhbnQgdG91dGUgdXRpbGlzYXRpb25cclxuICBzZXR0aW5ncyE6IFR5cG9ncmFwaHlTZXR0aW5ncztcclxuICBlbmdpbmUhOiBUeXBvZ3JhcGh5RW5naW5lO1xyXG4gIHN0YXR1c0JhckJ1dHRvbjogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuICB0YWJUaXRsZUJhckJ1dHRvbjogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcclxuICBkZWNvcmF0aW9uRXh0ZW5zaW9uOiBhbnkgPSBudWxsO1xyXG5cclxuICAvKipcclxuICAgKiBDaGFyZ2VtZW50IGR1IHBsdWdpblxyXG4gICAqL1xyXG5hc3luYyBvbmxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zb2xlLmxvZygnXHVEODNEXHVERTgwIENoYXJnZW1lbnQgZHUgcGx1Z2luIFR5cG9ncmFwaHknKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIENoYXJnZXIgbGVzIHBhcmFtXHUwMEU4dHJlc1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpc2VyIGxlIG1vdGV1ciB0eXBvZ3JhcGhpcXVlXHJcbiAgICAgICAgdGhpcy5lbmdpbmUgPSBuZXcgVHlwb2dyYXBoeUVuZ2luZSh0aGlzLnNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgLy8gQ3JcdTAwRTllciBldCBlbnJlZ2lzdHJlciBsZXMgZFx1MDBFOWNvcmF0aW9ucyAoVE9VSk9VUlMgYWN0aXZlcyBwb3VyIGdcdTAwRTluXHUwMEU5cmVyIGxlcyBzcGFucylcclxuICAgICAgICB0aGlzLmRlY29yYXRpb25FeHRlbnNpb24gPSBjcmVhdGVEZWNvcmF0aW9ucyh0aGlzLnNldHRpbmdzKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yRXh0ZW5zaW9uKHRoaXMuZGVjb3JhdGlvbkV4dGVuc2lvbik7XHJcblxyXG4gICAgICAgIC8vIEFwcGxpcXVlciBsJ1x1MDBFOXRhdCBpbml0aWFsIGQnYWZmaWNoYWdlIHZpYSBDU1NcclxuICAgICAgICB0aGlzLnVwZGF0ZUludmlzaWJsZUNoYXJzRGlzcGxheSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWdobGlnaHRCdXR0b24pIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0dXNCYXJCdXR0b24gPSBjcmVhdGVTdGF0dXNCYXJCdXR0b24oXHJcbiAgICAgICAgICAgICAgICB0aGlzLCBcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0RW5hYmxlZCxcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlSGlnaGxpZ2h0LmJpbmQodGhpcylcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvLyB0aGlzLnN0YXR1c0JhckJ1dHRvbiA9IGNyZWF0ZVN0YXR1c0JhckJ1dHRvbihcclxuICAgICAgICAvLyAgICAgdGhpcyxcclxuICAgICAgICAvLyAgICAgdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkLFxyXG4gICAgICAgIC8vICAgICAoKSA9PiB0aGlzLnRvZ2dsZUhpZ2hsaWdodCgpXHJcbiAgICAgICAgLy8gKTtcclxuXHJcbiAgICAgICAgdGhpcy50YWJUaXRsZUJhckJ1dHRvbiA9IGNyZWF0ZVRhYlRpdGxlQmFyQnV0dG9uKFxyXG4gICAgICAgICAgICB0aGlzLFxyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQsXHJcbiAgICAgICAgICAgICgpID0+IHRoaXMudG9nZ2xlSGlnaGxpZ2h0KClcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBBam91dGVyIGxlcyBjb21tYW5kZXNcclxuICAgICAgICB0aGlzLmFkZENvbW1hbmRzKCk7XHJcblxyXG4gICAgICAgIC8vIEdlc3Rpb25uYWlyZSBkJ1x1MDBFOXZcdTAwRTluZW1lbnRzIGNsYXZpZXJcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyS2V5Ym9hcmRIYW5kbGVycygpO1xyXG5cclxuICAgICAgICAvLyBJbnRlcmZhY2UgZGUgcGFyYW1cdTAwRTh0cmVzXHJcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBUeXBvZ3JhcGh5U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cclxuICAgICAgICBuZXcgTm90aWNlKCdUeXBvZ3JhcGh5IEZpeGVycyBjaGFyZ1x1MDBFOSBhdmVjIHN1Y2NcdTAwRThzIScsIDMwMDApO1xyXG5cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignXHUyNzRDIEVycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQ6JywgZXJyb3IpO1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ0VycmV1ciBsb3JzIGR1IGNoYXJnZW1lbnQgZHUgcGx1Z2luJywgNTAwMCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiAgLyoqXHJcbiAgICogRFx1MDBFOWNoYXJnZW1lbnQgZHUgcGx1Z2luXHJcbiAgICovXHJcbiAgb251bmxvYWQoKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlx1RDgzRFx1REM0QiBEXHUwMEU5Y2hhcmdlbWVudCBkdSBwbHVnaW4gVHlwb2dyYXBoeSBGaXhlcnNcIik7XHJcbiAgICByZW1vdmVTdGF0dXNCYXJCdXR0b24odGhpcy5zdGF0dXNCYXJCdXR0b24pO1xyXG4gICAgcmVtb3ZlVGFiVGl0bGVCYXJCdXR0b24odGhpcy50YWJUaXRsZUJhckJ1dHRvbik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFyZ2UgbGVzIHBhcmFtXHUwMEU4dHJlcyBkZXB1aXMgbGUgc3RvY2thZ2VcclxuICAgKi9cclxuICBhc3luYyBsb2FkU2V0dGluZ3MoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCBsb2FkZWREYXRhID0gYXdhaXQgdGhpcy5sb2FkRGF0YSgpO1xyXG4gICAgdGhpcy5zZXR0aW5ncyA9IHZhbGlkYXRlU2V0dGluZ3MobG9hZGVkRGF0YSB8fCB7fSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTYXV2ZWdhcmRlIGxlcyBwYXJhbVx1MDBFOHRyZXNcclxuICAgKi9cclxuYXN5bmMgc2F2ZVNldHRpbmdzKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcclxuICAgIFxyXG4gICAgLy8gTWV0dHJlIFx1MDBFMCBqb3VyIGxlIG1vdGV1clxyXG4gICAgaWYgKHRoaXMuZW5naW5lKSB7XHJcbiAgICAgICAgdGhpcy5lbmdpbmUudXBkYXRlU2V0dGluZ3ModGhpcy5zZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIE1ldHRyZSBcdTAwRTAgam91ciBsJ2FmZmljaGFnZSBDU1NcclxuICAgIHRoaXMudXBkYXRlSW52aXNpYmxlQ2hhcnNEaXNwbGF5KCk7XHJcbn1cclxuICAvKipcclxuICAgKiBBam91dGUgbGVzIGNvbW1hbmRlcyBkdSBwbHVnaW5cclxuICAgKi9cclxuICBwcml2YXRlIGFkZENvbW1hbmRzKCk6IHZvaWQge1xyXG4gICAgLy8gQ29tbWFuZGU6IENvcnJpZ2VyIGxhIHNcdTAwRTlsZWN0aW9uIG91IHRvdXRlIGxhIG5vdGVcclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcImZpeC1zZWxlY3Rpb25cIixcclxuICAgICAgbmFtZTogXCJDb3JyaWdlciBsYSBzXHUwMEU5bGVjdGlvblwiLFxyXG4gICAgICBpY29uOiBcInR5cGVcIixcclxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4ge1xyXG4gICAgICAgIHRoaXMuY29ycmVjdFNlbGVjdGlvbihlZGl0b3IpO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQ29tbWFuZGU6IENvcnJpZ2VyIHRvdXRlIGxhIG5vdGVcclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcImZpeC1lbnRpcmUtbm90ZVwiLFxyXG4gICAgICBuYW1lOiBcIkNvcnJpZ2VyIHRvdXRlIGxhIG5vdGVcIixcclxuICAgICAgaWNvbjogXCJ3aG9sZS13b3JkXCIsXHJcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IpID0+IHtcclxuICAgICAgICB0aGlzLmNvcnJlY3RFbnRpcmVOb3RlKGVkaXRvcik7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDb21tYW5kZTogQmFzY3VsZXIgbGEgY29ycmVjdGlvbiBlbiB0ZW1wcyByXHUwMEU5ZWxcclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcInRvZ2dsZS1yZWFsdGltZVwiLFxyXG4gICAgICBuYW1lOiBcIkJhc2N1bGVyIGNvcnJlY3Rpb24gdGVtcHMgclx1MDBFOWVsXCIsXHJcbiAgICAgIGljb246IFwiemFwXCIsXHJcbiAgICAgIGNhbGxiYWNrOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy50b2dnbGVSZWFsVGltZUNvcnJlY3Rpb24oKTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XHJcbiAgICAgIGlkOiBcInRvZ2dsZS1oaWdobGlnaHRcIixcclxuICAgICAgbmFtZTogXCJBZmZpY2hlci9NYXNxdWVyIGxlcyBjYXJhY3RcdTAwRThyZXMgaW52aXNpYmxlc1wiLFxyXG4gICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudG9nZ2xlSGlnaGxpZ2h0KCk7XHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvcnJpZ2UgbGEgc1x1MDBFOWxlY3Rpb24gb3UgdG91dGUgbGEgbm90ZSBzaSByaWVuIG4nZXN0IHNcdTAwRTlsZWN0aW9ublx1MDBFOVxyXG4gICAqL1xyXG4gIHByaXZhdGUgY29ycmVjdFNlbGVjdGlvbihlZGl0b3I6IEVkaXRvcik6IHZvaWQge1xyXG4gICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG5cclxuICAgIGlmIChzZWxlY3Rpb24pIHtcclxuICAgICAgLy8gQ29ycmlnZXIgbGEgc1x1MDBFOWxlY3Rpb25cclxuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lbmdpbmUucHJvY2Vzc1RleHRXaXRoRGV0YWlscyhzZWxlY3Rpb24pO1xyXG4gICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihyZXN1bHQuY29ycmVjdGVkKTtcclxuXHJcbiAgICAgIHRoaXMuc2hvd0NvcnJlY3Rpb25Ob3RpY2UocmVzdWx0LmNvcnJlY3Rpb25zQ291bnQsIHJlc3VsdC5maXhlcnNVc2VkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEF1Y3VuZSBzXHUwMEU5bGVjdGlvbiwgY29ycmlnZXIgdG91dGUgbGEgbm90ZVxyXG4gICAgICB0aGlzLmNvcnJlY3RFbnRpcmVOb3RlKGVkaXRvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb3JyaWdlIHRvdXRlIGxhIG5vdGVcclxuICAgKi9cclxuICBwcml2YXRlIGNvcnJlY3RFbnRpcmVOb3RlKGVkaXRvcjogRWRpdG9yKTogdm9pZCB7XHJcbiAgICBjb25zdCBjb250ZW50ID0gZWRpdG9yLmdldFZhbHVlKCk7XHJcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmVuZ2luZS5wcm9jZXNzVGV4dFdpdGhEZXRhaWxzKGNvbnRlbnQpO1xyXG5cclxuICAgIGlmIChyZXN1bHQuY29ycmVjdGVkICE9PSBjb250ZW50KSB7XHJcbiAgICAgIGVkaXRvci5zZXRWYWx1ZShyZXN1bHQuY29ycmVjdGVkKTtcclxuICAgICAgdGhpcy5zaG93Q29ycmVjdGlvbk5vdGljZShyZXN1bHQuY29ycmVjdGlvbnNDb3VudCwgcmVzdWx0LmZpeGVyc1VzZWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3IE5vdGljZShcIkF1Y3VuZSBjb3JyZWN0aW9uIG5cdTAwRTljZXNzYWlyZVwiLCAyMDAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEJhc2N1bGUgbGEgY29ycmVjdGlvbiBlbiB0ZW1wcyByXHUwMEU5ZWxcclxuICAgKi9cclxuICBwcml2YXRlIGFzeW5jIHRvZ2dsZVJlYWxUaW1lQ29ycmVjdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHRoaXMuc2V0dGluZ3MuZW5hYmxlUmVhbFRpbWVDb3JyZWN0aW9uID1cclxuICAgICAgIXRoaXMuc2V0dGluZ3MuZW5hYmxlUmVhbFRpbWVDb3JyZWN0aW9uO1xyXG4gICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcclxuXHJcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnNldHRpbmdzLmVuYWJsZVJlYWxUaW1lQ29ycmVjdGlvblxyXG4gICAgICA/IFwiYWN0aXZcdTAwRTllXCJcclxuICAgICAgOiBcImRcdTAwRTlzYWN0aXZcdTAwRTllXCI7XHJcbiAgICBuZXcgTm90aWNlKGBDb3JyZWN0aW9uIHRlbXBzIHJcdTAwRTllbCAke3N0YXR1c31gLCAzMDAwKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFmZmljaGUgdW5lIG5vdGlmaWNhdGlvbiBkZSBjb3JyZWN0aW9uXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBzaG93Q29ycmVjdGlvbk5vdGljZShcclxuICAgIGNvcnJlY3Rpb25zQ291bnQ6IG51bWJlcixcclxuICAgIGZpeGVyc1VzZWQ6IHN0cmluZ1tdXHJcbiAgKTogdm9pZCB7XHJcbiAgICBpZiAoY29ycmVjdGlvbnNDb3VudCA9PT0gMCkge1xyXG4gICAgICBuZXcgTm90aWNlKFwiQXVjdW5lIGNvcnJlY3Rpb24gYXBwbGlxdVx1MDBFOWVcIiwgMjAwMCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtZXNzYWdlID1cclxuICAgICAgY29ycmVjdGlvbnNDb3VudCA9PT0gMVxyXG4gICAgICAgID8gXCIxIGNvcnJlY3Rpb24gYXBwbGlxdVx1MDBFOWVcIlxyXG4gICAgICAgIDogYCR7Y29ycmVjdGlvbnNDb3VudH0gY29ycmVjdGlvbnMgYXBwbGlxdVx1MDBFOWVzYDtcclxuXHJcbiAgICBuZXcgTm90aWNlKG1lc3NhZ2UsIDMwMDApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRW5yZWdpc3RyZSBsZXMgZ2VzdGlvbm5haXJlcyBkJ1x1MDBFOXZcdTAwRTluZW1lbnRzIGNsYXZpZXJcclxuICAgKi9cclxuICBwcml2YXRlIHJlZ2lzdGVyS2V5Ym9hcmRIYW5kbGVycygpOiB2b2lkIHtcclxuICAgIHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJrZXlkb3duXCIsIChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICB0aGlzLmhhbmRsZUtleURvd24oZXZlbnQpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHXHUwMEU4cmUgbGVzIFx1MDBFOXZcdTAwRTluZW1lbnRzIGNsYXZpZXIgcG91ciBsYSBjb3JyZWN0aW9uIHRlbXBzIHJcdTAwRTllbFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaGFuZGxlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xyXG4gICAgLy8gVlx1MDBFOXJpZmllciBxdSdvbiBlc3QgZGFucyB1biBcdTAwRTlkaXRldXIgTWFya2Rvd25cclxuICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xyXG4gICAgaWYgKCFhY3RpdmVWaWV3IHx8IGFjdGl2ZVZpZXcuZ2V0TW9kZSgpICE9PSBcInNvdXJjZVwiKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcclxuXHJcbiAgICAvLyBEXHUwMEU5bFx1MDBFOWd1ZXIgYXUgbW90ZXVyIHR5cG9ncmFwaGlxdWVcclxuICAgIGlmICh0aGlzLmVuZ2luZS5oYW5kbGVLZXlFdmVudChldmVudCwgZWRpdG9yKSkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG5cclxuICAvKipcclxuICAgKiBBUEkgcHVibGlxdWUgcG91ciBsZXMgYXV0cmVzIHBsdWdpbnMgKG9wdGlvbm5lbClcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RW5naW5lKCk6IFR5cG9ncmFwaHlFbmdpbmUge1xyXG4gICAgcmV0dXJuIHRoaXMuZW5naW5lO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGFwcGx5Q29ycmVjdGlvbnModGV4dDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmVuZ2luZS5wcm9jZXNzVGV4dCh0ZXh0KTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRBdmFpbGFibGVGaXhlcnMoKTogc3RyaW5nW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuZW5naW5lLmdldEZpeGVycygpLm1hcCgoZikgPT4gZi5pZCk7XHJcbiAgfVxyXG5cclxuLyoqXHJcbiAqIE1ldCBcdTAwRTAgam91ciBsJ2FmZmljaGFnZSBkZXMgY2FyYWN0XHUwMEU4cmVzIGludmlzaWJsZXMgdmlhIENTU1xyXG4gKi9cclxucHJpdmF0ZSB1cGRhdGVJbnZpc2libGVDaGFyc0Rpc3BsYXkoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRDbGFzcygndHlwb2dyYXBoeS1zaG93LWludmlzaWJsZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNsYXNzKCd0eXBvZ3JhcGh5LXNob3ctaW52aXNpYmxlJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCYXNjdWxlIGwnYWZmaWNoYWdlIGRlcyBjYXJhY3RcdTAwRThyZXMgaW52aXNpYmxlc1xyXG4gKi9cclxucHJpdmF0ZSBhc3luYyB0b2dnbGVIaWdobGlnaHQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQgPSAhdGhpcy5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkO1xyXG4gICAgXHJcbiAgICAvLyBNaXNlIFx1MDBFMCBqb3VyIGltbVx1MDBFOWRpYXRlIGRlIGwnYWZmaWNoYWdlXHJcbiAgICB0aGlzLnVwZGF0ZUludmlzaWJsZUNoYXJzRGlzcGxheSgpO1xyXG4gICAgXHJcbiAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgXHJcbiAgICBjb25zdCBzdGF0dXMgPSB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQgPyAnYWN0aXZcdTAwRTknIDogJ2RcdTAwRTlzYWN0aXZcdTAwRTknO1xyXG4gICAgbmV3IE5vdGljZShgQWZmaWNoYWdlIGRlcyBjYXJhY3RcdTAwRThyZXMgaW52aXNpYmxlcyAke3N0YXR1c31gLCAzMDAwKTtcclxuICAgIFxyXG4gICAgLy8gTWV0dHJlIFx1MDBFMCBqb3VyIGxlcyBib3V0b25zXHJcbiAgICB1cGRhdGVTdGF0dXNCYXJCdXR0b24odGhpcy5zdGF0dXNCYXJCdXR0b24sIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0RW5hYmxlZCk7XHJcbiAgICB1cGRhdGVUYWJUaXRsZUJhckJ1dHRvbih0aGlzLnRhYlRpdGxlQmFyQnV0dG9uLCB0aGlzLnNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQpO1xyXG59XHJcblxyXG59XHJcbiIsICJpbXBvcnQgeyBFZGl0b3JWaWV3LCBEZWNvcmF0aW9uLCBWaWV3UGx1Z2luLCBWaWV3VXBkYXRlIH0gZnJvbSBcIkBjb2RlbWlycm9yL3ZpZXdcIjtcclxuaW1wb3J0IHsgUmFuZ2VTZXRCdWlsZGVyIH0gZnJvbSBcIkBjb2RlbWlycm9yL3N0YXRlXCI7XHJcbmltcG9ydCB7IFR5cG9ncmFwaHlTZXR0aW5ncyB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5cclxuLy8gVmFyaWFibGUgZ2xvYmFsZSBzaW1wbGlmaVx1MDBFOWUgcG91ciBsZXMgc2V0dGluZ3NcclxubGV0IGN1cnJlbnRTZXR0aW5nczogVHlwb2dyYXBoeVNldHRpbmdzO1xyXG5cclxuLyoqXHJcbiAqIENyXHUwMEU5ZSBsZXMgZFx1MDBFOWNvcmF0aW9ucyB2aXN1ZWxsZXMgcG91ciBsZXMgY2FyYWN0XHUwMEU4cmVzIHNwXHUwMEU5Y2lhdXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWNvcmF0aW9ucyhzZXR0aW5nczogVHlwb2dyYXBoeVNldHRpbmdzKSB7XHJcbiAgICBjdXJyZW50U2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgIFxyXG4gICAgLy8gRFx1MDBFOWNvcmF0aW9uIHBvdXIgbCdlc3BhY2UgaW5zXHUwMEU5Y2FibGUgbm9ybWFsZVxyXG4gICAgY29uc3Qgbm9uQnJlYWtpbmdTcGFjZURlY29yYXRpb24gPSBEZWNvcmF0aW9uLm1hcmsoe1xyXG4gICAgICAgIGNsYXNzOiAnbm9uQnJlYWtpbmdTcGFjZSdcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIERcdTAwRTljb3JhdGlvbiBwb3VyIGwnZXNwYWNlIGZpbmUgaW5zXHUwMEU5Y2FibGVcclxuICAgIGNvbnN0IHRoaW5TcGFjZURlY29yYXRpb24gPSBEZWNvcmF0aW9uLm1hcmsoe1xyXG4gICAgICAgIGNsYXNzOiAndGhpblNwYWNlJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gRFx1MDBFOWNvcmF0aW9uIHBvdXIgbGUgdGlyZXQgY2FkcmF0aW5cclxuICAgIGNvbnN0IGVtRGFzaERlY29yYXRpb24gPSBEZWNvcmF0aW9uLm1hcmsoe1xyXG4gICAgICAgIGNsYXNzOiAnZW0tZGFzaCdcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIERcdTAwRTljb3JhdGlvbiBwb3VyIGwnZXNwYWNlIG5vcm1hbGVcclxuICAgIGNvbnN0IHJlZ3VsYXJTcGFjZURlY29yYXRpb24gPSBEZWNvcmF0aW9uLm1hcmsoe1xyXG4gICAgICAgIGNsYXNzOiAncmVndWxhclNwYWNlJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFZpZXdQbHVnaW4uZnJvbUNsYXNzKGNsYXNzIHtcclxuICAgICAgICBkZWNvcmF0aW9uczogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmJ1aWxkRGVjb3JhdGlvbnModmlldyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGUodXBkYXRlOiBWaWV3VXBkYXRlKSB7XHJcbiAgICAgICAgICAgIC8vIE1pc2UgXHUwMEUwIGpvdXIgc2kgbGUgZG9jdW1lbnQgY2hhbmdlIE9VIHNpIGxhIHZ1ZSBjaGFuZ2VcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5kb2NDaGFuZ2VkIHx8IHVwZGF0ZS52aWV3cG9ydENoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGlvbnMgPSB0aGlzLmJ1aWxkRGVjb3JhdGlvbnModXBkYXRlLnZpZXcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBidWlsZERlY29yYXRpb25zKHZpZXc6IEVkaXRvclZpZXcpIHtcclxuICAgICAgICAgICAgY29uc3QgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXI8RGVjb3JhdGlvbj4oKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIEFwcGxpcXVlciBsZXMgZFx1MDBFOWNvcmF0aW9ucyB1bmlxdWVtZW50IHNpIGxhIG1pc2UgZW4gXHUwMEU5dmlkZW5jZSBlc3QgYWN0aXZcdTAwRTllXHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50U2V0dGluZ3MgJiYgY3VycmVudFNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHsgZnJvbSwgdG8gfSBvZiB2aWV3LnZpc2libGVSYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHZpZXcuc3RhdGUuZG9jLnNsaWNlU3RyaW5nKGZyb20sIHRvKTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvLyBQb3NpdGlvbiBkZSBkXHUwMEU5cGFydCBwb3VyIGxlIHRyYWl0ZW1lbnQgZHUgdGV4dGVcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRQb3MgPSBmcm9tO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFuYWx5c2VyIGxlIHRleHRlIHBvdXIgZFx1MDBFOXRlY3RlciBsZXMgZnJvbnRtYXR0ZXIgZXQgYmxvY3MgZGUgY29kZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbkZyb250bWF0dGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluQ29kZUJsb2NrID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpbmVTdGFydCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIgPSB0ZXh0W2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBzdGFydFBvcyArIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEXHUwMEU5dGVjdGlvbiBkdSBkXHUwMEU5YnV0IGV0IGZpbiBkdSBmcm9udG1hdHRlciAoLS0tKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVTdGFydCAmJiB0ZXh0LnN1YnN0cihpLCAzKSA9PT0gJy0tLScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluRnJvbnRtYXR0ZXIgPSAhaW5Gcm9udG1hdHRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERcdTAwRTl0ZWN0aW9uIGR1IGRcdTAwRTlidXQgZXQgZmluIGRlcyBibG9jcyBkZSBjb2RlIChgYGApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lU3RhcnQgJiYgdGV4dC5zdWJzdHIoaSwgMykgPT09ICdgYGAnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkNvZGVCbG9jayA9ICFpbkNvZGVCbG9jaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERcdTAwRTl0ZWN0aW9uIGR1IGRcdTAwRTlidXQgZCd1bmUgbm91dmVsbGUgbGlnbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcXG4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpbmVTdGFydCAmJiBjaGFyICE9PSAnICcgJiYgY2hhciAhPT0gJ1xcdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBWXHUwMEU5cmlmaWVyIHNpIGxhIGxpZ25lIGFjdHVlbGxlIGVzdCBkYW5zIHVuIGJsb2Mgc3BcdTAwRTljaWFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzSW5TcGVjaWFsQmxvY2sgPSBpbkZyb250bWF0dGVyIHx8IGluQ29kZUJsb2NrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbGlxdWVyIGxlcyBkXHUwMEU5Y29yYXRpb25zIHNldWxlbWVudCBzaSBvbiBuJ2VzdCBwYXMgZGFucyB1biBibG9jIHNwXHUwMEU5Y2lhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW5TcGVjaWFsQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnXFx1MDBBMCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLmFkZChwb3MsIHBvcyArIDEsIG5vbkJyZWFraW5nU3BhY2VEZWNvcmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnXFx1MjAyRicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLmFkZChwb3MsIHBvcyArIDEsIHRoaW5TcGFjZURlY29yYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcdTIwMTQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5hZGQocG9zLCBwb3MgKyAxLCBlbURhc2hEZWNvcmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyID09PSAnICcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyLmFkZChwb3MsIHBvcyArIDEsIHJlZ3VsYXJTcGFjZURlY29yYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlci5maW5pc2goKTtcclxuICAgICAgICB9XHJcbiAgICB9LCB7XHJcbiAgICAgICAgZGVjb3JhdGlvbnM6IHYgPT4gdi5kZWNvcmF0aW9uc1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNZXQgXHUwMEUwIGpvdXIgbGVzIHNldHRpbmdzIGdsb2JhdXggKGZvbmN0aW9uIHNpbXBsaWZpXHUwMEU5ZSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVEZWNvcmF0aW9uU2V0dGluZ3Moc2V0dGluZ3M6IFR5cG9ncmFwaHlTZXR0aW5ncykge1xyXG4gICAgY3VycmVudFNldHRpbmdzID0gc2V0dGluZ3M7XHJcbn0iLCAiaW1wb3J0IHsgUGx1Z2luLCBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIENyXHUwMEU5ZSB1biBib3V0b24gZGFucyBsYSBiYXJyZSBkJ1x1MDBFOXRhdFxyXG4gKiBAcGFyYW0gcGx1Z2luIEluc3RhbmNlIGR1IHBsdWdpblxyXG4gKiBAcGFyYW0gaXNFbmFibGVkIFx1MDBDOXRhdCBpbml0aWFsIChhY3Rpdlx1MDBFOS9kXHUwMEU5c2FjdGl2XHUwMEU5KVxyXG4gKiBAcGFyYW0gdG9nZ2xlQ2FsbGJhY2sgRm9uY3Rpb24gZGUgcmFwcGVsIHBvdXIgbGUgYmFzY3VsZW1lbnRcclxuICogQHJldHVybnMgXHUwMEM5bFx1MDBFOW1lbnQgSFRNTCBkdSBib3V0b25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0dXNCYXJCdXR0b24oXHJcbiAgICBwbHVnaW46IFBsdWdpbixcclxuICAgIGlzRW5hYmxlZDogYm9vbGVhbixcclxuICAgIHRvZ2dsZUNhbGxiYWNrOiAoKSA9PiB2b2lkXHJcbik6IEhUTUxFbGVtZW50IHtcclxuICAgIGNvbnN0IHN0YXR1c0Jhckl0ZW1FbCA9IHBsdWdpbi5hZGRTdGF0dXNCYXJJdGVtKCk7XHJcbiAgICBzdGF0dXNCYXJJdGVtRWwuaWQgPSBcImhpZ2hsaWdodC1zdGF0dXMtYmFyLWJ1dHRvblwiO1xyXG4gICAgXHJcbiAgICBzdGF0dXNCYXJJdGVtRWwuYWRkQ2xhc3MoXCJtb2QtY2xpY2thYmxlXCIpO1xyXG4gICAgXHJcbiAgICAvLyBDclx1MDBFOWVyIGwnaWNcdTAwRjRuZSBldCBsJ2Fqb3V0ZXIgYXUgYm91dG9uXHJcbiAgICBzZXRJY29uKHN0YXR1c0Jhckl0ZW1FbCwgXCJwaWxjcm93XCIpO1xyXG5cclxuICAgIHN0YXR1c0Jhckl0ZW1FbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiQWZmaWNoZXIvTWFzcXVlciBsZXMgY2FyYWN0XHUwMEU4cmVzIGludmlzaWJsZXNcIik7XHJcbiAgICBzdGF0dXNCYXJJdGVtRWwuc2V0QXR0cmlidXRlKFwiZGF0YS10b29sdGlwLXBvc2l0aW9uXCIsIFwidG9wXCIpO1xyXG5cclxuICAgIC8vIERcdTAwRTlmaW5pciBsJ2FwcGFyZW5jZSBpbml0aWFsZVxyXG4gICAgdXBkYXRlU3RhdHVzQmFyQnV0dG9uKHN0YXR1c0Jhckl0ZW1FbCwgaXNFbmFibGVkKTtcclxuXHJcbiAgICAvLyBBam91dGVyIGwnXHUwMEU5dlx1MDBFOW5lbWVudCBkZSBjbGljXHJcbiAgICBzdGF0dXNCYXJJdGVtRWwub25DbGlja0V2ZW50KCgpID0+IHtcclxuICAgICAgICB0b2dnbGVDYWxsYmFjaygpO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiBzdGF0dXNCYXJJdGVtRWw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDclx1MDBFOWUgdW4gYm91dG9uIGRhbnMgbGEgYmFycmUgZGUgdGl0cmUgZGVzIG9uZ2xldHNcclxuICogQHBhcmFtIHBsdWdpbiBJbnN0YW5jZSBkdSBwbHVnaW5cclxuICogQHBhcmFtIGlzRW5hYmxlZCBcdTAwQzl0YXQgaW5pdGlhbCAoYWN0aXZcdTAwRTkvZFx1MDBFOXNhY3Rpdlx1MDBFOSlcclxuICogQHBhcmFtIHRvZ2dsZUNhbGxiYWNrIEZvbmN0aW9uIGRlIHJhcHBlbCBwb3VyIGxlIGJhc2N1bGVtZW50XHJcbiAqIEByZXR1cm5zIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFiVGl0bGVCYXJCdXR0b24oXHJcbiAgICBwbHVnaW46IFBsdWdpbixcclxuICAgIGlzRW5hYmxlZDogYm9vbGVhbixcclxuICAgIHRvZ2dsZUNhbGxiYWNrOiAoKSA9PiB2b2lkXHJcbik6IEhUTUxFbGVtZW50IHtcclxuICAgIC8vIENyXHUwMEU5ZXIgbGUgYm91dG9uXHJcbiAgICBjb25zdCBidXR0b25FbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xyXG4gICAgYnV0dG9uRWwuaWQgPSBcImhpZ2hsaWdodC10YWItdGl0bGUtYnV0dG9uXCI7XHJcbiAgICBidXR0b25FbC5jbGFzc05hbWUgPSBcImNsaWNrYWJsZS1pY29uIHZpZXctYWN0aW9uXCI7XHJcbiAgICBidXR0b25FbC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiQWZmaWNoZXIvTWFzcXVlciBsZXMgY2FyYWN0XHUwMEU4cmVzIGludmlzaWJsZXNcIik7XHJcbiAgICBcclxuICAgIC8vIENyXHUwMEU5ZXIgbCdpY1x1MDBGNG5lIGV0IGwnYWpvdXRlciBhdSBib3V0b25cclxuICAgIHNldEljb24oYnV0dG9uRWwsIFwicGlsY3Jvd1wiKTtcclxuICAgIFxyXG4gICAgLy8gRFx1MDBFOWZpbmlyIGwnYXBwYXJlbmNlIGluaXRpYWxlXHJcbiAgICB1cGRhdGVUYWJUaXRsZUJhckJ1dHRvbihidXR0b25FbCwgaXNFbmFibGVkKTtcclxuICAgIFxyXG4gICAgLy8gQWpvdXRlciBsJ1x1MDBFOXZcdTAwRTluZW1lbnQgZGUgY2xpY1xyXG4gICAgYnV0dG9uRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRvZ2dsZUNhbGxiYWNrKCk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gQWpvdXRlciBsZSBib3V0b24gXHUwMEUwIGxhIGJhcnJlIGRlIHRpdHJlXHJcbiAgICBjb25zdCB0aXRsZUJhckVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZpZXctaGVhZGVyLXRpdGxlLWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKHRpdGxlQmFyRWwpIHtcclxuICAgICAgICBjb25zdCBhY3Rpb25zRWwgPSB0aXRsZUJhckVsLm5leHRFbGVtZW50U2libGluZyBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAoYWN0aW9uc0VsICYmIGFjdGlvbnNFbC5jbGFzc0xpc3QuY29udGFpbnMoJ3ZpZXctYWN0aW9ucycpKSB7XHJcbiAgICAgICAgICAgIGFjdGlvbnNFbC5wcmVwZW5kKGJ1dHRvbkVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBidXR0b25FbDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBNZXQgXHUwMEUwIGpvdXIgbCdhcHBhcmVuY2UgZHUgYm91dG9uIGRlIGxhIGJhcnJlIGQnXHUwMEU5dGF0XHJcbiAqIEBwYXJhbSBidXR0b25FbCBcdTAwQzlsXHUwMEU5bWVudCBIVE1MIGR1IGJvdXRvblxyXG4gKiBAcGFyYW0gaXNFbmFibGVkIFx1MDBDOXRhdCAoYWN0aXZcdTAwRTkvZFx1MDBFOXNhY3Rpdlx1MDBFOSlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVTdGF0dXNCYXJCdXR0b24oYnV0dG9uRWw6IEhUTUxFbGVtZW50IHwgbnVsbCwgaXNFbmFibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICBpZiAoIWJ1dHRvbkVsKSByZXR1cm47XHJcbiAgICBcclxuICAgIGlmIChpc0VuYWJsZWQpIHtcclxuICAgICAgICBidXR0b25FbC5hZGRDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGJ1dHRvbkVsLnJlbW92ZUNsYXNzKCdpcy1hY3RpdmUnKTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIE1ldCBcdTAwRTAgam91ciBsJ2FwcGFyZW5jZSBkdSBib3V0b24gZGUgbGEgYmFycmUgZGUgdGl0cmVcclxuICogQHBhcmFtIGJ1dHRvbkVsIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqIEBwYXJhbSBpc0VuYWJsZWQgXHUwMEM5dGF0IChhY3Rpdlx1MDBFOS9kXHUwMEU5c2FjdGl2XHUwMEU5KVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZVRhYlRpdGxlQmFyQnV0dG9uKGJ1dHRvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwsIGlzRW5hYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgaWYgKCFidXR0b25FbCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgYnV0dG9uRWwuYWRkQ2xhc3MoJ2lzLWFjdGl2ZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBidXR0b25FbC5yZW1vdmVDbGFzcygnaXMtYWN0aXZlJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdXBwcmltZSBsZSBib3V0b24gZGUgbGEgYmFycmUgZCdcdTAwRTl0YXRcclxuICogQHBhcmFtIGJ1dHRvbkVsIFx1MDBDOWxcdTAwRTltZW50IEhUTUwgZHUgYm91dG9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlU3RhdHVzQmFyQnV0dG9uKGJ1dHRvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwpOiB2b2lkIHtcclxuICAgIGlmIChidXR0b25FbCkge1xyXG4gICAgICAgIGJ1dHRvbkVsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogU3VwcHJpbWUgbGUgYm91dG9uIGRlIGxhIGJhcnJlIGRlIHRpdHJlXHJcbiAqIEBwYXJhbSBidXR0b25FbCBcdTAwQzlsXHUwMEU5bWVudCBIVE1MIGR1IGJvdXRvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVRhYlRpdGxlQmFyQnV0dG9uKGJ1dHRvbkVsOiBIVE1MRWxlbWVudCB8IG51bGwpOiB2b2lkIHtcclxuICAgIGlmIChidXR0b25FbCkge1xyXG4gICAgICAgIGJ1dHRvbkVsLnJlbW92ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbiIsICIvLyBzcmMvZml4ZXJzL2Jhc2UvYmFzZS1maXhlci50c1xyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFR5cG9ncmFwaGljRml4ZXIsIEZpeGVyQ2F0ZWdvcnksIEZpeGVyRXhhbXBsZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzZSBkZSBiYXNlIGFic3RyYWl0ZSBwb3VyIHRvdXMgbGVzIGZpeGVycyB0eXBvZ3JhcGhpcXVlc1xyXG4gKi9cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VGaXhlciBpbXBsZW1lbnRzIFR5cG9ncmFwaGljRml4ZXIge1xyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGlkOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgY2F0ZWdvcnk6IEZpeGVyQ2F0ZWdvcnk7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgcHJpb3JpdHk6IG51bWJlcjtcclxuICAgIFxyXG4gICAgcHVibGljIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgcHJvdGVjdGVkIGxvY2FsZTogc3RyaW5nID0gJ2ZyLUZSJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1cdTAwRTl0aG9kZSBwcmluY2lwYWxlIGRlIGNvcnJlY3Rpb24gLSBkb2l0IFx1MDBFQXRyZSBpbXBsXHUwMEU5bWVudFx1MDBFOWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGZpeCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWd1cmF0aW9uIGRlIGxhIGxvY2FsZSAob3B0aW9ubmVsbGUpXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmxvY2FsZSA9IGxvY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdlc3Rpb24gZGVzIFx1MDBFOXZcdTAwRTluZW1lbnRzIGNsYXZpZXIgKG9wdGlvbm5lbGxlKVxyXG4gICAgICogXHUwMEMwIHN1cmNoYXJnZXIgZGFucyBsZXMgY2xhc3NlcyBlbmZhbnRzIHNpIG5cdTAwRTljZXNzYWlyZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGFuZGxlS2V5RXZlbnQ/KGV2ZW50OiBLZXlib2FyZEV2ZW50LCBlZGl0b3I6IEVkaXRvcik6IGJvb2xlYW47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVtcGxlIGRlIHRyYW5zZm9ybWF0aW9uIChvcHRpb25uZWwpXHJcbiAgICAgKiBcdTAwQzAgc3VyY2hhcmdlciBkYW5zIGxlcyBjbGFzc2VzIGVuZmFudHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEV4YW1wbGU/KCk6IEZpeGVyRXhhbXBsZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZcdTAwRTlyaWZpZSBzaSBsZSBmaXhlciBlc3QgY29tcGF0aWJsZSBhdmVjIGxhIGxvY2FsZSBhY3R1ZWxsZVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaXNMb2NhbGVDb21wYXRpYmxlKHRhcmdldExvY2FsZXM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldExvY2FsZXMuc29tZShsb2NhbGUgPT4gXHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxlLnN0YXJ0c1dpdGgobG9jYWxlKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWXHUwMEU5cmlmaWUgc2kgbGUgZml4ZXIgZXN0IGFjdGl2XHUwMEU5IGV0IGNvbXBhdGlibGVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlzQWN0aXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuYWJsZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaXF1ZSB1bmUgdHJhbnNmb3JtYXRpb24gcmVnZXggYXZlYyByZW1wbGFjZW1lbnQgcGFyIGNoYVx1MDBFRW5lXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhcHBseVJlZ2V4VHJhbnNmb3JtKHRleHQ6IHN0cmluZywgcGF0dGVybjogUmVnRXhwLCByZXBsYWNlbWVudDogc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaXF1ZSB1bmUgdHJhbnNmb3JtYXRpb24gcmVnZXggYXZlYyByZW1wbGFjZW1lbnQgcGFyIGZvbmN0aW9uXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhcHBseVJlZ2V4VHJhbnNmb3JtKHRleHQ6IHN0cmluZywgcGF0dGVybjogUmVnRXhwLCByZXBsYWNlbWVudDogKHN1YnN0cmluZzogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gc3RyaW5nKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaXF1ZSB1bmUgdHJhbnNmb3JtYXRpb24gcmVnZXggc2ltcGxlIC0gaW1wbFx1MDBFOW1lbnRhdGlvblxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXBwbHlSZWdleFRyYW5zZm9ybShcclxuICAgICAgICB0ZXh0OiBzdHJpbmcsIFxyXG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cCwgXHJcbiAgICAgICAgcmVwbGFjZW1lbnQ6IHN0cmluZyB8ICgoc3Vic3RyaW5nOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSA9PiBzdHJpbmcpXHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UocGF0dGVybiwgcmVwbGFjZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpcXVlIHBsdXNpZXVycyB0cmFuc2Zvcm1hdGlvbnMgcmVnZXggZW4gc1x1MDBFOXF1ZW5jZVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXBwbHlNdWx0aXBsZVRyYW5zZm9ybXMoXHJcbiAgICAgICAgdGV4dDogc3RyaW5nLCBcclxuICAgICAgICB0cmFuc2Zvcm1zOiBBcnJheTx7XHJcbiAgICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cCwgXHJcbiAgICAgICAgICAgIHJlcGxhY2VtZW50OiBzdHJpbmcgfCAoKHN1YnN0cmluZzogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkgPT4gc3RyaW5nKVxyXG4gICAgICAgIH0+XHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1zLnJlZHVjZSgocmVzdWx0LCB0cmFuc2Zvcm0pID0+IHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0ucmVwbGFjZW1lbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVJlZ2V4VHJhbnNmb3JtKHJlc3VsdCwgdHJhbnNmb3JtLnBhdHRlcm4sIHRyYW5zZm9ybS5yZXBsYWNlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcHBseVJlZ2V4VHJhbnNmb3JtKHJlc3VsdCwgdHJhbnNmb3JtLnBhdHRlcm4sIHRyYW5zZm9ybS5yZXBsYWNlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0ZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZcdTAwRTlyaWZpZSBzaSB1bmUgcG9zaXRpb24gZGFucyBsZSB0ZXh0ZSBlc3QgZGFucyB1biBjb250ZXh0ZSB2YWxpZGVcclxuICAgICAqIChwYXMgZGFucyBkdSBjb2RlLCBkZXMgbGllbnMsIGV0Yy4pXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBpc1ZhbGlkQ29udGV4dCh0ZXh0OiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBWXHUwMEU5cmlmaWNhdGlvbnMgYmFzaXF1ZXMgcG91ciBcdTAwRTl2aXRlciBkZSBtb2RpZmllciBsZSBjb2RlIGlubGluZVxyXG4gICAgICAgIGNvbnN0IGJlZm9yZUNvbnRleHQgPSB0ZXh0LnN1YnN0cmluZyhNYXRoLm1heCgwLCBwb3NpdGlvbiAtIDEwKSwgcG9zaXRpb24pO1xyXG4gICAgICAgIGNvbnN0IGFmdGVyQ29udGV4dCA9IHRleHQuc3Vic3RyaW5nKHBvc2l0aW9uLCBNYXRoLm1pbih0ZXh0Lmxlbmd0aCwgcG9zaXRpb24gKyAxMCkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1MDBDOXZpdGVyIGxlIGNvZGUgaW5saW5lIG1hcmtkb3duXHJcbiAgICAgICAgaWYgKGJlZm9yZUNvbnRleHQuaW5jbHVkZXMoJ2AnKSAmJiBhZnRlckNvbnRleHQuaW5jbHVkZXMoJ2AnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFx1MDBDOXZpdGVyIGxlcyBsaWVucyBtYXJrZG93blxyXG4gICAgICAgIGlmIChiZWZvcmVDb250ZXh0LmluY2x1ZGVzKCdbJykgJiYgYWZ0ZXJDb250ZXh0LmluY2x1ZGVzKCddJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1cdTAwRTl0aG9kZSB1dGlsaXRhaXJlIHBvdXIgbG9nZ2VyIGxlcyBjb3JyZWN0aW9ucyAoZFx1MDBFOXZlbG9wcGVtZW50KVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgbG9nQ29ycmVjdGlvbihvcmlnaW5hbDogc3RyaW5nLCBjb3JyZWN0ZWQ6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGlmIChvcmlnaW5hbCAhPT0gY29ycmVjdGVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoYFske3RoaXMuaWR9XSBcIiR7b3JpZ2luYWx9XCIgXHUyMTkyIFwiJHtjb3JyZWN0ZWR9XCJgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCAiLy8gc3JjL2NvbnN0YW50cy91bmljb2RlLnRzXHJcblxyXG4vKipcclxuICogQ2FyYWN0XHUwMEU4cmVzIFVuaWNvZGUgcG91ciBsYSB0eXBvZ3JhcGhpZVxyXG4gKiBAc2VlIGh0dHBzOi8vdW5pY29kZS5vcmcvY2hhcnRzL1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IFVOSUNPREVfQ0hBUlMgPSB7XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gRVNQQUNFUyBTUFx1MDBDOUNJQVVYXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIE5PX0JSRUFLX1RISU5fU1BBQ0U6XHJcbiAgICBcIlxcdTIwMkZcIiAvKiogRXNwYWNlIGZpbmUgaW5zXHUwMEU5Y2FibGUgKFUrMjAyRikgLSBVdGlsaXNcdTAwRTllIGF2YW50IDsgISA/IGVuIGZyYW5cdTAwRTdhaXMgKi8sXHJcbiAgTk9fQlJFQUtfU1BBQ0U6XHJcbiAgICBcIlxcdTAwQTBcIiAvKiogRXNwYWNlIGluc1x1MDBFOWNhYmxlIChVKzAwQTApIC0gVXRpbGlzXHUwMEU5ZSBhdmFudCA6IGVuIGZyYW5cdTAwRTdhaXMgKi8sXHJcbiAgTk9STUFMX1NQQUNFOiBcIiBcIiAvKiogRXNwYWNlIG5vcm1hbGUgKHBvdXIgclx1MDBFOWZcdTAwRTlyZW5jZSkgKi8sXHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIFBPTkNUVUFUSU9OXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIEVMTElQU0lTOiBcIlx1MjAyNlwiIC8qKiBQb2ludHMgZGUgc3VzcGVuc2lvbiAoVSsyMDI2KSAtIFJlbXBsYWNlIC4uLiAqLyxcclxuICBOREFTSDogXCJcdTIwMTNcIiAvKiogVGlyZXQgZGVtaS1jYWRyYXRpbiAoVSsyMDEzKSAtIFBvdXIgbGVzIHBsYWdlcyBkZSBub21icmVzICovLFxyXG4gIE1EQVNIOiBcIlx1MjAxNFwiIC8qKiBUaXJldCBjYWRyYXRpbiAoVSsyMDE0KSAtIFBvdXIgbGVzIGluY2lzZXMgZW4gZnJhblx1MDBFN2FpcyAqLyxcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gR1VJTExFTUVUUyBFVCBBUE9TVFJPUEhFU1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBMRFFVTzogXCJcdTIwMUNcIiAvKiogR3VpbGxlbWV0IG91dnJhbnQgYW5nbGFpcyAoVSsyMDFDKSAqLyxcclxuICBSRFFVTzogXCJcdTIwMURcIiAvKiogR3VpbGxlbWV0IGZlcm1hbnQgYW5nbGFpcyAoVSsyMDFEKSAqLyxcclxuXHJcbiAgLyoqIExTUVVPOiAnXHUyMDFDJywgIEFwb3N0cm9waGUgb3V2cmFudGUgKFUrMjAxOCkgLSBSYXJlbWVudCB1dGlsaXNcdTAwRTllICovXHJcblxyXG4gIFJTUVVPOiBcIlx1MjAxOVwiIC8qKiBBcG9zdHJvcGhlIGZlcm1hbnRlL3R5cG9ncmFwaGlxdWUgKFUrMjAxOSkgLSBSZW1wbGFjZSAnICovLFxyXG4gIExBUVVPOiBcIlx1MDBBQlwiIC8qKiBHdWlsbGVtZXQgZnJhblx1MDBFN2FpcyBvdXZyYW50IChVKzAwQUIpICovLFxyXG4gIFJBUVVPOiBcIlx1MDBCQlwiIC8qKiBHdWlsbGVtZXQgZnJhblx1MDBFN2FpcyBmZXJtYW50IChVKzAwQkIpICovLFxyXG5cclxuICBCRFFVTzogXCJcdTIwMUVcIiwgLy8gJmJkcXVvOyBvciAmIzgyMjI7XHJcbiAgU0hZOiBcIlxceEMyXFx4QURcIiwgLy8gJnNoeTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gU1lNQk9MRVMgTUFUSFx1MDBDOU1BVElRVUVTXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIFRJTUVTOiBcIlx1MDBEN1wiIC8qKiBTeW1ib2xlIG11bHRpcGxpY2F0aW9uIChVKzAwRDcpIC0gUmVtcGxhY2UgeCBlbnRyZSBub21icmVzICovLFxyXG4gIERJVklERTogXCJcdTAwRjdcIiAvKiogU3ltYm9sZSBkaXZpc2lvbiAoVSswMEY3KSAqLyxcclxuICBQTFVTX01JTlVTOiBcIlx1MDBCMVwiLCAvKiogU3ltYm9sZSBwbHVzIG91IG1vaW5zIChVKzAwQjEpICovIFxyXG4gIE1JTlVTOiBcIlx1MjIxMlwiLCAvKiogU3ltYm9sZSBtb2lucyAoVSsyMjEyKSAtIFBsdXMgbG9uZyBxdWUgbGUgdHJhaXQgZCd1bmlvbiBzdGFuZGFyZCAqL1xyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBTWU1CT0xFUyBERSBNQVJRVUVcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgLyoqIFN5bWJvbGUgdHJhZGVtYXJrIChVKzIxMjIpIC0gUmVtcGxhY2UgKHRtKSAqL1xyXG4gIFRSQURFOiBcIlx1MjEyMlwiLFxyXG4gIFJFRzogXCJcdTAwQUVcIiwgLyoqIFN5bWJvbGUgcmVnaXN0ZXJlZCAoVSswMEFFKSAtIFJlbXBsYWNlIChyKSAqL1xyXG4gIENPUFk6IFwiXHUwMEE5XCIsIC8qKiBTeW1ib2xlIGNvcHlyaWdodCAoVSswMEE5KSAtIFJlbXBsYWNlIChjKSAqL1xyXG5cclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gQVVUUkVTIFNZTUJPTEVTIFVUSUxFU1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAvKiogUHJpbWUgKFUrMjAzMikgLSBNaW51dGVzLCBwaWVkcyAqL1xyXG4gIFBSSU1FOiBcIlx1MjAzMlwiLFxyXG5cclxuICAvKiogRG91YmxlIHByaW1lIChVKzIwMzMpIC0gU2Vjb25kZXMsIHBvdWNlcyAqL1xyXG4gIERPVUJMRV9QUklNRTogXCJcdTIwMzNcIixcclxuXHJcbiAgLyoqIFNlY3Rpb24gKFUrMDBBNykgKi9cclxuICBTRUNUSU9OOiBcIlx1MDBBN1wiLFxyXG5cclxuICAvKiogUGFyYWdyYXBoZSAoVSswMEI2KSAqL1xyXG4gIFBBUkFHUkFQSDogXCJcdTAwQjZcIixcclxuXHJcbiAgLyoqIFB1Y2UgKFUrMjAyMikgKi9cclxuICBCVUxMRVQ6IFwiXHUyMDIyXCIsXHJcblxyXG4gIC8qKiBGbFx1MDBFOGNoZSBkcm9pdGUgKFUrMjE5MikgKi9cclxuICBBUlJPV19SSUdIVDogXCJcdTIxOTJcIixcclxuXHJcbiAgLyoqIEZsXHUwMEU4Y2hlIGdhdWNoZSAoVSsyMTkwKSAqL1xyXG4gIEFSUk9XX0xFRlQ6IFwiXHUyMTkwXCIsXHJcblxyXG4gIC8qKiBFdXJvIChVKzIwQUMpICovXHJcbiAgRVVSTzogXCJcdTIwQUNcIixcclxuXHJcbiAgLyoqIExpdnJlIHN0ZXJsaW5nIChVKzAwQTMpICovXHJcbiAgUE9VTkQ6IFwiXHUwMEEzXCIsXHJcblxyXG4gIC8qKiBZZW4gKFUrMDBBNSkgKi9cclxuICBZRU46IFwiXHUwMEE1XCIsXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVHlwZSBkZXMgY2xcdTAwRTlzIGRlIGNhcmFjdFx1MDBFOHJlcyBVbmljb2RlXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBVbmljb2RlQ2hhcktleSA9IGtleW9mIHR5cGVvZiBVTklDT0RFX0NIQVJTO1xyXG5cclxuLyoqXHJcbiAqIFBhdHRlcm5zIHJlZ2V4IHV0aWxlcyBwb3VyIGxhIGRcdTAwRTl0ZWN0aW9uXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgVU5JQ09ERV9QQVRURVJOUyA9IHtcclxuICAvKiogRFx1MDBFOXRlY3RlIGxlcyBlc3BhY2VzIG11bHRpcGxlcyAqL1xyXG4gIE1VTFRJUExFX1NQQUNFUzogL1xcc3syLH0vZyxcclxuXHJcbiAgLyoqIERcdTAwRTl0ZWN0ZSBsZXMgcG9pbnRzIGRlIHN1c3BlbnNpb24gc3RhbmRhcmRzICovXHJcbiAgRUxMSVBTSVNfRE9UUzogL1xcLnszLH0vZyxcclxuXHJcbiAgLyoqIERcdTAwRTl0ZWN0ZSBsZXMgZG91YmxlcyB0aXJldHMgKi9cclxuICBET1VCTEVfREFTSDogLy0tL2csXHJcblxyXG4gIC8qKiBEXHUwMEU5dGVjdGUgbGVzIGd1aWxsZW1ldHMgZHJvaXRzICovXHJcbiAgU1RSQUlHSFRfUVVPVEVTOiAvXCIvZyxcclxuXHJcbiAgLyoqIERcdTAwRTl0ZWN0ZSBsZXMgYXBvc3Ryb3BoZXMgZHJvaXRlcyBkYW5zIGxlcyBjb250cmFjdGlvbnMgKi9cclxuICBTVFJBSUdIVF9BUE9TVFJPUEhFUzogLyhcXHcpJy9nLFxyXG5cclxuICAvKiogRFx1MDBFOXRlY3RlIHggZW50cmUgbm9tYnJlcyBwb3VyIG11bHRpcGxpY2F0aW9uICovXHJcbiAgTVVMVElQTFlfWDogLyhcXGQrKVxccypbeFhdXFxzKihcXGQrKS9nLFxyXG5cclxuICAvKiogRFx1MDBFOXRlY3RlICogZW50cmUgbm9tYnJlcyBwb3VyIG11bHRpcGxpY2F0aW9uICovXHJcbiAgTVVMVElQTFlfU1RBUjogLyhcXGQrKVxccypcXCpcXHMqKFxcZCspL2csXHJcblxyXG4gIC8qKiBEXHUwMEU5dGVjdGUgbGVzIHN5bWJvbGVzIGRlIG1hcnF1ZSB0ZXh0dWVscyAqL1xyXG4gIFRSQURFTUFSS19URVhUOiAvXFwodG1cXCkvZ2ksXHJcbiAgUkVHSVNURVJFRF9URVhUOiAvXFwoclxcKS9naSxcclxuICBDT1BZUklHSFRfVEVYVDogL1xcKGNcXCkvZ2ksXHJcbn0gYXMgY29uc3Q7XHJcbiIsICIvLyBzcmMvZml4ZXJzL3B1bmN0dWF0aW9uL2VsbGlwc2lzLnRzXHJcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgQmFzZUZpeGVyIH0gZnJvbSAnLi4vYmFzZS9iYXNlLWZpeGVyJztcclxuaW1wb3J0IHsgRml4ZXJFeGFtcGxlIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVOSUNPREVfQ0hBUlMsIFVOSUNPREVfUEFUVEVSTlMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdW5pY29kZSc7XHJcblxyXG4vKipcclxuICogRml4ZXIgcG91ciBsZXMgcG9pbnRzIGRlIHN1c3BlbnNpb25cclxuICogQ29udmVydGl0IC4uLiBlbiBcdTIwMjYgKGNhcmFjdFx1MDBFOHJlIFVuaWNvZGUgdW5pcXVlKVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVsbGlwc2lzIGV4dGVuZHMgQmFzZUZpeGVyIHtcclxuICAgIHB1YmxpYyByZWFkb25seSBpZCA9ICdFbGxpcHNpcyc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdQb2ludHMgZGUgc3VzcGVuc2lvbic7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpcHRpb24gPSAnUmVtcGxhY2UgLi4uIHBhciBsZSBjYXJhY3RcdTAwRThyZSBlbGxpcHNlIFVuaWNvZGUgKFx1MjAyNiknO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdGVnb3J5ID0gJ3B1bmN0dWF0aW9uJyBhcyBjb25zdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBwcmlvcml0eSA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1lIGxlcyBwb2ludHMgbXVsdGlwbGVzIGVuIGVsbGlwc2UgVW5pY29kZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZml4KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlSZWdleFRyYW5zZm9ybShcclxuICAgICAgICAgICAgdGV4dCxcclxuICAgICAgICAgICAgVU5JQ09ERV9QQVRURVJOUy5FTExJUFNJU19ET1RTLFxyXG4gICAgICAgICAgICBVTklDT0RFX0NIQVJTLkVMTElQU0lTXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdcdTAwRThyZSBsYSBzYWlzaWUgZW4gdGVtcHMgclx1MDBFOWVsIGRlcyBwb2ludHMgZGUgc3VzcGVuc2lvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGFuZGxlS2V5RXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGVkaXRvcjogRWRpdG9yKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJy4nICYmICFldmVudC5jdHJsS2V5ICYmICFldmVudC5tZXRhS2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGN1cnNvci5saW5lKTtcclxuICAgICAgICAgICAgY29uc3QgYmVmb3JlQ3Vyc29yID0gbGluZS5zdWJzdHJpbmcoMCwgY3Vyc29yLmNoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFZcdTAwRTlyaWZpZXIgc2kgb24gYSBkXHUwMEU5alx1MDBFMCBkZXV4IHBvaW50cyBjb25zXHUwMEU5Y3V0aWZzXHJcbiAgICAgICAgICAgIGlmIChiZWZvcmVDdXJzb3IuZW5kc1dpdGgoJy4uJykpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlbXBsYWNlciBsZXMgdHJvaXMgcG9pbnRzIHBhciB1bmUgZWxsaXBzZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZSA9IGxpbmUuc3Vic3RyaW5nKDAsIGN1cnNvci5jaCAtIDIpICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVTklDT0RFX0NIQVJTLkVMTElQU0lTICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lLnN1YnN0cmluZyhjdXJzb3IuY2gpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0TGluZShjdXJzb3IubGluZSwgbmV3TGluZSk7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHsgXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZTogY3Vyc29yLmxpbmUsIFxyXG4gICAgICAgICAgICAgICAgICAgIGNoOiBjdXJzb3IuY2ggLSAxIC8vIFBvc2l0aW9uIGFwclx1MDBFOHMgbCdlbGxpcHNlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEVtcFx1MDBFQWNoZXIgbCdpbnNlcnRpb24gZHUgdHJvaXNpXHUwMEU4bWUgcG9pbnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3Vybml0IHVuIGV4ZW1wbGUgZGUgdHJhbnNmb3JtYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEV4YW1wbGUoKTogRml4ZXJFeGFtcGxlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWZvcmU6ICdFbiBmYWl0Li4uIGNcXCdlc3QgY29tcGxpcXVcdTAwRTkuLi4nLFxyXG4gICAgICAgICAgICBhZnRlcjogYEVuIGZhaXQke1VOSUNPREVfQ0hBUlMuRUxMSVBTSVN9IGMnZXN0IGNvbXBsaXF1XHUwMEU5JHtVTklDT0RFX0NIQVJTLkVMTElQU0lTfWBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwgIi8vIHNyYy9maXhlcnMvcHVuY3R1YXRpb24vZGFzaC50c1xyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEJhc2VGaXhlciB9IGZyb20gJy4uL2Jhc2UvYmFzZS1maXhlcic7XHJcbmltcG9ydCB7IEZpeGVyRXhhbXBsZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBVTklDT0RFX0NIQVJTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3VuaWNvZGUnO1xyXG5cclxuLyoqXHJcbiAqIEZpeGVyIHBvdXIgbGVzIHRpcmV0cyB0eXBvZ3JhcGhpcXVlc1xyXG4gKiBDb252ZXJ0aXQgLS0gZW4gXHUyMDE0ICh0aXJldCBjYWRyYXRpbilcclxuICogQ29udmVydGl0IGxlcyB0aXJldHMgZW50cmUgbm9tYnJlcyBlbiBcdTIwMTMgKHRpcmV0IGRlbWktY2FkcmF0aW4pXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRGFzaCBleHRlbmRzIEJhc2VGaXhlciB7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWQgPSAnRGFzaCc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdUaXJldHMgdHlwb2dyYXBoaXF1ZXMnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uID0gJ0NvbnZlcnRpdCAtLSBlbiBcdTIwMTQgZXQgYW1cdTAwRTlsaW9yZSBsZXMgdGlyZXRzIGVudHJlIG5vbWJyZXMnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdGVnb3J5ID0gJ3B1bmN0dWF0aW9uJyBhcyBjb25zdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBwcmlvcml0eSA9IDI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaXF1ZSBsZXMgdHJhbnNmb3JtYXRpb25zIGRlIHRpcmV0c1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZml4KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtcyA9IFtcclxuICAgICAgICAgICAgLy8gRG91YmxlIHRpcmV0IHZlcnMgdGlyZXQgY2FkcmF0aW5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLy0tL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogVU5JQ09ERV9DSEFSUy5NREFTSFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBUaXJldCBlbnRyZSBub21icmVzIChkYXRlcywgcGxhZ2VzKSB2ZXJzIHRpcmV0IGRlbWktY2FkcmF0aW5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKVxccyotXFxzKihcXGQrKS9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5OREFTSH0kMmBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRXNwYWNlcyBhdXRvdXIgZHUgdGlyZXQgY2FkcmF0aW4gcG91ciBsZSBmcmFuXHUwMEU3YWlzXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9cXHMqXHUyMDE0XFxzKi9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IHRoaXMuaXNMb2NhbGVDb21wYXRpYmxlKFsnZnInXSkgXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgICR7VU5JQ09ERV9DSEFSUy5NREFTSH0gYCBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke1VOSUNPREVfQ0hBUlMuTURBU0h9YFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlNdWx0aXBsZVRyYW5zZm9ybXModGV4dCwgdHJhbnNmb3Jtcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHXHUwMEU4cmUgbGEgc2Fpc2llIGVuIHRlbXBzIHJcdTAwRTllbCBkZXMgZG91YmxlcyB0aXJldHNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGhhbmRsZUtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50LCBlZGl0b3I6IEVkaXRvcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChldmVudC5rZXkgPT09ICctJyAmJiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZUN1cnNvciA9IGxpbmUuc3Vic3RyaW5nKDAsIGN1cnNvci5jaCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBWXHUwMEU5cmlmaWVyIHNpIG9uIGEgZFx1MDBFOWpcdTAwRTAgdW4gdGlyZXRcclxuICAgICAgICAgICAgaWYgKGJlZm9yZUN1cnNvci5lbmRzV2l0aCgnLScpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHRoaXMuaXNMb2NhbGVDb21wYXRpYmxlKFsnZnInXSkgXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgICR7VU5JQ09ERV9DSEFSUy5NREFTSH0gYCBcclxuICAgICAgICAgICAgICAgICAgICA6IGAke1VOSUNPREVfQ0hBUlMuTURBU0h9YDtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TGluZSA9IGxpbmUuc3Vic3RyaW5nKDAsIGN1cnNvci5jaCAtIDEpICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlbWVudCArIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5zdWJzdHJpbmcoY3Vyc29yLmNoKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldExpbmUoY3Vyc29yLmxpbmUsIG5ld0xpbmUpO1xyXG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGN1cnNvci5saW5lLCBcclxuICAgICAgICAgICAgICAgICAgICBjaDogY3Vyc29yLmNoIC0gMSArIHJlcGxhY2VtZW50Lmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZvdXJuaXQgdW4gZXhlbXBsZSBkZSB0cmFuc2Zvcm1hdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RXhhbXBsZSgpOiBGaXhlckV4YW1wbGUge1xyXG4gICAgICAgIGNvbnN0IGJlZm9yZURhc2ggPSB0aGlzLmlzTG9jYWxlQ29tcGF0aWJsZShbJ2ZyJ10pID8gJyBcdTIwMTQgJyA6ICdcdTIwMTQnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJlZm9yZTogJ1BcdTAwRTlyaW9kZSAyMDIwLTIwMjQgLS0gdW5lIFx1MDBFOXBvcXVlIGltcG9ydGFudGUnLFxyXG4gICAgICAgICAgICBhZnRlcjogYFBcdTAwRTlyaW9kZSAyMDIwJHtVTklDT0RFX0NIQVJTLk5EQVNIfTIwMjQke2JlZm9yZURhc2h9dW5lIFx1MDBFOXBvcXVlIGltcG9ydGFudGVgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsICIvLyBzcmMvZml4ZXJzL3B1bmN0dWF0aW9uL2h5cGhlbi50c1xyXG5pbXBvcnQgeyBCYXNlRml4ZXIgfSBmcm9tICcuLi9iYXNlL2Jhc2UtZml4ZXInO1xyXG5pbXBvcnQgeyBGaXhlckV4YW1wbGUgfSBmcm9tICcuLi8uLi90eXBlcy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgVU5JQ09ERV9DSEFSUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy91bmljb2RlJztcclxuXHJcbi8qKlxyXG4gKiBGaXhlciBwb3VyIGxlcyBjXHUwMEU5c3VyZXMgZXQgdGlyZXRzIHR5cG9ncmFwaGlxdWVzIGF2YW5jXHUwMEU5c1xyXG4gKiBJbXBsXHUwMEU5bWVudGF0aW9uIGJhc2lxdWUgLSBsZXMgdnJhaWVzIHJcdTAwRThnbGVzIGRlIGNcdTAwRTlzdXJlIHNvbnQgdHJcdTAwRThzIGNvbXBsZXhlc1xyXG4gKiBEXHUwMEU5c2FjdGl2XHUwMEU5IHBhciBkXHUwMEU5ZmF1dCBjYXIgblx1MDBFOWNlc3NpdGUgdW4gZGljdGlvbm5haXJlIGRlIGNcdTAwRTlzdXJlIGNvbXBsZXRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBIeXBoZW4gZXh0ZW5kcyBCYXNlRml4ZXIge1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlkID0gJ0h5cGhlbic7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdDXHUwMEU5c3VyZXMgdHlwb2dyYXBoaXF1ZXMnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uID0gJ0FtXHUwMEU5bGlvcmUgbGVzIHRpcmV0cyBldCBjXHUwMEU5c3VyZXMgKGZvbmN0aW9ubmFsaXRcdTAwRTkgYmFzaXF1ZSknO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdGVnb3J5ID0gJ3B1bmN0dWF0aW9uJyBhcyBjb25zdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBwcmlvcml0eSA9IDEwO1xyXG5cclxuICAgIHB1YmxpYyBlbmFibGVkID0gZmFsc2U7IC8vIERcdTAwRTlzYWN0aXZcdTAwRTkgcGFyIGRcdTAwRTlmYXV0IC0gclx1MDBFOGdsZXMgY29tcGxleGVzXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaXF1ZSBxdWVscXVlcyB0cmFuc2Zvcm1hdGlvbnMgYmFzaXF1ZXMgZGUgdGlyZXRzXHJcbiAgICAgKiBOb3RlOiBMZXMgdnJhaWVzIHJcdTAwRThnbGVzIGRlIGNcdTAwRTlzdXJlIG5cdTAwRTljZXNzaXRlcmFpZW50IHVuIGRpY3Rpb25uYWlyZSBjb21wbGV0XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaXgodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBJbXBsXHUwMEU5bWVudGF0aW9uIHRyXHUwMEU4cyBiYXNpcXVlIC0ganVzdGUgcXVlbHF1ZXMgYW1cdTAwRTlsaW9yYXRpb25zIGRlIHRpcmV0c1xyXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybXMgPSBbXHJcbiAgICAgICAgICAgIC8vIENvcnJpZ2VyIGxlcyB0aXJldHMgbWFsIGVzcGFjXHUwMEU5cyBkYW5zIGxlcyBkaWFsb2d1ZXMgZnJhblx1MDBFN2Fpc1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXihcXHMqKS1cXHMqL2dtLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IHRoaXMuaXNMb2NhbGVDb21wYXRpYmxlKFsnZnInXSkgXHJcbiAgICAgICAgICAgICAgICAgICAgPyBgJDEke1VOSUNPREVfQ0hBUlMuTURBU0h9IGAgXHJcbiAgICAgICAgICAgICAgICAgICAgOiBgJDEke1VOSUNPREVfQ0hBUlMuTURBU0h9YFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBUaXJldHMgZGFucyBsZXMgXHUwMEU5bnVtXHUwMEU5cmF0aW9uc1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKFxcblxccyopLVxccysvZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTURBU0h9IGBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5TXVsdGlwbGVUcmFuc2Zvcm1zKHRleHQsIHRyYW5zZm9ybXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm91cm5pdCB1biBleGVtcGxlIGRlIHRyYW5zZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRFeGFtcGxlKCk6IEZpeGVyRXhhbXBsZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiAnLSBQcmVtaWVyIHBvaW50XFxuLSBEZXV4aVx1MDBFOG1lIHBvaW50XFxuLSBEaWFsb2d1ZScsXHJcbiAgICAgICAgICAgIGFmdGVyOiBgJHtVTklDT0RFX0NIQVJTLk1EQVNIfSBQcmVtaWVyIHBvaW50XFxuJHtVTklDT0RFX0NIQVJTLk1EQVNIfSBEZXV4aVx1MDBFOG1lIHBvaW50XFxuJHtVTklDT0RFX0NIQVJTLk1EQVNIfSBEaWFsb2d1ZWBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwgIi8vIHNyYy9maXhlcnMvc3BhY2luZy9mcmVuY2gtc3BhY2luZy50c1xyXG5pbXBvcnQgeyBFZGl0b3IgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IEJhc2VGaXhlciB9IGZyb20gJy4uL2Jhc2UvYmFzZS1maXhlcic7XHJcbmltcG9ydCB7IEZpeGVyRXhhbXBsZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBVTklDT0RFX0NIQVJTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3VuaWNvZGUnO1xyXG5cclxuLyoqXHJcbiAqIEZpeGVyIHBvdXIgbCdlc3BhY2VtZW50IFx1MDBFMCBsYSBmcmFuXHUwMEU3YWlzZVxyXG4gKiBBcHBsaXF1ZSBsZXMgclx1MDBFOGdsZXMgZCdlc3BhY2VtZW50IHNlbG9uIGxhIHR5cG9ncmFwaGllIGZyYW5cdTAwRTdhaXNlXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgRnJlbmNoTm9CcmVha1NwYWNlIGV4dGVuZHMgQmFzZUZpeGVyIHtcclxuICAgIHB1YmxpYyByZWFkb25seSBpZCA9ICdGcmVuY2hOb0JyZWFrU3BhY2UnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWUgPSAnRXNwYWNlcyBmcmFuXHUwMEU3YWlzJztcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbiA9ICdBam91dGUgZGVzIGVzcGFjZXMgaW5zXHUwMEU5Y2FibGVzIHNlbG9uIGxlcyByXHUwMEU4Z2xlcyBmcmFuXHUwMEU3YWlzZXMnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdGVnb3J5ID0gJ3NwYWNpbmcnIGFzIGNvbnN0O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHByaW9yaXR5ID0gMztcclxuXHJcbiAgICBwdWJsaWMgZW5hYmxlZCA9IHRydWU7IC8vIEFjdGl2XHUwMEU5IHBhciBkXHUwMEU5ZmF1dCBwb3VyIGxlIGZyYW5cdTAwRTdhaXNcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpcXVlIGxlcyByXHUwMEU4Z2xlcyBkJ2VzcGFjZW1lbnQgZnJhblx1MDBFN2Fpc2VzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaXgodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBOZSBzJ2FwcGxpcXVlIHF1J2F1eCBsb2NhbGVzIGZyYW5cdTAwRTdhaXNlc1xyXG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsZUNvbXBhdGlibGUoWydmciddKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybXMgPSBbXHJcbiAgICAgICAgICAgIC8vIEVzcGFjZSBmaW5lIGluc1x1MDBFOWNhYmxlIGF2YW50IDsgISA/IFx1MDBCQlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFxzKihbOyE/XHUwMEJCXSkvZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1RISU5fU1BBQ0V9JDFgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIEVzcGFjZSBpbnNcdTAwRTljYWJsZSBhdmFudCA6XHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IC9cXHMqKDopL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0kMWBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRXNwYWNlIGluc1x1MDBFOWNhYmxlIGFwclx1MDBFOHMgXHUwMEFCXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oXHUwMEFCKVxccyovZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfVEhJTl9TUEFDRX1gXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIENvcnJpZ2VyIGxlcyBlc3BhY2VzIGRhbnMgbGVzIG5vbWJyZXMgKG9wdGlvbm5lbClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQpXFxzKyhcXGR7M30pL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1RISU5fU1BBQ0V9JDJgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU11bHRpcGxlVHJhbnNmb3Jtcyh0ZXh0LCB0cmFuc2Zvcm1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdcdTAwRThyZSBsYSBzYWlzaWUgZW4gdGVtcHMgclx1MDBFOWVsIGRlcyBzaWduZXMgZGUgcG9uY3R1YXRpb24gZnJhblx1MDBFN2Fpc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaGFuZGxlS2V5RXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQsIGVkaXRvcjogRWRpdG9yKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzTG9jYWxlQ29tcGF0aWJsZShbJ2ZyJ10pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHB1bmN0dWF0aW9uTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xyXG4gICAgICAgICAgICAnISc6IFVOSUNPREVfQ0hBUlMuTk9fQlJFQUtfVEhJTl9TUEFDRSxcclxuICAgICAgICAgICAgJz8nOiBVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1RISU5fU1BBQ0UsXHJcbiAgICAgICAgICAgICc7JzogVU5JQ09ERV9DSEFSUy5OT19CUkVBS19USElOX1NQQUNFLFxyXG4gICAgICAgICAgICAnOic6IFVOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0VcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBpZiAocHVuY3R1YXRpb25NYXBbZXZlbnQua2V5XSAmJiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQubWV0YUtleSkge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGJlZm9yZUN1cnNvciA9IGxpbmUuc3Vic3RyaW5nKDAsIGN1cnNvci5jaCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBFbmxldmVyIGwnZXNwYWNlIGV4aXN0YW50IHMnaWwgeSBlbiBhIHVuXHJcbiAgICAgICAgICAgIGNvbnN0IGNsZWFuQmVmb3JlID0gYmVmb3JlQ3Vyc29yLnJlcGxhY2UoL1xccyskLywgJycpO1xyXG4gICAgICAgICAgICBjb25zdCBzcGFjZUNoYXIgPSBwdW5jdHVhdGlvbk1hcFtldmVudC5rZXldO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc3QgbmV3TGluZSA9IGNsZWFuQmVmb3JlICsgc3BhY2VDaGFyICsgZXZlbnQua2V5ICsgbGluZS5zdWJzdHJpbmcoY3Vyc29yLmNoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGVkaXRvci5zZXRMaW5lKGN1cnNvci5saW5lLCBuZXdMaW5lKTtcclxuICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih7IFxyXG4gICAgICAgICAgICAgICAgbGluZTogY3Vyc29yLmxpbmUsIFxyXG4gICAgICAgICAgICAgICAgY2g6IGNsZWFuQmVmb3JlLmxlbmd0aCArIDIgLy8gUG9zaXRpb24gYXByXHUwMEU4cyBsYSBwb25jdHVhdGlvblxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm91cm5pdCB1biBleGVtcGxlIGRlIHRyYW5zZm9ybWF0aW9uXHJcbiAgICAgKi9cclxucHVibGljIGdldEV4YW1wbGUoKTogRml4ZXJFeGFtcGxlIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYmVmb3JlOiAnSWwgYSBkaXQgXCJCb25qb3VyXCIgZXQgY1xcJ2VzdCBwYXJ0aS4nLFxyXG4gICAgICAgIGFmdGVyOiBgSWwgYSBkaXQgJHtVTklDT0RFX0NIQVJTLkxBUVVPfSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19USElOX1NQQUNFfUJvbmpvdXIke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfVEhJTl9TUEFDRX0ke1VOSUNPREVfQ0hBUlMuUkFRVU99IGV0IGMke1VOSUNPREVfQ0hBUlMuUlNRVU99ZXN0IHBhcnRpLmBcclxuICAgIH07XHJcbn1cclxufSIsICIvLyBzcmMvZml4ZXJzL3NwYWNpbmcvY29tbWEudHNcclxuaW1wb3J0IHsgQmFzZUZpeGVyIH0gZnJvbSAnLi4vYmFzZS9iYXNlLWZpeGVyJztcclxuaW1wb3J0IHsgRml4ZXJFeGFtcGxlIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcblxyXG4vKipcclxuICogRml4ZXIgcG91ciBsJ2VzcGFjZW1lbnQgZGVzIHZpcmd1bGVzXHJcbiAqIFN1cHByaW1lIGxlcyBlc3BhY2VzIGF2YW50IGxlcyB2aXJndWxlcyBldCBub3JtYWxpc2UgbCdlc3BhY2VtZW50IGFwclx1MDBFOHNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBOb1NwYWNlQmVmb3JlQ29tbWEgZXh0ZW5kcyBCYXNlRml4ZXIge1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlkID0gJ05vU3BhY2VCZWZvcmVDb21tYSc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdWaXJndWxlcyBzYW5zIGVzcGFjZSc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGVzY3JpcHRpb24gPSAnU3VwcHJpbWUgbGVzIGVzcGFjZXMgYXZhbnQgbGVzIHZpcmd1bGVzIGV0IG5vcm1hbGlzZSBsXFwnZXNwYWNlbWVudCc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2F0ZWdvcnkgPSAnc3BhY2luZycgYXMgY29uc3Q7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJpb3JpdHkgPSA2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29ycmlnZSBsJ2VzcGFjZW1lbnQgYXV0b3VyIGRlcyB2aXJndWxlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZml4KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtcyA9IFtcclxuICAgICAgICAgICAgLy8gU3VwcHJpbWVyIGxlcyBlc3BhY2VzIGF2YW50IGxlcyB2aXJndWxlc1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFxzKywvZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAnLCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gTm9ybWFsaXNlciBsJ2VzcGFjZW1lbnQgYXByXHUwMEU4cyBsZXMgdmlyZ3VsZXMgKGV4YWN0ZW1lbnQgdW4gZXNwYWNlKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvLFxccyovZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAnLCAnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIENhcyBwYXJ0aWN1bGllciA6IHZpcmd1bGUgZW4gZmluIGRlIGxpZ25lIChwYXMgZCdlc3BhY2UgYXByXHUwMEU4cylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyxcXHMqJC9nbSxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAnLCdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gQ2FzIHBhcnRpY3VsaWVyIDogdmlyZ3VsZSBhdmFudCBmZXJtZXR1cmUgZGUgcGFyZW50aFx1MDBFOHNlL2Nyb2NoZXRcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyxcXHMqKFspXFxdfV0pL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogJywkMSdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5TXVsdGlwbGVUcmFuc2Zvcm1zKHRleHQsIHRyYW5zZm9ybXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm91cm5pdCB1biBleGVtcGxlIGRlIHRyYW5zZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRFeGFtcGxlKCk6IEZpeGVyRXhhbXBsZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiAnUG9tbWVzICwgcG9pcmVzLG9yYW5nZXMgLGJhbmFuZXMnLFxyXG4gICAgICAgICAgICBhZnRlcjogJ1BvbW1lcywgcG9pcmVzLCBvcmFuZ2VzLCBiYW5hbmVzJ1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn0iLCAiLy8gc3JjL2ZpeGVycy9zcGFjaW5nL3VuaXQudHNcclxuaW1wb3J0IHsgQmFzZUZpeGVyIH0gZnJvbSAnLi4vYmFzZS9iYXNlLWZpeGVyJztcclxuaW1wb3J0IHsgRml4ZXJFeGFtcGxlIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVOSUNPREVfQ0hBUlMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdW5pY29kZSc7XHJcblxyXG4vKipcclxuICogRml4ZXIgcG91ciBsZXMgZXNwYWNlcyBhdmFudCBsZXMgdW5pdFx1MDBFOXNcclxuICogQWpvdXRlIGRlcyBlc3BhY2VzIGluc1x1MDBFOWNhYmxlcyBlbnRyZSBsZXMgbm9tYnJlcyBldCBsZXVycyB1bml0XHUwMEU5c1xyXG4gKiBJbnNwaXJcdTAwRTkgZHUgZml4ZXIgXCJVbml0XCIgZGUgSm9saVR5cG9cclxuICovXHJcbmV4cG9ydCBjbGFzcyBVbml0IGV4dGVuZHMgQmFzZUZpeGVyIHtcclxuICAgIHB1YmxpYyByZWFkb25seSBpZCA9ICd1bml0JztcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lID0gJ0VzcGFjZXMgYXZhbnQgdW5pdFx1MDBFOXMnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGRlc2NyaXB0aW9uID0gJ0Fqb3V0ZSBkZXMgZXNwYWNlcyBpbnNcdTAwRTljYWJsZXMgZW50cmUgbm9tYnJlcyBldCB1bml0XHUwMEU5cyAoMTIgaCwgNTAgXHUyMEFDLCAyNSAlKSc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2F0ZWdvcnkgPSAnc3BhY2luZycgYXMgY29uc3Q7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJpb3JpdHkgPSA3O1xyXG5cclxuICAgIHB1YmxpYyBlbmFibGVkID0gdHJ1ZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFwcGxpcXVlIGxlcyBlc3BhY2VzIGluc1x1MDBFOWNhYmxlcyBhdmFudCBsZXMgdW5pdFx1MDBFOXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGZpeCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybXMgPSBbXHJcbiAgICAgICAgICAgIC8vID09PSBVTklUXHUwMEM5UyBERSBURU1QUyA9PT1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKVxccyooW2htc10pXFxiKD8hW2EtekEtWl0pL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfSQyYFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBVbml0XHUwMEU5cyBjb21wbFx1MDBFOHRlcyBkZSB0ZW1wc1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKFxcZCspXFxzKihoZXVyZXM/fG1pbnV0ZXM/fHNlY29uZGVzPylcXGIvZ2ksXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfSQyYFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy8gPT09IFVOSVRcdTAwQzlTIE1PTlx1MDBDOVRBSVJFUyA9PT1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKVxccyooW1x1MjBBQyRcdTAwQTNcdTAwQTVcdTIwQjlcdTIwQkRdKS9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0kMmBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gVW5pdFx1MDBFOXMgbW9uXHUwMEU5dGFpcmVzIFx1MDBFOWNyaXRlc1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKFxcZCspXFxzKihldXJvcz98ZG9sbGFycz98bGl2cmVzPylcXGIvZ2ksXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfSQyYFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy8gPT09IFBPVVJDRU5UQUdFUyA9PT1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKiUvZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9JWBcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8vID09PSBVTklUXHUwMEM5UyBTSSBFVCBNXHUwMEM5VFJJUVVFUyA9PT1cclxuICAgICAgICAgICAgLy8gTWFzc2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihtZ3xbY2RrXT9nfHRvbm5lcz8pXFxiL2dpLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0kMmBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRGlzdGFuY2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihtbXxjbXxkbXxbZGtdP218a20pXFxiL2dpLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0kMmBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gVm9sdW1lXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oXFxkKyg/OlssLl0/XFxkKyk/KVxccyoobWx8W2Nka10/bHxsaXRyZXM/KVxcYi9naSxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9JDJgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIFx1MDBDOW5lcmdpZSBldCBwdWlzc2FuY2VcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihXfFtrbU1HXVd8a1doP3xba21NR11XaD8pXFxiL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfSQyYFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBGclx1MDBFOXF1ZW5jZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKFxcZCsoPzpbLC5dP1xcZCspPylcXHMqKEh6fFtrbU1HXUh6KVxcYi9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0kMmBcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIC8vID09PSBURU1QXHUwMEM5UkFUVVJFUyA9PT1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKlx1MDBCMChbQ0ZdPylcXGIvZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9XHUwMEIwJDJgXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvLyA9PT0gVU5JVFx1MDBDOVMgSU5GT1JNQVRJUVVFUyA9PT1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihba21NR1RdP1tCYl18W2ttTUdUXT9vKVxcYi9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0kMmBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gVW5pdFx1MDBFOXMgY29tcGxcdTAwRTh0ZXNcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihvY3RldHM/fGJ5dGVzP3xiaXRzPylcXGIvZ2ksXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfSQyYFxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLy8gPT09IFVOSVRcdTAwQzlTIEQnQU5HTEVTID09PVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKFxcZCsoPzpbLC5dP1xcZCspPylcXHMqKGRlZ3JcdTAwRTlzP3xyYWR8cmFkaWFudHM/KVxcYi9naSxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9JDJgXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAvLyA9PT0gVU5JVFx1MDBDOVMgREUgVklURVNTRSA9PT1cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihrbVxcL2h8bXBofG1cXC9zKVxcYi9naSxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9JDJgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU11bHRpcGxlVHJhbnNmb3Jtcyh0ZXh0LCB0cmFuc2Zvcm1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZcdTAwRTlyaWZpZSBzaSBsZSBjb250ZXh0ZSBlc3QgdmFsaWRlIHBvdXIgbCdham91dCBkJ2VzcGFjZVxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaXNWYWxpZENvbnRleHQodGV4dDogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5pc1ZhbGlkQ29udGV4dCh0ZXh0LCBwb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gXHUwMEM5dml0ZXIgbGVzIGNhcyBjb21tZSBcImgxXCIsIFwiaDJcIiAodGl0cmVzIG1hcmtkb3duKVxyXG4gICAgICAgIGNvbnN0IGJlZm9yZUNvbnRleHQgPSB0ZXh0LnN1YnN0cmluZyhNYXRoLm1heCgwLCBwb3NpdGlvbiAtIDUpLCBwb3NpdGlvbik7XHJcbiAgICAgICAgY29uc3QgYWZ0ZXJDb250ZXh0ID0gdGV4dC5zdWJzdHJpbmcocG9zaXRpb24sIE1hdGgubWluKHRleHQubGVuZ3RoLCBwb3NpdGlvbiArIDUpKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBOZSBwYXMgdHJhaXRlciBzaSBjJ2VzdCB1biB0aXRyZSBtYXJrZG93blxyXG4gICAgICAgIGlmIChiZWZvcmVDb250ZXh0Lm1hdGNoKC9eXFxzKiMqXFxzKlxcZCskLykgJiYgYWZ0ZXJDb250ZXh0Lm1hdGNoKC9eW2hIXVxcZC8pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm91cm5pdCB1biBleGVtcGxlIGRlIHRyYW5zZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRFeGFtcGxlKCk6IEZpeGVyRXhhbXBsZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiAnVGVtcFx1MDBFOXJhdHVyZTogMjUgXHUwMEIwQywgdml0ZXNzZTogMTIwIGttL2gsIHRhaWxsZTogMS44IG0sIHBvaWRzOiA3NSBrZywgcHJpeDogMjk5IFx1MjBBQycsXHJcbiAgICAgICAgICAgIGFmdGVyOiBgVGVtcFx1MDBFOXJhdHVyZTogMjUke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9XHUwMEIwQywgdml0ZXNzZTogMTIwJHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfWttL2gsIHRhaWxsZTogMS44JHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfW0sIHBvaWRzOiA3NSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX1rZywgcHJpeDogMjk5JHtVTklDT0RFX0NIQVJTLk5PX0JSRUFLX1NQQUNFfVx1MjBBQ2BcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwgIi8vIHNyYy9maXhlcnMvc3BhY2luZy9kaW1lbnNpb24udHNcclxuaW1wb3J0IHsgQmFzZUZpeGVyIH0gZnJvbSAnLi4vYmFzZS9iYXNlLWZpeGVyJztcclxuaW1wb3J0IHsgRml4ZXJFeGFtcGxlIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVOSUNPREVfQ0hBUlMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdW5pY29kZSc7XHJcblxyXG4vKipcclxuICogRml4ZXIgcG91ciBsZXMgZGltZW5zaW9ucyBldCBtdWx0aXBsaWNhdGlvbnNcclxuICogQ29udmVydGl0IGxlcyBzaWduZXMgZGUgbXVsdGlwbGljYXRpb24gdGV4dHVlbHMgZW4gc3ltYm9sZSBcdTAwRDcgVW5pY29kZVxyXG4gKiBJbnNwaXJcdTAwRTkgZHUgZml4ZXIgXCJEaW1lbnNpb25cIiBkZSBKb2xpVHlwb1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIERpbWVuc2lvbiBleHRlbmRzIEJhc2VGaXhlciB7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWQgPSAnRGltZW5zaW9uJztcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lID0gJ1N5bWJvbGVzIGRlIG11bHRpcGxpY2F0aW9uJztcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbiA9ICdDb252ZXJ0aXQgeCBldCAqIGVudHJlIG5vbWJyZXMgZW4gc3ltYm9sZSBcdTAwRDcgKDEyIHggMzQgXHUyMTkyIDEyXHUwMEQ3MzQpJztcclxuICAgIHB1YmxpYyByZWFkb25seSBjYXRlZ29yeSA9ICdzcGFjaW5nJyBhcyBjb25zdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBwcmlvcml0eSA9IDg7XHJcblxyXG4gICAgcHVibGljIGVuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGlxdWUgbGVzIHRyYW5zZm9ybWF0aW9ucyBkZSBtdWx0aXBsaWNhdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZml4KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtcyA9IFtcclxuICAgICAgICAgICAgLy8gTXVsdGlwbGljYXRpb24gYXZlYyAneCcgb3UgJ1gnIGVudHJlIG5vbWJyZXNcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKlt4WF1cXHMqKFxcZCsoPzpbLC5dP1xcZCspPykvZyxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBgJDEke1VOSUNPREVfQ0hBUlMuVElNRVN9JDJgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIE11bHRpcGxpY2F0aW9uIGF2ZWMgJyonIGVudHJlIG5vbWJyZXNcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKlxcKlxccyooXFxkKyg/OlssLl0/XFxkKyk/KS9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5USU1FU30kMmBcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRGltZW5zaW9ucyAobG9uZ3VldXIgeCBsYXJnZXVyIHggaGF1dGV1cilcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKlt4WF1cXHMqKFxcZCsoPzpbLC5dP1xcZCspPylcXHMqW3hYXVxccyooXFxkKyg/OlssLl0/XFxkKyk/KS9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGAkMSR7VU5JQ09ERV9DSEFSUy5USU1FU30kMiR7VU5JQ09ERV9DSEFSUy5USU1FU30kM2BcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgLy8gRm9ybWF0IFwiZGltZW5zaW9uc1wiIGF2ZWMgdW5pdFx1MDBFOXMgKGV4OiAxMmNtIHggMzRjbSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogLyhcXGQrKD86WywuXT9cXGQrKT8pXFxzKihbYS16QS1aXSspXFxzKlt4WF1cXHMqKFxcZCsoPzpbLC5dP1xcZCspPylcXHMqKFthLXpBLVpdKyk/L2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogYCQxJDIke1VOSUNPREVfQ0hBUlMuVElNRVN9JDMkNGBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5TXVsdGlwbGVUcmFuc2Zvcm1zKHRleHQsIHRyYW5zZm9ybXMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVlx1MDBFOXJpZmllIHNpIGxlIGNvbnRleHRlIGVzdCB2YWxpZGUgKFx1MDBFOXZpdGVyIGRlIG1vZGlmaWVyIGxlIGNvZGUsIHZhcmlhYmxlcywgZXRjLilcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGlzVmFsaWRDb250ZXh0KHRleHQ6IHN0cmluZywgcG9zaXRpb246IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghc3VwZXIuaXNWYWxpZENvbnRleHQodGV4dCwgcG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFx1MDBDOXZpdGVyIGxlcyBjYXMgY29tbWUgXCJNYXRyaXhcIiwgXCJMaW51eFwiLCBldGMuXHJcbiAgICAgICAgY29uc3QgYmVmb3JlQ29udGV4dCA9IHRleHQuc3Vic3RyaW5nKE1hdGgubWF4KDAsIHBvc2l0aW9uIC0gMTApLCBwb3NpdGlvbik7XHJcbiAgICAgICAgY29uc3QgYWZ0ZXJDb250ZXh0ID0gdGV4dC5zdWJzdHJpbmcocG9zaXRpb24sIE1hdGgubWluKHRleHQubGVuZ3RoLCBwb3NpdGlvbiArIDEwKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gTmUgcGFzIHRyYWl0ZXIgc2kgYydlc3QgZGFucyB1biBtb3RcclxuICAgICAgICBpZiAoYmVmb3JlQ29udGV4dC5tYXRjaCgvW2EtekEtWl0kLykgJiYgYWZ0ZXJDb250ZXh0Lm1hdGNoKC9eW2EtekEtWl0vKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEZvdXJuaXQgdW4gZXhlbXBsZSBkZSB0cmFuc2Zvcm1hdGlvblxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RXhhbXBsZSgpOiBGaXhlckV4YW1wbGUge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGJlZm9yZTogJ1JcdTAwRTlzb2x1dGlvbjogMTkyMCB4IDEwODAsIGZvcm1hdCAxNiAqIDksIGRpbWVuc2lvbnMgMTJjbSB4IDM0Y20geCA1NmNtJyxcclxuICAgICAgICAgICAgYWZ0ZXI6IGBSXHUwMEU5c29sdXRpb246IDE5MjAke1VOSUNPREVfQ0hBUlMuVElNRVN9MTA4MCwgZm9ybWF0IDE2JHtVTklDT0RFX0NIQVJTLlRJTUVTfTksIGRpbWVuc2lvbnMgMTJjbSR7VU5JQ09ERV9DSEFSUy5USU1FU30zNGNtJHtVTklDT0RFX0NIQVJTLlRJTUVTfTU2Y21gXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsICIvLyBzcmMvZml4ZXJzL3F1b3Rlcy9zbWFydC1xdW90ZXMudHNcclxuaW1wb3J0IHsgQmFzZUZpeGVyIH0gZnJvbSAnLi4vYmFzZS9iYXNlLWZpeGVyJztcclxuaW1wb3J0IHsgRml4ZXJFeGFtcGxlIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IFVOSUNPREVfQ0hBUlMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvdW5pY29kZSc7XHJcblxyXG4vKipcclxuICogRml4ZXIgcG91ciBsZXMgZ3VpbGxlbWV0cyBpbnRlbGxpZ2VudHNcclxuICogQ29udmVydGl0IGxlcyBndWlsbGVtZXRzIGRyb2l0cyBlbiBndWlsbGVtZXRzIHR5cG9ncmFwaGlxdWVzXHJcbiAqIEFkYXB0ZSBsZSBzdHlsZSBzZWxvbiBsYSBsYW5ndWUgKGZyYW5cdTAwRTdhaXMgPSBcdTAwQUIgXHUwMEJCLCBhbmdsYWlzID0gXCIgXCIpXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU21hcnRRdW90ZXMgZXh0ZW5kcyBCYXNlRml4ZXIge1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlkID0gJ1NtYXJ0UXVvdGVzJztcclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lID0gJ0d1aWxsZW1ldHMgaW50ZWxsaWdlbnRzJztcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbiA9ICdDb252ZXJ0aXQgbGVzIGd1aWxsZW1ldHMgZHJvaXRzIGVuIGd1aWxsZW1ldHMgdHlwb2dyYXBoaXF1ZXMnO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdGVnb3J5ID0gJ3F1b3RlcycgYXMgY29uc3Q7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHJpb3JpdHkgPSA0O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGlxdWUgbGVzIGd1aWxsZW1ldHMgaW50ZWxsaWdlbnRzIHNlbG9uIGxhIGxhbmd1ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZml4KHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNMb2NhbGVDb21wYXRpYmxlKFsnZnInXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZml4RnJlbmNoUXVvdGVzKHRleHQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpeEVuZ2xpc2hRdW90ZXModGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGlxdWUgbGVzIGd1aWxsZW1ldHMgZnJhblx1MDBFN2FpcyBcdTAwQUIgXHUwMEJCXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZml4RnJlbmNoUXVvdGVzKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRleHQ7XHJcbiAgICAgICAgbGV0IGluUXVvdGUgPSBmYWxzZTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBUcmFuc2Zvcm1lciBsZXMgZ3VpbGxlbWV0cyBkcm9pdHMgZW4gZ3VpbGxlbWV0cyBmcmFuXHUwMEU3YWlzXHJcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoL1wiL2csICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFpblF1b3RlKSB7XHJcbiAgICAgICAgICAgICAgICBpblF1b3RlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtVTklDT0RFX0NIQVJTLkxBUVVPfSR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19USElOX1NQQUNFfWA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpblF1b3RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19USElOX1NQQUNFfSR7VU5JQ09ERV9DSEFSUy5SQVFVT31gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVHJhbnNmb3JtZXIgbGVzIGFwb3N0cm9waGVzIGRyb2l0ZXMgZW4gYXBvc3Ryb3BoZXMgdHlwb2dyYXBoaXF1ZXNcclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvJy9nLCBVTklDT0RFX0NIQVJTLlJTUVVPKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGlxdWUgbGVzIGd1aWxsZW1ldHMgYW5nbGFpcyBcIiBcIlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGZpeEVuZ2xpc2hRdW90ZXModGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gdGV4dDtcclxuICAgICAgICBsZXQgaW5RdW90ZSA9IGZhbHNlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRyYW5zZm9ybWVyIGxlcyBndWlsbGVtZXRzIGRyb2l0cyBlbiBndWlsbGVtZXRzIGFuZ2xhaXNcclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvXCIvZywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWluUXVvdGUpIHtcclxuICAgICAgICAgICAgICAgIGluUXVvdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVOSUNPREVfQ0hBUlMuTERRVU87XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpblF1b3RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVU5JQ09ERV9DSEFSUy5SRFFVTztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIFRyYW5zZm9ybWVyIGxlcyBhcG9zdHJvcGhlcyBkYW5zIGxlcyBjb250cmFjdGlvbnNcclxuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZSgvKFxcdyknL2csIGAkMSR7VU5JQ09ERV9DSEFSUy5SU1FVT31gKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm91cm5pdCB1biBleGVtcGxlIHNlbG9uIGxhIGxhbmd1ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0RXhhbXBsZSgpOiBGaXhlckV4YW1wbGUge1xyXG4gICAgICAgIGlmICh0aGlzLmlzTG9jYWxlQ29tcGF0aWJsZShbJ2ZyJ10pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBiZWZvcmU6ICdJbCBhIGRpdCBcIkJvbmpvdXJcIiBldCBjXFwnZXN0IHBhcnRpLicsXHJcbiAgICAgICAgICAgICAgICBhZnRlcjogYElsIGEgZGl0ICR7VU5JQ09ERV9DSEFSUy5MQVFVT30ke1VOSUNPREVfQ0hBUlMuTk9fQlJFQUtfU1BBQ0V9Qm9uam91ciR7VU5JQ09ERV9DSEFSUy5OT19CUkVBS19TUEFDRX0ke1VOSUNPREVfQ0hBUlMuUkFRVU99IGV0IGMke1VOSUNPREVfQ0hBUlMuUlNRVU99ZXN0IHBhcnRpLmBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgYmVmb3JlOiAnSGUgc2FpZCBcIkhlbGxvXCIgYW5kIGl0XFwncyBkb25lLicsXHJcbiAgICAgICAgICAgICAgICBhZnRlcjogYEhlIHNhaWQgJHtVTklDT0RFX0NIQVJTLkxEUVVPfUhlbGxvJHtVTklDT0RFX0NIQVJTLlJEUVVPfSBhbmQgaXQke1VOSUNPREVfQ0hBUlMuUlNRVU99cyBkb25lLmBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCAiLy8gc3JjL2ZpeGVycy9xdW90ZXMvY3VybHktcXVvdGUudHNcclxuaW1wb3J0IHsgRWRpdG9yIH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBCYXNlRml4ZXIgfSBmcm9tICcuLi9iYXNlL2Jhc2UtZml4ZXInO1xyXG5pbXBvcnQgeyBGaXhlckV4YW1wbGUgfSBmcm9tICcuLi8uLi90eXBlcy9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgVU5JQ09ERV9DSEFSUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy91bmljb2RlJztcclxuXHJcbi8qKlxyXG4gKiBGaXhlciBwb3VyIGxlcyBhcG9zdHJvcGhlcyBjb3VyYmVzIChDdXJseVF1b3RlKVxyXG4gKiBDb252ZXJ0aXQgbGVzIGFwb3N0cm9waGVzIGRyb2l0ZXMgJyBlbiBhcG9zdHJvcGhlcyB0eXBvZ3JhcGhpcXVlcyAnXHJcbiAqIEJhc1x1MDBFOSBzdXIgbGUgZml4ZXIgQ3VybHlRdW90ZSBkZSBKb2xpVHlwb1xyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qb2xpY29kZS9Kb2xpVHlwby9ibG9iL21haW4vc3JjL0pvbGlUeXBvL0ZpeGVyL0N1cmx5UXVvdGUucGhwXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQ3VybHlRdW90ZSBleHRlbmRzIEJhc2VGaXhlciB7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWQgPSAnQ3VybHlRdW90ZSc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdBcG9zdHJvcGhlcyBjb3VyYmVzJztcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbiA9ICdDb252ZXJ0aXQgbGVzIGFwb3N0cm9waGVzIGRyb2l0ZXMgXFwnIGVuIGFwb3N0cm9waGVzIHR5cG9ncmFwaGlxdWVzIFxcJyc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2F0ZWdvcnkgPSAncXVvdGVzJyBhcyBjb25zdDtcclxuICAgIHB1YmxpYyByZWFkb25seSBwcmlvcml0eSA9IDU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2Zvcm1lIGxlcyBhcG9zdHJvcGhlcyBkcm9pdGVzIGVuIGFwb3N0cm9waGVzIGNvdXJiZXNcclxuICAgICAqIExvZ2lxdWUgSm9saVR5cG8gOiBjaGVyY2hlIFtsZXR0cmVdJyBldCByZW1wbGFjZSBwYXIgW2xldHRyZV0nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaXgodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICAvLyBQYXR0ZXJuIGV4YWN0IGRlIEpvbGlUeXBvIDogKFthLXpdKScgYXZlYyBmbGFncyBpbnNlbnNpYmxlIFx1MDBFMCBsYSBjYXNzZSBldCBtdWx0aWxpbmVcclxuICAgICAgICAvLyBSZW1wbGFjZSB1bmUgYXBvc3Ryb3BoZSBkcm9pdGUgcHJcdTAwRTljXHUwMEU5ZFx1MDBFOWUgZCd1bmUgbGV0dHJlIHBhciB1bmUgYXBvc3Ryb3BoZSBjb3VyYmVcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVJlZ2V4VHJhbnNmb3JtKFxyXG4gICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgICAgICAvKFthLXpdKScvZ2ltLFxyXG4gICAgICAgICAgICBgJDEke1VOSUNPREVfQ0hBUlMuUlNRVU99YFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHXHUwMEU4cmUgbGEgc2Fpc2llIGVuIHRlbXBzIHJcdTAwRTllbCBkZXMgYXBvc3Ryb3BoZXNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGhhbmRsZUtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50LCBlZGl0b3I6IEVkaXRvcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmIChldmVudC5rZXkgPT09IFwiJ1wiICYmICFldmVudC5jdHJsS2V5ICYmICFldmVudC5tZXRhS2V5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IGVkaXRvci5nZXRMaW5lKGN1cnNvci5saW5lKTtcclxuICAgICAgICAgICAgY29uc3QgYmVmb3JlQ3Vyc29yID0gbGluZS5zdWJzdHJpbmcoMCwgY3Vyc29yLmNoKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vIFZcdTAwRTlyaWZpZXIgc2kgbGUgY2FyYWN0XHUwMEU4cmUgcHJcdTAwRTljXHUwMEU5ZGVudCBlc3QgdW5lIGxldHRyZVxyXG4gICAgICAgICAgICBjb25zdCBsYXN0Q2hhciA9IGJlZm9yZUN1cnNvci5zbGljZSgtMSk7XHJcbiAgICAgICAgICAgIGlmIChsYXN0Q2hhciAmJiAvW2EtekEtWl0vLnRlc3QobGFzdENoYXIpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZW1wbGFjZXIgbCdhcG9zdHJvcGhlIGRyb2l0ZSBwYXIgdW5lIGFwb3N0cm9waGUgY291cmJlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW5lID0gYmVmb3JlQ3Vyc29yICsgVU5JQ09ERV9DSEFSUy5SU1FVTyArIGxpbmUuc3Vic3RyaW5nKGN1cnNvci5jaCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGVkaXRvci5zZXRMaW5lKGN1cnNvci5saW5lLCBuZXdMaW5lKTtcclxuICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IoeyBcclxuICAgICAgICAgICAgICAgICAgICBsaW5lOiBjdXJzb3IubGluZSwgXHJcbiAgICAgICAgICAgICAgICAgICAgY2g6IGN1cnNvci5jaCArIDFcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8gRW1wXHUwMEVBY2hlciBsJ2luc2VydGlvbiBkZSBsJ2Fwb3N0cm9waGUgZHJvaXRlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm91cm5pdCB1biBleGVtcGxlIGRlIHRyYW5zZm9ybWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRFeGFtcGxlKCk6IEZpeGVyRXhhbXBsZSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmVmb3JlOiBcIkknbSBoYXBweSwgeW91J3JlIGdyZWF0LCBpdCdzIHdvcmtpbmchXCIsXHJcbiAgICAgICAgICAgIGFmdGVyOiBgSSR7VU5JQ09ERV9DSEFSUy5SU1FVT31tIGhhcHB5LCB5b3Uke1VOSUNPREVfQ0hBUlMuUlNRVU99cmUgZ3JlYXQsIGl0JHtVTklDT0RFX0NIQVJTLlJTUVVPfXMgd29ya2luZyFgXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufSIsICIvLyBzcmMvZml4ZXJzL3N5bWJvbHMvdHJhZGVtYXJrLnRzXHJcbmltcG9ydCB7IEJhc2VGaXhlciB9IGZyb20gJy4uL2Jhc2UvYmFzZS1maXhlcic7XHJcbmltcG9ydCB7IEZpeGVyRXhhbXBsZSB9IGZyb20gJy4uLy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBVTklDT0RFX0NIQVJTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3VuaWNvZGUnO1xyXG5cclxuLyoqXHJcbiAqIEZpeGVyIHBvdXIgbGVzIHN5bWJvbGVzIGRlIG1hcnF1ZXMgY29tbWVyY2lhbGVzXHJcbiAqIENvbnZlcnRpdCAoYyksIChyKSwgKHRtKSBlbiBzeW1ib2xlcyBVbmljb2RlIFx1MDBBOSwgXHUwMEFFLCBcdTIxMjJcclxuICogSW5zcGlyXHUwMEU5IGR1IGZpeGVyIFwiVHJhZGVtYXJrXCIgZGUgSm9saVR5cG9cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUcmFkZW1hcmsgZXh0ZW5kcyBCYXNlRml4ZXIge1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGlkID0gJ1RyYWRlbWFyayc7XHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZSA9ICdTeW1ib2xlcyBkZSBtYXJxdWVzJztcclxuICAgIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbiA9ICdDb252ZXJ0aXQgKGMpIFx1MjE5MiBcdTAwQTksIChyKSBcdTIxOTIgXHUwMEFFLCAodG0pIFx1MjE5MiBcdTIxMjInO1xyXG4gICAgcHVibGljIHJlYWRvbmx5IGNhdGVnb3J5ID0gJ3N5bWJvbHMnIGFzIGNvbnN0O1xyXG4gICAgcHVibGljIHJlYWRvbmx5IHByaW9yaXR5ID0gOTtcclxuXHJcbiAgICBwdWJsaWMgZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaXF1ZSBsZXMgdHJhbnNmb3JtYXRpb25zIGRlcyBzeW1ib2xlcyBkZSBtYXJxdWVzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBmaXgodGV4dDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0cmFuc2Zvcm1zID0gW1xyXG4gICAgICAgICAgICAvLyBDb3B5cmlnaHQ6IChjKSBvdSAoQykgXHUyMTkyIFx1MDBBOVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFwoKFtjQ10pXFwpL2csXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogVU5JQ09ERV9DSEFSUy5DT1BZXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIFJlZ2lzdGVyZWQgdHJhZGVtYXJrOiAocikgb3UgKFIpIFx1MjE5MiBcdTAwQUVcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgcGF0dGVybjogL1xcKChbclJdKVxcKS9nLFxyXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IFVOSUNPREVfQ0hBUlMuUkVHXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIC8vIFRyYWRlbWFyazogKHRtKSBvdSAoVE0pIG91IChUbSkgXHUyMTkyIFx1MjEyMlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFwoKFt0VF1bbU1dKVxcKS9naSxcclxuICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBVTklDT0RFX0NIQVJTLlRSQURFXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseU11bHRpcGxlVHJhbnNmb3Jtcyh0ZXh0LCB0cmFuc2Zvcm1zKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZcdTAwRTlyaWZpZSBzaSBsZSBjb250ZXh0ZSBlc3QgYXBwcm9wcmlcdTAwRTkgcG91ciBsYSB0cmFuc2Zvcm1hdGlvblxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgaXNWYWxpZENvbnRleHQodGV4dDogc3RyaW5nLCBwb3NpdGlvbjogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKCFzdXBlci5pc1ZhbGlkQ29udGV4dCh0ZXh0LCBwb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gXHUwMEM5dml0ZXIgbGVzIHRyYW5zZm9ybWF0aW9ucyBkYW5zIGRlcyBjb250ZXh0ZXMgaW5hcHByb3ByaVx1MDBFOXNcclxuICAgICAgICBjb25zdCBiZWZvcmVDb250ZXh0ID0gdGV4dC5zdWJzdHJpbmcoTWF0aC5tYXgoMCwgcG9zaXRpb24gLSAyMCksIHBvc2l0aW9uKTtcclxuICAgICAgICBjb25zdCBhZnRlckNvbnRleHQgPSB0ZXh0LnN1YnN0cmluZyhwb3NpdGlvbiwgTWF0aC5taW4odGV4dC5sZW5ndGgsIHBvc2l0aW9uICsgMjApKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBOZSBwYXMgdHJhbnNmb3JtZXIgZGFucyBkdSBjb2RlIG91IGRlcyBVUkxcclxuICAgICAgICBpZiAoYmVmb3JlQ29udGV4dC5pbmNsdWRlcygnaHR0cCcpIHx8IGJlZm9yZUNvbnRleHQuaW5jbHVkZXMoJ3d3dy4nKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBOZSBwYXMgdHJhbnNmb3JtZXIgZGFucyBkZXMgZXhwcmVzc2lvbnMgclx1MDBFOWd1bGlcdTAwRThyZXMgb3UgZHUgY29kZVxyXG4gICAgICAgIGlmIChiZWZvcmVDb250ZXh0LmluY2x1ZGVzKCcvJykgJiYgYWZ0ZXJDb250ZXh0LmluY2x1ZGVzKCcvJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGb3Vybml0IHVuIGV4ZW1wbGUgZGUgdHJhbnNmb3JtYXRpb25cclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEV4YW1wbGUoKTogRml4ZXJFeGFtcGxlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBiZWZvcmU6ICdNaWNyb3NvZnQgKGMpIDIwMjUsIGlQaG9uZSAociksIEdvb2dsZSBTZWFyY2ggKHRtKScsXHJcbiAgICAgICAgICAgIGFmdGVyOiBgTWljcm9zb2Z0ICR7VU5JQ09ERV9DSEFSUy5DT1BZfSAyMDI1LCBpUGhvbmUgJHtVTklDT0RFX0NIQVJTLlJFR30sIEdvb2dsZSBTZWFyY2ggJHtVTklDT0RFX0NIQVJTLlRSQURFfWBcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59IiwgIi8vIHNyYy9maXhlcnMvaW5kZXgudHNcclxuXHJcbi8vIEV4cG9ydCBkZSBsYSBjbGFzc2UgZGUgYmFzZVxyXG5leHBvcnQgeyBCYXNlRml4ZXIgfSBmcm9tICcuL2Jhc2UvYmFzZS1maXhlcic7XHJcblxyXG4vLyBFeHBvcnQgZGVzIGZpeGVycyBkZSBwb25jdHVhdGlvblxyXG5leHBvcnQgeyBFbGxpcHNpcyB9IGZyb20gJy4vcHVuY3R1YXRpb24vZWxsaXBzaXMnO1xyXG5leHBvcnQgeyBEYXNoIH0gZnJvbSAnLi9wdW5jdHVhdGlvbi9kYXNoJztcclxuZXhwb3J0IHsgSHlwaGVuIH0gZnJvbSAnLi9wdW5jdHVhdGlvbi9oeXBoZW4nO1xyXG5cclxuLy8gRXhwb3J0IGRlcyBmaXhlcnMgZCdlc3BhY2VtZW50XHJcbmV4cG9ydCB7IEZyZW5jaE5vQnJlYWtTcGFjZSB9IGZyb20gJy4vc3BhY2luZy9mcmVuY2gtc3BhY2luZyc7XHJcbmV4cG9ydCB7IE5vU3BhY2VCZWZvcmVDb21tYSB9IGZyb20gJy4vc3BhY2luZy9jb21tYSc7XHJcbmV4cG9ydCB7IFVuaXQgfSBmcm9tICcuL3NwYWNpbmcvdW5pdCc7XHJcbmV4cG9ydCB7IERpbWVuc2lvbiB9IGZyb20gJy4vc3BhY2luZy9kaW1lbnNpb24nO1xyXG5cclxuLy8gRXhwb3J0IGRlcyBmaXhlcnMgZGUgZ3VpbGxlbWV0c1xyXG5leHBvcnQgeyBTbWFydFF1b3RlcyB9IGZyb20gJy4vcXVvdGVzL3NtYXJ0LXF1b3Rlcyc7XHJcbmV4cG9ydCB7IEN1cmx5UXVvdGUgfSBmcm9tICcuL3F1b3Rlcy9jdXJseS1xdW90ZSc7XHJcblxyXG4vLyBFeHBvcnQgZGVzIGZpeGVycyBkZSBzeW1ib2xlc1xyXG5leHBvcnQgeyBUcmFkZW1hcmsgfSBmcm9tICcuL3N5bWJvbHMvdHJhZGVtYXJrJztcclxuXHJcbi8vIEltcG9ydCBwb3VyIGwndXNhZ2UgaW50ZXJuZVxyXG5pbXBvcnQgeyBFbGxpcHNpcyB9IGZyb20gJy4vcHVuY3R1YXRpb24vZWxsaXBzaXMnO1xyXG5pbXBvcnQgeyBEYXNoIH0gZnJvbSAnLi9wdW5jdHVhdGlvbi9kYXNoJztcclxuaW1wb3J0IHsgRnJlbmNoTm9CcmVha1NwYWNlIH0gZnJvbSAnLi9zcGFjaW5nL2ZyZW5jaC1zcGFjaW5nJztcclxuaW1wb3J0IHsgU21hcnRRdW90ZXMgfSBmcm9tICcuL3F1b3Rlcy9zbWFydC1xdW90ZXMnO1xyXG5pbXBvcnQgeyBDdXJseVF1b3RlIH0gZnJvbSAnLi9xdW90ZXMvY3VybHktcXVvdGUnO1xyXG5pbXBvcnQgeyBOb1NwYWNlQmVmb3JlQ29tbWEgfSBmcm9tICcuL3NwYWNpbmcvY29tbWEnO1xyXG5pbXBvcnQgeyBVbml0IH0gZnJvbSAnLi9zcGFjaW5nL3VuaXQnO1xyXG5pbXBvcnQgeyBEaW1lbnNpb24gfSBmcm9tICcuL3NwYWNpbmcvZGltZW5zaW9uJztcclxuaW1wb3J0IHsgVHJhZGVtYXJrIH0gZnJvbSAnLi9zeW1ib2xzL3RyYWRlbWFyayc7XHJcbmltcG9ydCB7IEh5cGhlbiB9IGZyb20gJy4vcHVuY3R1YXRpb24vaHlwaGVuJztcclxuXHJcbmltcG9ydCB7IFR5cG9ncmFwaGljRml4ZXIgfSBmcm9tICcuLi90eXBlcy9pbnRlcmZhY2VzJztcclxuXHJcbi8qKlxyXG4gKiBGYWN0b3J5IHBvdXIgY3JcdTAwRTllciB0b3VzIGxlcyBmaXhlcnMgZGlzcG9uaWJsZXNcclxuICogQHJldHVybnMgTGlzdGUgZGUgdG91cyBsZXMgZml4ZXJzIGluc3RhbmNpXHUwMEU5c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFsbEZpeGVycygpOiBUeXBvZ3JhcGhpY0ZpeGVyW10ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICAvLyBPcmRyZSBwYXIgcHJpb3JpdFx1MDBFOSBjcm9pc3NhbnRlXHJcbiAgICAgICAgbmV3IEVsbGlwc2lzKCksICAgICAgICAgICAvLyBwcmlvcml0XHUwMEU5IDFcclxuICAgICAgICBuZXcgRGFzaCgpLCAgICAgICAgICAgICAgIC8vIHByaW9yaXRcdTAwRTkgMlxyXG4gICAgICAgIG5ldyBGcmVuY2hOb0JyZWFrU3BhY2UoKSwgLy8gcHJpb3JpdFx1MDBFOSAzXHJcbiAgICAgICAgbmV3IFNtYXJ0UXVvdGVzKCksICAgLy8gcHJpb3JpdFx1MDBFOSA0XHJcbiAgICAgICAgbmV3IEN1cmx5UXVvdGUoKSwgICAgLy8gcHJpb3JpdFx1MDBFOSA1XHJcbiAgICAgICAgbmV3IE5vU3BhY2VCZWZvcmVDb21tYSgpLCAvLyBwcmlvcml0XHUwMEU5IDZcclxuICAgICAgICBuZXcgVW5pdCgpLCAgICAgICAgICAvLyBwcmlvcml0XHUwMEU5IDdcclxuICAgICAgICBuZXcgRGltZW5zaW9uKCksICAgICAvLyBwcmlvcml0XHUwMEU5IDhcclxuICAgICAgICBuZXcgVHJhZGVtYXJrKCksICAgICAvLyBwcmlvcml0XHUwMEU5IDlcclxuICAgICAgICBuZXcgSHlwaGVuKCksICAgICAgICAvLyBwcmlvcml0XHUwMEU5IDEwIChkXHUwMEU5c2FjdGl2XHUwMEU5IHBhciBkXHUwMEU5ZmF1dClcclxuICAgIF07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGYWN0b3J5IHBvdXIgY3JcdTAwRTllciBsZXMgZml4ZXJzIHBhciBjYXRcdTAwRTlnb3JpZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEZpeGVyRmFjdG9yaWVzID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDclx1MDBFOWUgdG91cyBsZXMgZml4ZXJzIGRlIHBvbmN0dWF0aW9uXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVB1bmN0dWF0aW9uRml4ZXJzKCk6IFR5cG9ncmFwaGljRml4ZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IEVsbGlwc2lzKCksXHJcbiAgICAgICAgICAgIG5ldyBEYXNoKCksXHJcbiAgICAgICAgICAgIG5ldyBIeXBoZW4oKSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyXHUwMEU5ZSB0b3VzIGxlcyBmaXhlcnMgZCdlc3BhY2VtZW50XHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVNwYWNpbmdGaXhlcnMoKTogVHlwb2dyYXBoaWNGaXhlcltdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXcgRnJlbmNoTm9CcmVha1NwYWNlKCksXHJcbiAgICAgICAgICAgIG5ldyBOb1NwYWNlQmVmb3JlQ29tbWEoKSxcclxuICAgICAgICAgICAgbmV3IFVuaXQoKSxcclxuICAgICAgICAgICAgbmV3IERpbWVuc2lvbigpLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JcdTAwRTllIHRvdXMgbGVzIGZpeGVycyBkZSBndWlsbGVtZXRzXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVF1b3RlRml4ZXJzKCk6IFR5cG9ncmFwaGljRml4ZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbmV3IFNtYXJ0UXVvdGVzKCksXHJcbiAgICAgICAgICAgIG5ldyBDdXJseVF1b3RlKCksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDclx1MDBFOWUgdG91cyBsZXMgZml4ZXJzIGRlIHN5bWJvbGVzXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZVN5bWJvbEZpeGVycygpOiBUeXBvZ3JhcGhpY0ZpeGVyW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5ldyBUcmFkZW1hcmsoKSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyXHUwMEU5ZSBsZXMgZml4ZXJzIGVzc2VudGllbHMgcG91ciBsZSBmcmFuXHUwMEU3YWlzXHJcbiAgICAgKiBDb3JyZXNwb25kIFx1MDBFMCBsYSBjb25maWd1cmF0aW9uIEpvbGlUeXBvIGZyX0ZSXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUZyZW5jaEVzc2VudGlhbEZpeGVycygpOiBUeXBvZ3JhcGhpY0ZpeGVyW10ge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG5ldyBFbGxpcHNpcygpLFxyXG4gICAgICAgICAgICBuZXcgRGFzaCgpLFxyXG4gICAgICAgICAgICBuZXcgRnJlbmNoTm9CcmVha1NwYWNlKCksXHJcbiAgICAgICAgICAgIG5ldyBTbWFydFF1b3RlcygpLFxyXG4gICAgICAgICAgICBuZXcgQ3VybHlRdW90ZSgpLFxyXG4gICAgICAgICAgICBuZXcgVW5pdCgpLFxyXG4gICAgICAgICAgICBuZXcgRGltZW5zaW9uKCksXHJcbiAgICAgICAgICAgIG5ldyBUcmFkZW1hcmsoKSxcclxuICAgICAgICAgICAgbmV3IE5vU3BhY2VCZWZvcmVDb21tYSgpLFxyXG4gICAgICAgICAgICAvLyBOb3RlOiBIeXBoZW4gZFx1MDBFOXNhY3Rpdlx1MDBFOSBwYXIgZFx1MDBFOWZhdXQgY2FyIGNvbXBsZXhlXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDclx1MDBFOWUgbGVzIGZpeGVycyBlc3NlbnRpZWxzIHBvdXIgbCdhbmdsYWlzXHJcbiAgICAgKiBDb3JyZXNwb25kIFx1MDBFMCBsYSBjb25maWd1cmF0aW9uIEpvbGlUeXBvIGVuX0dCXHJcbiAgICAgKi9cclxuICAgIGNyZWF0ZUVuZ2xpc2hFc3NlbnRpYWxGaXhlcnMoKTogVHlwb2dyYXBoaWNGaXhlcltdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBuZXcgRWxsaXBzaXMoKSxcclxuICAgICAgICAgICAgbmV3IERhc2goKSxcclxuICAgICAgICAgICAgbmV3IFNtYXJ0UXVvdGVzKCksXHJcbiAgICAgICAgICAgIG5ldyBDdXJseVF1b3RlKCksXHJcbiAgICAgICAgICAgIG5ldyBVbml0KCksXHJcbiAgICAgICAgICAgIG5ldyBEaW1lbnNpb24oKSxcclxuICAgICAgICAgICAgbmV3IFRyYWRlbWFyaygpLFxyXG4gICAgICAgICAgICBuZXcgTm9TcGFjZUJlZm9yZUNvbW1hKCksXHJcbiAgICAgICAgICAgIC8vIE5vdGU6IEh5cGhlbiBkXHUwMEU5c2FjdGl2XHUwMEU5IHBhciBkXHUwMEU5ZmF1dFxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogTVx1MDBFOXRhZG9ublx1MDBFOWVzIHN1ciBsZXMgZml4ZXJzIGRpc3BvbmlibGVzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgRml4ZXJNZXRhZGF0YSA9IHtcclxuICAgIHRvdGFsQ291bnQ6IDEwLCAvLyBOb21icmUgdG90YWwgZGUgZml4ZXJzIGltcGxcdTAwRTltZW50XHUwMEU5c1xyXG4gICAgY2F0ZWdvcmllczogWydwdW5jdHVhdGlvbicsICdzcGFjaW5nJywgJ3F1b3RlcycsICdzeW1ib2xzJ10gYXMgY29uc3QsXHJcbiAgICBcclxuICAgIGdldENhdGVnb3J5Q291bnQoY2F0ZWdvcnk6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlNYXA6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7XHJcbiAgICAgICAgICAgICdwdW5jdHVhdGlvbic6IDMsICAgLy8gRWxsaXBzaXMsIERhc2gsIEh5cGhlblxyXG4gICAgICAgICAgICAnc3BhY2luZyc6IDQsICAgICAgIC8vIEZyZW5jaE5vQnJlYWtTcGFjZSwgTm9TcGFjZUJlZm9yZUNvbW1hLCBVbml0LCBEaW1lbnNpb25cclxuICAgICAgICAgICAgJ3F1b3Rlcyc6IDIsICAgICAgICAvLyBTbWFydFF1b3RlcywgQ3VybHlRdW90ZSAgXHJcbiAgICAgICAgICAgICdzeW1ib2xzJzogMSAgICAgICAgLy8gVHJhZGVtYXJrXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2F0ZWdvcnlNYXBbY2F0ZWdvcnldIHx8IDA7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldEZpeGVySWRzKCk6IHN0cmluZ1tdIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAnRWxsaXBzaXMnLFxyXG4gICAgICAgICAgICAnRGFzaCcsXHJcbiAgICAgICAgICAgICdIeXBoZW4nLCBcclxuICAgICAgICAgICAgJ0ZyZW5jaE5vQnJlYWtTcGFjZScsXHJcbiAgICAgICAgICAgICdOb1NwYWNlQmVmb3JlQ29tbWEnLFxyXG4gICAgICAgICAgICAnVW5pdCcsXHJcbiAgICAgICAgICAgICdEaW1lbnNpb24nLFxyXG4gICAgICAgICAgICAnU21hcnRRdW90ZXMnLFxyXG4gICAgICAgICAgICAnQ3VybHlRdW90ZScsXHJcbiAgICAgICAgICAgICdUcmFkZW1hcmsnXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRvdXJuZSBsZXMgZml4ZXJzIHJlY29tbWFuZFx1MDBFOXMgcGFyIGxvY2FsZSAoY29tbWUgSm9saVR5cG8pXHJcbiAgICAgKi9cclxuICAgIGdldFJlY29tbWVuZGVkRml4ZXJzRm9yTG9jYWxlKGxvY2FsZTogc3RyaW5nKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGNvbnN0IGxvY2FsZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge1xyXG4gICAgICAgICAgICAnZnJfRlInOiBbJ0VsbGlwc2lzJywgJ0RpbWVuc2lvbicsICdVbml0JywgJ0Rhc2gnLCAnU21hcnRRdW90ZXMnLCAnRnJlbmNoTm9CcmVha1NwYWNlJywgJ05vU3BhY2VCZWZvcmVDb21tYScsICdDdXJseVF1b3RlJywgJ1RyYWRlbWFyayddLFxyXG4gICAgICAgICAgICAnZnJfQ0EnOiBbJ0VsbGlwc2lzJywgJ0RpbWVuc2lvbicsICdVbml0JywgJ0Rhc2gnLCAnU21hcnRRdW90ZXMnLCAnTm9TcGFjZUJlZm9yZUNvbW1hJywgJ0N1cmx5UXVvdGUnLCAnVHJhZGVtYXJrJ10sXHJcbiAgICAgICAgICAgICdlbl9HQic6IFsnRWxsaXBzaXMnLCAnRGltZW5zaW9uJywgJ1VuaXQnLCAnRGFzaCcsICdTbWFydFF1b3RlcycsICdOb1NwYWNlQmVmb3JlQ29tbWEnLCAnQ3VybHlRdW90ZScsICdUcmFkZW1hcmsnXSxcclxuICAgICAgICAgICAgJ2RlX0RFJzogWydFbGxpcHNpcycsICdEaW1lbnNpb24nLCAnVW5pdCcsICdEYXNoJywgJ1NtYXJ0UXVvdGVzJywgJ05vU3BhY2VCZWZvcmVDb21tYScsICdDdXJseVF1b3RlJywgJ1RyYWRlbWFyayddXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gbG9jYWxlTWFwW2xvY2FsZV0gfHwgbG9jYWxlTWFwWydmcl9GUiddO1xyXG4gICAgfVxyXG59OyIsICIvLyBzcmMvZW5naW5lL3R5cG9ncmFwaHktZW5naW5lLnRzXHJcbmltcG9ydCB7IEVkaXRvciB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgXHJcbiAgICBUeXBvZ3JhcGhpY0ZpeGVyLCBcclxuICAgIFR5cG9ncmFwaHlTZXR0aW5ncywgXHJcbiAgICBDb3JyZWN0aW9uUmVzdWx0LFxyXG4gICAgRml4ZXJDb25maWcgXHJcbn0gZnJvbSAnLi4vdHlwZXMvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IGNyZWF0ZUFsbEZpeGVycyB9IGZyb20gJy4uL2ZpeGVycyc7XHJcblxyXG4vKipcclxuICogTW90ZXVyIHByaW5jaXBhbCBkZSBjb3JyZWN0aW9uIHR5cG9ncmFwaGlxdWVcclxuICogR1x1MDBFOHJlIGwnZW5zZW1ibGUgZGVzIGZpeGVycyBldCBhcHBsaXF1ZSBsZXMgY29ycmVjdGlvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUeXBvZ3JhcGh5RW5naW5lIHtcclxuICAgIHByaXZhdGUgZml4ZXJzOiBNYXA8c3RyaW5nLCBUeXBvZ3JhcGhpY0ZpeGVyPiA9IG5ldyBNYXAoKTtcclxuICAgIHByaXZhdGUgc2V0dGluZ3M6IFR5cG9ncmFwaHlTZXR0aW5ncztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5nczogVHlwb2dyYXBoeVNldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUZpeGVycygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbGlzZSB0b3VzIGxlcyBmaXhlcnMgZGlzcG9uaWJsZXNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplRml4ZXJzKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGFsbEZpeGVycyA9IGNyZWF0ZUFsbEZpeGVycygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGFsbEZpeGVycy5mb3JFYWNoKGZpeGVyID0+IHtcclxuICAgICAgICAgICAgdGhpcy5maXhlcnMuc2V0KGZpeGVyLmlkLCBmaXhlcik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBBcHBsaXF1ZXIgbGVzIHBhcmFtXHUwMEU4dHJlcyBkJ2FjdGl2YXRpb25cclxuICAgICAgICAgICAgaWYgKGZpeGVyLmlkIGluIHRoaXMuc2V0dGluZ3MuZml4ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBmaXhlci5lbmFibGVkID0gdGhpcy5zZXR0aW5ncy5maXhlcnNbZml4ZXIuaWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDb25maWd1cmVyIGxhIGxvY2FsZSBzaSBsZSBmaXhlciBsZSBzdXBwb3J0ZVxyXG4gICAgICAgICAgICBpZiAoZml4ZXIuc2V0TG9jYWxlKSB7XHJcbiAgICAgICAgICAgICAgICBmaXhlci5zZXRMb2NhbGUodGhpcy5zZXR0aW5ncy5sb2NhbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXQgXHUwMEUwIGpvdXIgbGVzIHBhcmFtXHUwMEU4dHJlcyBldCByZWNvbmZpZ3VyZSBsZXMgZml4ZXJzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB1cGRhdGVTZXR0aW5ncyhzZXR0aW5nczogVHlwb2dyYXBoeVNldHRpbmdzKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZml4ZXJzLmZvckVhY2goZml4ZXIgPT4ge1xyXG4gICAgICAgICAgICAvLyBNZXR0cmUgXHUwMEUwIGpvdXIgbCdcdTAwRTl0YXQgZCdhY3RpdmF0aW9uXHJcbiAgICAgICAgICAgIGlmIChmaXhlci5pZCBpbiBzZXR0aW5ncy5maXhlcnMpIHtcclxuICAgICAgICAgICAgICAgIGZpeGVyLmVuYWJsZWQgPSBzZXR0aW5ncy5maXhlcnNbZml4ZXIuaWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBNZXR0cmUgXHUwMEUwIGpvdXIgbGEgbG9jYWxlXHJcbiAgICAgICAgICAgIGlmIChmaXhlci5zZXRMb2NhbGUpIHtcclxuICAgICAgICAgICAgICAgIGZpeGVyLnNldExvY2FsZShzZXR0aW5ncy5sb2NhbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRvdXJuZSB0b3VzIGxlcyBmaXhlcnMgdHJpXHUwMEU5cyBwYXIgcHJpb3JpdFx1MDBFOVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0Rml4ZXJzKCk6IFR5cG9ncmFwaGljRml4ZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5maXhlcnMudmFsdWVzKCkpXHJcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLnByaW9yaXR5IC0gYi5wcmlvcml0eSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXRvdXJuZSB1bmlxdWVtZW50IGxlcyBmaXhlcnMgYWN0aXZcdTAwRTlzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRFbmFibGVkRml4ZXJzKCk6IFR5cG9ncmFwaGljRml4ZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rml4ZXJzKCkuZmlsdGVyKGZpeGVyID0+IGZpeGVyLmVuYWJsZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0b3VybmUgbGVzIGZpeGVycyBwYXIgY2F0XHUwMEU5Z29yaWVcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEZpeGVyc0J5Q2F0ZWdvcnkoY2F0ZWdvcnk6IHN0cmluZyk6IFR5cG9ncmFwaGljRml4ZXJbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rml4ZXJzKCkuZmlsdGVyKGZpeGVyID0+IGZpeGVyLmNhdGVnb3J5ID09PSBjYXRlZ29yeSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPYnRpZW50IHVuIGZpeGVyIHNwXHUwMEU5Y2lmaXF1ZSBwYXIgc29uIElEXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRGaXhlcihpZDogc3RyaW5nKTogVHlwb2dyYXBoaWNGaXhlciB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZml4ZXJzLmdldChpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFpdGUgdW4gdGV4dGUgYXZlYyB0b3VzIGxlcyBmaXhlcnMgYWN0aXZcdTAwRTlzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwcm9jZXNzVGV4dCh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IGVuYWJsZWRGaXhlcnMgPSB0aGlzLmdldEVuYWJsZWRGaXhlcnMoKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gZW5hYmxlZEZpeGVycy5yZWR1Y2UoKGN1cnJlbnRUZXh0LCBmaXhlcikgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVyLmZpeChjdXJyZW50VGV4dCk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFtUeXBvZ3JhcGh5RW5naW5lXSBFcnJldXIgZGFucyBsZSBmaXhlciAke2ZpeGVyLmlkfTpgLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFRleHQ7IC8vIFJldG91cm5lciBsZSB0ZXh0ZSBub24gbW9kaWZpXHUwMEU5IGVuIGNhcyBkJ2VycmV1clxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGV4dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFpdGUgdW4gdGV4dGUgZXQgcmV0b3VybmUgZGVzIGluZm9ybWF0aW9ucyBkXHUwMEU5dGFpbGxcdTAwRTllcyBzdXIgbGVzIGNvcnJlY3Rpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwcm9jZXNzVGV4dFdpdGhEZXRhaWxzKHRleHQ6IHN0cmluZyk6IENvcnJlY3Rpb25SZXN1bHQge1xyXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsID0gdGV4dDtcclxuICAgICAgICBjb25zdCBlbmFibGVkRml4ZXJzID0gdGhpcy5nZXRFbmFibGVkRml4ZXJzKCk7XHJcbiAgICAgICAgY29uc3QgZml4ZXJzVXNlZDogc3RyaW5nW10gPSBbXTtcclxuICAgICAgICBsZXQgY29ycmVjdGlvbnNDb3VudCA9IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvcnJlY3RlZCA9IGVuYWJsZWRGaXhlcnMucmVkdWNlKChjdXJyZW50VGV4dCwgZml4ZXIpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpeGVkVGV4dCA9IGZpeGVyLmZpeChjdXJyZW50VGV4dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZml4ZWRUZXh0ICE9PSBjdXJyZW50VGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpeGVyc1VzZWQucHVzaChmaXhlci5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbnNDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVkVGV4dDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgW1R5cG9ncmFwaHlFbmdpbmVdIEVycmV1ciBkYW5zIGxlIGZpeGVyICR7Zml4ZXIuaWR9OmAsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50VGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRleHQpO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBvcmlnaW5hbCxcclxuICAgICAgICAgICAgY29ycmVjdGVkLFxyXG4gICAgICAgICAgICBjb3JyZWN0aW9uc0NvdW50LFxyXG4gICAgICAgICAgICBmaXhlcnNVc2VkXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdcdTAwRThyZSBsZXMgXHUwMEU5dlx1MDBFOW5lbWVudHMgY2xhdmllciBlbiB0ZW1wcyByXHUwMEU5ZWxcclxuICAgICAqL1xyXG4gICAgcHVibGljIGhhbmRsZUtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50LCBlZGl0b3I6IEVkaXRvcik6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVSZWFsVGltZUNvcnJlY3Rpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW5hYmxlZEZpeGVycyA9IHRoaXMuZ2V0RW5hYmxlZEZpeGVycygpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoY29uc3QgZml4ZXIgb2YgZW5hYmxlZEZpeGVycykge1xyXG4gICAgICAgICAgICBpZiAoZml4ZXIuaGFuZGxlS2V5RXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpeGVyLmhhbmRsZUtleUV2ZW50KGV2ZW50LCBlZGl0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBVbiBmaXhlciBhIHRyYWl0XHUwMEU5IGwnXHUwMEU5dlx1MDBFOW5lbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBbVHlwb2dyYXBoeUVuZ2luZV0gRXJyZXVyIGRhbnMgaGFuZGxlS2V5RXZlbnQgcG91ciAke2ZpeGVyLmlkfTpgLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZlIG91IGRcdTAwRTlzYWN0aXZlIHVuIGZpeGVyIHNwXHUwMEU5Y2lmaXF1ZVxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdG9nZ2xlRml4ZXIoZml4ZXJJZDogc3RyaW5nLCBlbmFibGVkOiBib29sZWFuKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgZml4ZXIgPSB0aGlzLmZpeGVycy5nZXQoZml4ZXJJZCk7XHJcbiAgICAgICAgaWYgKGZpeGVyKSB7XHJcbiAgICAgICAgICAgIGZpeGVyLmVuYWJsZWQgPSBlbmFibGVkO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmZpeGVyc1tmaXhlcklkXSA9IGVuYWJsZWQ7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmUgb3UgZFx1MDBFOXNhY3RpdmUgdG91cyBsZXMgZml4ZXJzIGQndW5lIGNhdFx1MDBFOWdvcmllXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0b2dnbGVDYXRlZ29yeShjYXRlZ29yeTogc3RyaW5nLCBlbmFibGVkOiBib29sZWFuKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBjYXRlZ29yeUZpeGVycyA9IHRoaXMuZ2V0Rml4ZXJzQnlDYXRlZ29yeShjYXRlZ29yeSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2F0ZWdvcnlGaXhlcnMuZm9yRWFjaChmaXhlciA9PiB7XHJcbiAgICAgICAgICAgIGZpeGVyLmVuYWJsZWQgPSBlbmFibGVkO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmZpeGVyc1tmaXhlci5pZF0gPSBlbmFibGVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiBjYXRlZ29yeUZpeGVycy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSXHUwMEU5aW5pdGlhbGlzZSB0b3VzIGxlcyBmaXhlcnMgXHUwMEUwIGxldXIgXHUwMEU5dGF0IHBhciBkXHUwMEU5ZmF1dFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVzZXRUb0RlZmF1bHRzKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZml4ZXJzLmZvckVhY2goZml4ZXIgPT4ge1xyXG4gICAgICAgICAgICAvLyBMb2dpcXVlIHBhciBkXHUwMEU5ZmF1dCA6IGNlcnRhaW5zIGZpeGVycyBhY3Rpdlx1MDBFOXMgc2Vsb24gbGEgbGFuZ3VlXHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRFbmFibGVkID0gdGhpcy5nZXREZWZhdWx0RW5hYmxlZFN0YXRlKGZpeGVyLmlkKTtcclxuICAgICAgICAgICAgZml4ZXIuZW5hYmxlZCA9IGRlZmF1bHRFbmFibGVkO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmZpeGVyc1tmaXhlci5pZF0gPSBkZWZhdWx0RW5hYmxlZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERcdTAwRTl0ZXJtaW5lIGwnXHUwMEU5dGF0IHBhciBkXHUwMEU5ZmF1dCBkJ3VuIGZpeGVyIHNlbG9uIGxhIGNvbmZpZ3VyYXRpb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0RW5hYmxlZFN0YXRlKGZpeGVySWQ6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGZyZW5jaEVzc2VudGlhbEZpeGVycyA9IFsnZWxsaXBzaXMnLCAnZGFzaCcsICdmcmVuY2gtc3BhY2luZycsICdzbWFydC1xdW90ZXMnLCAnY29tbWEnXTtcclxuICAgICAgICBjb25zdCBlbmdsaXNoRXNzZW50aWFsRml4ZXJzID0gWydlbGxpcHNpcycsICdkYXNoJywgJ3NtYXJ0LXF1b3RlcycsICdjb21tYSddO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmxvY2FsZS5zdGFydHNXaXRoKCdmcicpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmcmVuY2hFc3NlbnRpYWxGaXhlcnMuaW5jbHVkZXMoZml4ZXJJZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVuZ2xpc2hFc3NlbnRpYWxGaXhlcnMuaW5jbHVkZXMoZml4ZXJJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbn0iLCAiLy8gc3JjL3NldHRpbmdzL3NldHRpbmdzLXRhYi50c1xyXG5pbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgeyBUeXBvZ3JhcGhpY0ZpeGVyIH0gZnJvbSBcIi4uL3R5cGVzL2ludGVyZmFjZXNcIjtcclxuaW1wb3J0IHtcclxuICBMT0NBTEVfQ09ORklHVVJBVElPTlMsXHJcbiAgTE9DQUxFX05BTUVTLFxyXG4gIENBVEVHT1JZX05BTUVTLFxyXG59IGZyb20gXCIuL2RlZmF1bHQtc2V0dGluZ3NcIjtcclxuaW1wb3J0IFR5cG9ncmFwaHlQbHVnaW4gZnJvbSBcIi4uL21haW5cIjtcclxuXHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgZGUgY29uZmlndXJhdGlvbiBkdSBwbHVnaW4gVHlwb2dyYXBoeSBGaXhlcnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBUeXBvZ3JhcGh5U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG4gIHBsdWdpbjogVHlwb2dyYXBoeVBsdWdpbjtcclxuXHJcbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVHlwb2dyYXBoeVBsdWdpbikge1xyXG4gICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgfVxyXG5cclxuICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcclxuICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG4gICAgLy8gVGl0cmUgcHJpbmNpcGFsXHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgyXCIsIHsgdGV4dDogXCJQYXJhbVx1MDBFOHRyZXMgVHlwb2dyYXBoeSBGaXhlcnNcIiB9KTtcclxuXHJcbiAgICAvLyBEZXNjcmlwdGlvblxyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgdGV4dDogXCJQbHVnaW4gZGUgY29ycmVjdGlvbiB0eXBvZ3JhcGhpcXVlIGJhc1x1MDBFOSBzdXIgSm9saVR5cG8uIENvcnJpZ2UgYXV0b21hdGlxdWVtZW50IGxlcyBlcnJldXJzIHR5cG9ncmFwaGlxdWVzIHNlbG9uIGxlcyByXHUwMEU4Z2xlcyBmcmFuXHUwMEU3YWlzZXMsIGFuZ2xhaXNlcyBldCBhbGxlbWFuZGVzLlwiLFxyXG4gICAgICBjbHM6IFwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTZWN0aW9uOiBDb25maWd1cmF0aW9uIGdcdTAwRTluXHUwMEU5cmFsZVxyXG4gICAgdGhpcy5jcmVhdGVHZW5lcmFsU2V0dGluZ3MoY29udGFpbmVyRWwpO1xyXG5cclxuICAgIC8vIFNlY3Rpb246IFJcdTAwRThnbGVzIGRlIGNvcnJlY3Rpb25cclxuICAgIHRoaXMuY3JlYXRlRml4ZXJTZXR0aW5ncyhjb250YWluZXJFbCk7XHJcblxyXG4gICAgLy8gU2VjdGlvbjogQWN0aW9uc1xyXG4gICAgdGhpcy5jcmVhdGVBY3Rpb25zU2VjdGlvbihjb250YWluZXJFbCk7XHJcblxyXG4gICAgLy8gQWpvdXRlciBsZXMgc3R5bGVzIENTUyBwZXJzb25uYWxpc1x1MDBFOXNcclxuICAgIHRoaXMuYWRkQ3VzdG9tU3R5bGVzKGNvbnRhaW5lckVsKTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZUhpZ2hsaWdodFNldHRpbmdzKGNvbnRhaW5lckVsKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyXHUwMEU5ZSBsYSBzZWN0aW9uIGRlIGNvbmZpZ3VyYXRpb24gZ1x1MDBFOW5cdTAwRTlyYWxlXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjcmVhdGVHZW5lcmFsU2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJDb25maWd1cmF0aW9uIGdcdTAwRTluXHUwMEU5cmFsZVwiIH0pO1xyXG5cclxuICAgIC8vIENvcnJlY3Rpb24gZW4gdGVtcHMgclx1MDBFOWVsXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJDb3JyZWN0aW9uIGVuIHRlbXBzIHJcdTAwRTllbFwiKVxyXG4gICAgICAuc2V0RGVzYyhcIkFjdGl2ZSBsYSBjb3JyZWN0aW9uIGF1dG9tYXRpcXVlIHBlbmRhbnQgbGEgZnJhcHBlXCIpXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGVcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVSZWFsVGltZUNvcnJlY3Rpb24pXHJcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZVJlYWxUaW1lQ29ycmVjdGlvbiA9IHZhbHVlO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICk7XHJcblxyXG4gICAgLy8gTGFuZ3VlIHR5cG9ncmFwaGlxdWVcclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIkxhbmd1ZSB0eXBvZ3JhcGhpcXVlXCIpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgIFwiQ2hvaXNpc3NleiBsZXMgclx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgXHUwMEUwIGFwcGxpcXVlci4gQ2hhbmdlIGF1dG9tYXRpcXVlbWVudCBsZXMgZml4ZXJzIHJlY29tbWFuZFx1MDBFOXMuXCJcclxuICAgICAgKVxyXG4gICAgICAuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PiB7XHJcbiAgICAgICAgLy8gQWpvdXRlciB0b3V0ZXMgbGVzIGxvY2FsZXMgZGlzcG9uaWJsZXNcclxuICAgICAgICBPYmplY3QuZW50cmllcyhMT0NBTEVfTkFNRVMpLmZvckVhY2goKFtsb2NhbGUsIG5hbWVdKSA9PiB7XHJcbiAgICAgICAgICBkcm9wZG93bi5hZGRPcHRpb24obG9jYWxlLCBuYW1lKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRyb3Bkb3duXHJcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubG9jYWxlKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2NhbGUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGaXhlcnNGb3JMb2NhbGUodmFsdWUpO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgLy8gTm90ZTogdGhpcy5kaXNwbGF5KCkgc2VyYSBhcHBlbFx1MDBFOSBkYW5zIHVwZGF0ZUZpeGVyc0ZvckxvY2FsZSgpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgLy8gSW5mb3JtYXRpb24gc3VyIGxlcyBmaXhlcnMgYWN0aWZzXHJcbiAgICBjb25zdCBhY3RpdmVGaXhlcnNDb3VudCA9IE9iamVjdC52YWx1ZXModGhpcy5wbHVnaW4uc2V0dGluZ3MuZml4ZXJzKS5maWx0ZXIoXHJcbiAgICAgIEJvb2xlYW5cclxuICAgICkubGVuZ3RoO1xyXG4gICAgY29uc3QgdG90YWxGaXhlcnNDb3VudCA9IE9iamVjdC5rZXlzKHRoaXMucGx1Z2luLnNldHRpbmdzLmZpeGVycykubGVuZ3RoO1xyXG5cclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgIHRleHQ6IGAke2FjdGl2ZUZpeGVyc0NvdW50fS8ke3RvdGFsRml4ZXJzQ291bnR9IHJcdTAwRThnbGVzIGFjdGl2XHUwMEU5ZXMgcG91ciAke1xyXG4gICAgICAgIExPQ0FMRV9OQU1FU1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2NhbGVdXHJcbiAgICAgIH1gLFxyXG4gICAgICBjbHM6IFwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCIsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyXHUwMEU5ZSBsYSBzZWN0aW9uIGRlcyBmaXhlcnMgcGFyIGNhdFx1MDBFOWdvcmllXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjcmVhdGVGaXhlclNldHRpbmdzKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiUlx1MDBFOGdsZXMgZGUgY29ycmVjdGlvblwiIH0pO1xyXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwXCIsIHtcclxuICAgICAgdGV4dDogXCJBY3RpdmV6IG91IGRcdTAwRTlzYWN0aXZleiBsZXMgclx1MDBFOGdsZXMgdHlwb2dyYXBoaXF1ZXMgc2Vsb24gdm9zIGJlc29pbnMuIExlcyByXHUwMEU4Z2xlcyByZWNvbW1hbmRcdTAwRTllcyBwb3VyIHZvdHJlIGxhbmd1ZSBzb250IGFjdGl2XHUwMEU5ZXMgYXV0b21hdGlxdWVtZW50LlwiLFxyXG4gICAgICBjbHM6IFwic2V0dGluZy1pdGVtLWRlc2NyaXB0aW9uXCIsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBHcm91cGVyIGxlcyBmaXhlcnMgcGFyIGNhdFx1MDBFOWdvcmllXHJcbiAgICBjb25zdCBmaXhlcnNCeUNhdGVnb3J5ID0gdGhpcy5wbHVnaW4uZW5naW5lXHJcbiAgICAgIC5nZXRGaXhlcnMoKVxyXG4gICAgICAucmVkdWNlKChhY2MsIGZpeGVyKSA9PiB7XHJcbiAgICAgICAgaWYgKCFhY2NbZml4ZXIuY2F0ZWdvcnldKSBhY2NbZml4ZXIuY2F0ZWdvcnldID0gW107XHJcbiAgICAgICAgYWNjW2ZpeGVyLmNhdGVnb3J5XS5wdXNoKGZpeGVyKTtcclxuICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICB9LCB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBUeXBvZ3JhcGhpY0ZpeGVyW10+KTtcclxuXHJcbiAgICAvLyBDclx1MDBFOWVyIGxlcyBwYXJhbVx1MDBFOHRyZXMgcG91ciBjaGFxdWUgY2F0XHUwMEU5Z29yaWVcclxuICAgIE9iamVjdC5lbnRyaWVzKGZpeGVyc0J5Q2F0ZWdvcnkpLmZvckVhY2goKFtjYXRlZ29yeSwgZml4ZXJzXSkgPT4ge1xyXG4gICAgICAvLyBUaXRyZSBkZSBjYXRcdTAwRTlnb3JpZSBhdmVjIGNvbnRyXHUwMEY0bGUgZ2xvYmFsXHJcbiAgICAgIGNvbnN0IGNhdGVnb3J5SGVhZGVyID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoNFwiLCB7XHJcbiAgICAgICAgdGV4dDogQ0FURUdPUllfTkFNRVNbY2F0ZWdvcnldIHx8IGNhdGVnb3J5LFxyXG4gICAgICAgIGNsczogXCJ0eXBvZ3JhcGh5LWNhdGVnb3J5LWhlYWRlclwiLFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEJvdXRvbiBwb3VyIGFjdGl2ZXIvZFx1MDBFOXNhY3RpdmVyIHRvdXRlIGxhIGNhdFx1MDBFOWdvcmllXHJcbiAgICAgIGNvbnN0IHRvZ2dsZUFsbEJ1dHRvbiA9IGNhdGVnb3J5SGVhZGVyLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHtcclxuICAgICAgICB0ZXh0OiBcIlRvdXQgYmFzY3VsZXJcIixcclxuICAgICAgICBjbHM6IFwidHlwb2dyYXBoeS10b2dnbGUtY2F0ZWdvcnlcIixcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB0b2dnbGVBbGxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCBhbGxFbmFibGVkID0gZml4ZXJzLmV2ZXJ5KChmKSA9PiBmLmVuYWJsZWQpO1xyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gIWFsbEVuYWJsZWQ7XHJcblxyXG4gICAgICAgIGZpeGVycy5mb3JFYWNoKChmaXhlcikgPT4ge1xyXG4gICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZml4ZXJzW2ZpeGVyLmlkXSA9IG5ld1N0YXRlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXkoKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBQYXJhbVx1MDBFOHRyZXMgaW5kaXZpZHVlbHMgZGVzIGZpeGVyc1xyXG4gICAgICBmaXhlcnMuZm9yRWFjaCgoZml4ZXIpID0+IHtcclxuICAgICAgICBjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXHJcbiAgICAgICAgICAuc2V0TmFtZShmaXhlci5uYW1lKVxyXG4gICAgICAgICAgLnNldERlc2MoZml4ZXIuZGVzY3JpcHRpb24pXHJcbiAgICAgICAgICAuYWRkVG9nZ2xlKCh0b2dnbGUpID0+XHJcbiAgICAgICAgICAgIHRvZ2dsZS5zZXRWYWx1ZShmaXhlci5lbmFibGVkKS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXhlcnNbZml4ZXIuaWRdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAvLyBBam91dGVyIHVuIGJhZGdlIHNpIGMnZXN0IHJlY29tbWFuZFx1MDBFOSBwb3VyIGxhIGxvY2FsZSBhY3R1ZWxsZVxyXG4gICAgICAgIGNvbnN0IGlzUmVjb21tZW5kZWQgPSB0aGlzLmlzRml4ZXJSZWNvbW1lbmRlZEZvckN1cnJlbnRMb2NhbGUoZml4ZXIuaWQpO1xyXG4gICAgICAgIGlmIChpc1JlY29tbWVuZGVkKSB7XHJcbiAgICAgICAgICBjb25zdCBiYWRnZSA9IHNldHRpbmcubmFtZUVsLmNyZWF0ZUVsKFwic3BhblwiLCB7XHJcbiAgICAgICAgICAgIHRleHQ6IFwiUmVjb21tYW5kXHUwMEU5XCIsXHJcbiAgICAgICAgICAgIGNsczogXCJ0eXBvZ3JhcGh5LXJlY29tbWVuZGVkLWJhZGdlXCIsXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFqb3V0ZXIgdW4gZXhlbXBsZSBzaSBkaXNwb25pYmxlXHJcbiAgICAgICAgaWYgKGZpeGVyLmdldEV4YW1wbGUpIHtcclxuICAgICAgICAgIGNvbnN0IGV4YW1wbGUgPSBmaXhlci5nZXRFeGFtcGxlKCk7XHJcbiAgICAgICAgICBjb25zdCBleGFtcGxlRWwgPSBzZXR0aW5nLmRlc2NFbC5jcmVhdGVEaXYoe1xyXG4gICAgICAgICAgICBjbHM6IFwidHlwb2dyYXBoeS1leGFtcGxlXCIsXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBleGFtcGxlRWwuY3JlYXRlRGl2KHtcclxuICAgICAgICAgICAgY2xzOiBcInR5cG9ncmFwaHktZXhhbXBsZS1iZWZvcmVcIixcclxuICAgICAgICAgIH0pLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInR5cG9ncmFwaHktZXhhbXBsZS1sYWJlbFwiPkF2YW50IDo8L3NwYW4+IDxjb2RlPiR7ZXhhbXBsZS5iZWZvcmV9PC9jb2RlPmA7XHJcblxyXG4gICAgICAgICAgZXhhbXBsZUVsLmNyZWF0ZURpdih7XHJcbiAgICAgICAgICAgIGNsczogXCJ0eXBvZ3JhcGh5LWV4YW1wbGUtYWZ0ZXJcIixcclxuICAgICAgICAgIH0pLmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInR5cG9ncmFwaHktZXhhbXBsZS1sYWJlbFwiPkFwclx1MDBFOHMgOjwvc3Bhbj4gPGNvZGU+JHtleGFtcGxlLmFmdGVyfTwvY29kZT5gO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyXHUwMEU5ZSBsYSBzZWN0aW9uIGRlcyBhY3Rpb25zXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25zU2VjdGlvbihjb250YWluZXJFbDogSFRNTEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIkFjdGlvbnNcIiB9KTtcclxuXHJcbiAgICAvLyBTZWN0aW9uOiBBY3Rpb25zIChzaW1wbGlmaVx1MDBFOWUpXHJcbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuICAgICAgLnNldE5hbWUoXCJSZXN0YXVyZXIgbGEgY29uZmlndXJhdGlvbiByZWNvbW1hbmRcdTAwRTllXCIpXHJcbiAgICAgIC5zZXREZXNjKFxyXG4gICAgICAgIGBBY3RpdmUgbGVzIGZpeGVycyByZWNvbW1hbmRcdTAwRTlzIHBvdXIgJHtcclxuICAgICAgICAgIExPQ0FMRV9OQU1FU1t0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2NhbGVdXHJcbiAgICAgICAgfWBcclxuICAgICAgKVxyXG4gICAgICAuYWRkQnV0dG9uKChidXR0b24pID0+XHJcbiAgICAgICAgYnV0dG9uLnNldEJ1dHRvblRleHQoXCJSZXN0YXVyZXJcIikub25DbGljayhhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZUZpeGVyc0ZvckxvY2FsZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5sb2NhbGUpO1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICBuZXcgTm90aWNlKFwiQ29uZmlndXJhdGlvbiByZXN0YXVyXHUwMEU5ZVwiKTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWV0IFx1MDBFMCBqb3VyIGxlcyBmaXhlcnMgYWN0aWZzIHNlbG9uIGxhIGxvY2FsZSBjaG9pc2llXHJcbiAgICovXHJcbiAgcHJpdmF0ZSB1cGRhdGVGaXhlcnNGb3JMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGNvbnN0IGFjdGl2ZUZpeGVycyA9IExPQ0FMRV9DT05GSUdVUkFUSU9OU1tsb2NhbGVdO1xyXG4gICAgaWYgKGFjdGl2ZUZpeGVycykge1xyXG4gICAgICAvLyBEXHUwMEU5c2FjdGl2ZXIgdG91cyBsZXMgZml4ZXJzIGQnYWJvcmRcclxuICAgICAgT2JqZWN0LmtleXModGhpcy5wbHVnaW4uc2V0dGluZ3MuZml4ZXJzKS5mb3JFYWNoKChmaXhlcklkOiBzdHJpbmcpID0+IHtcclxuICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5maXhlcnNbZml4ZXJJZF0gPSBmYWxzZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBBY3RpdmVyIGxlcyBmaXhlcnMgcmVjb21tYW5kXHUwMEU5cyBwb3VyIGNldHRlIGxvY2FsZVxyXG4gICAgICBhY3RpdmVGaXhlcnMuZm9yRWFjaCgoZml4ZXJJZDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZml4ZXJzW2ZpeGVySWRdID0gdHJ1ZTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBSZWRlc3NpbmVyIGwnaW50ZXJmYWNlIHBvdXIgcmVmbFx1MDBFOXRlciBsZXMgY2hhbmdlbWVudHNcclxuICAgICAgdGhpcy5kaXNwbGF5KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBWXHUwMEU5cmlmaWUgc2kgdW4gZml4ZXIgZXN0IHJlY29tbWFuZFx1MDBFOSBwb3VyIGxhIGxvY2FsZSBhY3R1ZWxsZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgaXNGaXhlclJlY29tbWVuZGVkRm9yQ3VycmVudExvY2FsZShmaXhlcklkOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHJlY29tbWVuZGVkRml4ZXJzID1cclxuICAgICAgTE9DQUxFX0NPTkZJR1VSQVRJT05TW3RoaXMucGx1Z2luLnNldHRpbmdzLmxvY2FsZV07XHJcbiAgICByZXR1cm4gcmVjb21tZW5kZWRGaXhlcnMgPyByZWNvbW1lbmRlZEZpeGVycy5pbmNsdWRlcyhmaXhlcklkKSA6IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWpvdXRlIGxlcyBzdHlsZXMgQ1NTIHBlcnNvbm5hbGlzXHUwMEU5c1xyXG4gICAqL1xyXG4gIHByaXZhdGUgYWRkQ3VzdG9tU3R5bGVzKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCk6IHZvaWQge1xyXG4gICAgaWYgKCFjb250YWluZXJFbC5xdWVyeVNlbGVjdG9yKFwiLnR5cG9ncmFwaHktY3VzdG9tLXN0eWxlc1wiKSkge1xyXG4gICAgICBjb25zdCBzdHlsZSA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwic3R5bGVcIiwge1xyXG4gICAgICAgIGNsczogXCJ0eXBvZ3JhcGh5LWN1c3RvbS1zdHlsZXNcIixcclxuICAgICAgfSk7XHJcbiAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gYFxyXG4gICAgICAgICAgICAgICAgLnR5cG9ncmFwaHktY2F0ZWdvcnktaGVhZGVyIHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDI0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogOHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC50eXBvZ3JhcGh5LXRvZ2dsZS1jYXRlZ29yeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA0cHggOHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLnR5cG9ncmFwaHktcmVjb21tZW5kZWQtYmFkZ2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1jb2xvci1hY2NlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW9uLWFjY2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAwLjdlbTtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAycHggNnB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDhweDtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAudHlwb2dyYXBoeS1leGFtcGxlIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxMnB4O1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC44NWVtO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxLjQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC50eXBvZ3JhcGh5LWV4YW1wbGUtbGFiZWwge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtYWNjZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDZweDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLnR5cG9ncmFwaHktZXhhbXBsZSBjb2RlIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWZvcm0tZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogM3B4IDZweDtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtbW9ub3NwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuOWVtO1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyLWhvdmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB1c2VyLXNlbGVjdDogdGV4dDtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xyXG4gICAgY3Vyc29yOiB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAudHlwb2dyYXBoeS1leGFtcGxlLWJlZm9yZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNnB4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAudHlwb2dyYXBoeS1leGFtcGxlLWFmdGVyIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA2cHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC50eXBvZ3JhcGh5LXRlc3Qtb3JpZ2luYWwsXHJcbiAgICAgICAgICAgICAgICAudHlwb2dyYXBoeS10ZXN0LWNvcnJlY3RlZCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEycHg7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogOHB4IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IHZhcigtLWZvbnQtbW9ub3NwYWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDAuOWVtO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLnR5cG9ncmFwaHktbm8tY2hhbmdlcyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtd2FybmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEycHg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGA7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDclx1MDBFOWUgbGVzIHBhcmFtXHUwMEU4dHJlcyBkZSBtaXNlIGVuIFx1MDBFOXZpZGVuY2VcclxuICAgKiBAcGFyYW0gY29udGFpbmVyRWwgQ29udGVuZXVyIHBhcmVudFxyXG4gICAqL1xyXG4gIHByaXZhdGUgY3JlYXRlSGlnaGxpZ2h0U2V0dGluZ3MoY29udGFpbmVyRWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XHJcbiAgICBjb25zdCBkZXNFbCA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicFwiLCB7XHJcbiAgICAgIHRleHQ6IFwiQWZmaWNoYWdlIGRlcyBjYXJhY3RcdTAwRThyZXMgaW52aXNpYmxlc1wiLFxyXG4gICAgfSk7XHJcbiAgICBkZXNFbC5zdHlsZS5mb250V2VpZ2h0ID0gXCJib2xkXCI7XHJcbiAgICBkZXNFbC5zdHlsZS5tYXJnaW5Ub3AgPSBcIjNlbVwiO1xyXG5cclxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG4gICAgICAuc2V0TmFtZShcIkFjdGl2ZXIgbCdhZmZpY2hhZ2UgZGVzIGNhcmFjdFx1MDBFOHJlcyBpbnZpc2libGVzXCIpXHJcbiAgICAgIC5hZGRUb2dnbGUoKHRvZ2dsZSkgPT5cclxuICAgICAgICB0b2dnbGVcclxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkKVxyXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWdobGlnaHRFbmFibGVkID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgKTtcclxuICB9XHJcbn1cclxuIiwgIi8vIHNyYy9zZXR0aW5ncy9kZWZhdWx0LXNldHRpbmdzLnRzXHJcbmltcG9ydCB7IFR5cG9ncmFwaHlTZXR0aW5ncyB9IGZyb20gJy4uL3R5cGVzL2ludGVyZmFjZXMnO1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gcGFyIGRcdTAwRTlmYXV0IGR1IHBsdWdpbiAtIGJhc1x1MDBFOWUgc3VyIEpvbGlUeXBvIGZyX0ZSXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogVHlwb2dyYXBoeVNldHRpbmdzID0ge1xyXG4gICAgZW5hYmxlUmVhbFRpbWVDb3JyZWN0aW9uOiB0cnVlLFxyXG4gICAgbG9jYWxlOiAnZnJfRlInLFxyXG4gICAgaGlnaGxpZ2h0RW5hYmxlZDogZmFsc2UsXHJcbiAgICBoaWdobGlnaHRCdXR0b246IHRydWUsICAgICBcclxuICAgIHRhYlRpdGxlQmFyQnV0dG9uOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICBmaXhlcnM6IHtcclxuICAgICAgICAvLyBGaXhlcnMgSm9saVR5cG8gLSBJRHMgZXhhY3RzXHJcbiAgICAgICAgJ0VsbGlwc2lzJzogdHJ1ZSwgICAgICAgICAgICAgICAgLy8gUG9pbnRzIGRlIHN1c3BlbnNpb24gOiAuLi4gXHUyMTkyIFx1MjAyNlxyXG4gICAgICAgICdEYXNoJzogdHJ1ZSwgICAgICAgICAgICAgICAgICAgIC8vIFRpcmV0cyB0eXBvZ3JhcGhpcXVlcyA6IC0tIFx1MjE5MiBcdTIwMTRcclxuICAgICAgICAnU21hcnRRdW90ZXMnOiB0cnVlLCAgICAgICAgICAgICAvLyBHdWlsbGVtZXRzIGludGVsbGlnZW50cyBzZWxvbiBsb2NhbGVcclxuICAgICAgICAnQ3VybHlRdW90ZSc6IHRydWUsICAgICAgICAgICAgICAvLyBBcG9zdHJvcGhlcyBjb3VyYmVzIDogJyBcdTIxOTIgJ1xyXG4gICAgICAgICdGcmVuY2hOb0JyZWFrU3BhY2UnOiB0cnVlLCAgICAgIC8vIEVzcGFjZXMgaW5zXHUwMEU5Y2FibGVzIGZyYW5cdTAwRTdhaXMgOiAhID8gOyA6XHJcbiAgICAgICAgJ05vU3BhY2VCZWZvcmVDb21tYSc6IHRydWUsICAgICAgLy8gVmlyZ3VsZXMgc2FucyBlc3BhY2UgYXZhbnRcclxuICAgICAgICAnVW5pdCc6IHRydWUsICAgICAgICAgICAgICAgICAgICAvLyBFc3BhY2VzIGF2YW50IHVuaXRcdTAwRTlzIDogMjUga2dcclxuICAgICAgICAnRGltZW5zaW9uJzogdHJ1ZSwgICAgICAgICAgICAgICAvLyBNdWx0aXBsaWNhdGlvbiA6IDEyIHggMzQgXHUyMTkyIDEyXHUwMEQ3MzRcclxuICAgICAgICAnSHlwaGVuJzogZmFsc2UsICAgICAgICAgICAgICAgICAvLyBDXHUwMEU5c3VyZSAoY29tcGxleGUsIGRcdTAwRTlzYWN0aXZcdTAwRTkgcGFyIGRcdTAwRTlmYXV0KVxyXG4gICAgICAgICdUcmFkZW1hcmsnOiB0cnVlICAgICAgICAgICAgICAgIC8vIE1hcnF1ZXMgOiAoYykgXHUyMTkyIFx1MDBBOSwgKHIpIFx1MjE5MiBcdTAwQUUsICh0bSkgXHUyMTkyIFx1MjEyMlxyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb25zIEpvbGlUeXBvIHBhciBsb2NhbGVcclxuICogVXRpbGlzZSBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4gcG91ciBsYSBjb21wYXRpYmlsaXRcdTAwRTkgVHlwZVNjcmlwdFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IExPQ0FMRV9DT05GSUdVUkFUSU9OUzogUmVjb3JkPHN0cmluZywgc3RyaW5nW10+ID0ge1xyXG4gICAgJ2VuX0dCJzogW1xyXG4gICAgICAgICdFbGxpcHNpcycsIFxyXG4gICAgICAgICdEaW1lbnNpb24nLCBcclxuICAgICAgICAnVW5pdCcsIFxyXG4gICAgICAgICdEYXNoJywgXHJcbiAgICAgICAgJ1NtYXJ0UXVvdGVzJywgXHJcbiAgICAgICAgJ05vU3BhY2VCZWZvcmVDb21tYScsIFxyXG4gICAgICAgICdDdXJseVF1b3RlJywgXHJcbiAgICAgICAgJ0h5cGhlbicsIFxyXG4gICAgICAgICdUcmFkZW1hcmsnXHJcbiAgICBdLFxyXG4gICAgJ2ZyX0ZSJzogW1xyXG4gICAgICAgICdFbGxpcHNpcycsIFxyXG4gICAgICAgICdEaW1lbnNpb24nLCBcclxuICAgICAgICAnVW5pdCcsIFxyXG4gICAgICAgICdEYXNoJywgXHJcbiAgICAgICAgJ1NtYXJ0UXVvdGVzJywgXHJcbiAgICAgICAgJ0ZyZW5jaE5vQnJlYWtTcGFjZScsIFxyXG4gICAgICAgICdOb1NwYWNlQmVmb3JlQ29tbWEnLCBcclxuICAgICAgICAnQ3VybHlRdW90ZScsIFxyXG4gICAgICAgICdIeXBoZW4nLCBcclxuICAgICAgICAnVHJhZGVtYXJrJ1xyXG4gICAgXSxcclxuICAgICdmcl9DQSc6IFtcclxuICAgICAgICAnRWxsaXBzaXMnLCBcclxuICAgICAgICAnRGltZW5zaW9uJywgXHJcbiAgICAgICAgJ1VuaXQnLCBcclxuICAgICAgICAnRGFzaCcsIFxyXG4gICAgICAgICdTbWFydFF1b3RlcycsIFxyXG4gICAgICAgICdOb1NwYWNlQmVmb3JlQ29tbWEnLCBcclxuICAgICAgICAnQ3VybHlRdW90ZScsIFxyXG4gICAgICAgICdIeXBoZW4nLCBcclxuICAgICAgICAnVHJhZGVtYXJrJ1xyXG4gICAgXSxcclxuICAgICdkZV9ERSc6IFtcclxuICAgICAgICAnRWxsaXBzaXMnLCBcclxuICAgICAgICAnRGltZW5zaW9uJywgXHJcbiAgICAgICAgJ1VuaXQnLCBcclxuICAgICAgICAnRGFzaCcsIFxyXG4gICAgICAgICdTbWFydFF1b3RlcycsIFxyXG4gICAgICAgICdOb1NwYWNlQmVmb3JlQ29tbWEnLCBcclxuICAgICAgICAnQ3VybHlRdW90ZScsIFxyXG4gICAgICAgICdIeXBoZW4nLCBcclxuICAgICAgICAnVHJhZGVtYXJrJ1xyXG4gICAgXVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE5vbXMgZCdhZmZpY2hhZ2UgZGVzIGxhbmd1ZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBMT0NBTEVfTkFNRVM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XHJcbiAgICAnZnJfRlInOiAnXHVEODNDXHVEREVCXHVEODNDXHVEREY3IEZyYW5cdTAwRTdhaXMgKEZyYW5jZSknLFxyXG4gICAgJ2ZyX0NBJzogJ1x1RDgzQ1x1RERFOFx1RDgzQ1x1RERFNiBGcmFuXHUwMEU3YWlzIChDYW5hZGEpJyxcclxuICAgICdlbl9HQic6ICdcdUQ4M0NcdURERUNcdUQ4M0NcdURERTcgRW5nbGlzaCAoVUspJyxcclxuICAgICdkZV9ERSc6ICdcdUQ4M0NcdURERTlcdUQ4M0NcdURERUEgRGV1dHNjaCAoRGV1dHNjaGxhbmQpJ1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZhY3RvcnkgcG91ciBjclx1MDBFOWVyIGRlcyBwYXJhbVx1MDBFOHRyZXMgc2Vsb24gbGEgbGFuZ3VlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2V0dGluZ3NGb3JMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiBUeXBvZ3JhcGh5U2V0dGluZ3Mge1xyXG4gICAgY29uc3QgYWN0aXZlRml4ZXJzID0gTE9DQUxFX0NPTkZJR1VSQVRJT05TW2xvY2FsZV0gfHwgTE9DQUxFX0NPTkZJR1VSQVRJT05TWydmcl9GUiddO1xyXG4gICAgXHJcbiAgICBjb25zdCBzZXR0aW5nczogVHlwb2dyYXBoeVNldHRpbmdzID0ge1xyXG4gICAgICAgIGVuYWJsZVJlYWxUaW1lQ29ycmVjdGlvbjogdHJ1ZSxcclxuICAgICAgICBsb2NhbGU6IGxvY2FsZSxcclxuICAgICAgICBoaWdobGlnaHRFbmFibGVkOiBmYWxzZSxcclxuICAgICAgICBoaWdobGlnaHRCdXR0b246IHRydWUsICAgICAgICBcclxuICAgICAgICB0YWJUaXRsZUJhckJ1dHRvbjogZmFsc2UsICAgICBcclxuICAgICAgICBmaXhlcnM6IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEluaXRpYWxpc2VyIHRvdXMgbGVzIGZpeGVycyBcdTAwRTAgZmFsc2VcclxuICAgIE9iamVjdC5rZXlzKERFRkFVTFRfU0VUVElOR1MuZml4ZXJzKS5mb3JFYWNoKGZpeGVySWQgPT4ge1xyXG4gICAgICAgIHNldHRpbmdzLmZpeGVyc1tmaXhlcklkXSA9IGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gQWN0aXZlciBsZXMgZml4ZXJzIHJlY29tbWFuZFx1MDBFOXMgcG91ciBjZXR0ZSBsb2NhbGVcclxuICAgIGFjdGl2ZUZpeGVycy5mb3JFYWNoKGZpeGVySWQgPT4ge1xyXG4gICAgICAgIHNldHRpbmdzLmZpeGVyc1tmaXhlcklkXSA9IHRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gc2V0dGluZ3M7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGUgZXQgY29ycmlnZSBsZXMgcGFyYW1cdTAwRTh0cmVzIGNoYXJnXHUwMEU5c1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU2V0dGluZ3Moc2V0dGluZ3M6IFBhcnRpYWw8VHlwb2dyYXBoeVNldHRpbmdzPik6IFR5cG9ncmFwaHlTZXR0aW5ncyB7XHJcbmNvbnN0IHZhbGlkYXRlZDogVHlwb2dyYXBoeVNldHRpbmdzID0ge1xyXG4gICAgZW5hYmxlUmVhbFRpbWVDb3JyZWN0aW9uOiBzZXR0aW5ncy5lbmFibGVSZWFsVGltZUNvcnJlY3Rpb24gPz8gREVGQVVMVF9TRVRUSU5HUy5lbmFibGVSZWFsVGltZUNvcnJlY3Rpb24sXHJcbiAgICBsb2NhbGU6IHNldHRpbmdzLmxvY2FsZSA/PyBERUZBVUxUX1NFVFRJTkdTLmxvY2FsZSxcclxuICAgIGhpZ2hsaWdodEVuYWJsZWQ6IHNldHRpbmdzLmhpZ2hsaWdodEVuYWJsZWQgPz8gREVGQVVMVF9TRVRUSU5HUy5oaWdobGlnaHRFbmFibGVkLFxyXG4gICAgaGlnaGxpZ2h0QnV0dG9uOiBzZXR0aW5ncy5oaWdobGlnaHRCdXR0b24gPz8gREVGQVVMVF9TRVRUSU5HUy5oaWdobGlnaHRCdXR0b24sICAgICAgICAgICAvLyBcdTI3MDUgQWpvdXRcdTAwRTlcclxuICAgIHRhYlRpdGxlQmFyQnV0dG9uOiBzZXR0aW5ncy50YWJUaXRsZUJhckJ1dHRvbiA/PyBERUZBVUxUX1NFVFRJTkdTLnRhYlRpdGxlQmFyQnV0dG9uLCAgICAgLy8gXHUyNzA1IEFqb3V0XHUwMEU5XHJcbiAgICBmaXhlcnM6IHsgLi4uREVGQVVMVF9TRVRUSU5HUy5maXhlcnMsIC4uLnNldHRpbmdzLmZpeGVycyB9XHJcbn07XHJcblxyXG4gICAgLy8gQXNzdXJlciBxdWUgdG91cyBsZXMgZml4ZXJzIG9udCB1bmUgdmFsZXVyIGJvb2xcdTAwRTllbm5lXHJcbiAgICBPYmplY3Qua2V5cyhERUZBVUxUX1NFVFRJTkdTLmZpeGVycykuZm9yRWFjaChmaXhlcklkID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbGlkYXRlZC5maXhlcnNbZml4ZXJJZF0gIT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZWQuZml4ZXJzW2ZpeGVySWRdID0gREVGQVVMVF9TRVRUSU5HUy5maXhlcnNbZml4ZXJJZF07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gVlx1MDBFOXJpZmllciBxdWUgbGEgbG9jYWxlIGVzdCBzdXBwb3J0XHUwMEU5ZVxyXG4gICAgaWYgKCEodmFsaWRhdGVkLmxvY2FsZSBpbiBMT0NBTEVfQ09ORklHVVJBVElPTlMpKSB7XHJcbiAgICAgICAgdmFsaWRhdGVkLmxvY2FsZSA9ICdmcl9GUic7IC8vIEZhbGxiYWNrIHZlcnMgZnJhblx1MDBFN2Fpc1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWxpZGF0ZWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPYnRpZW50IGxhIGxpc3RlIGRlcyBmaXhlcnMgcmVjb21tYW5kXHUwMEU5cyBwb3VyIHVuZSBsb2NhbGVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWNvbW1lbmRlZEZpeGVyc0ZvckxvY2FsZShsb2NhbGU6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICAgIHJldHVybiBMT0NBTEVfQ09ORklHVVJBVElPTlNbbG9jYWxlXSB8fCBMT0NBTEVfQ09ORklHVVJBVElPTlNbJ2ZyX0ZSJ107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBWXHUwMEU5cmlmaWUgc2kgdW4gZml4ZXIgZXN0IHJlY29tbWFuZFx1MDBFOSBwb3VyIHVuZSBsb2NhbGUgZG9ublx1MDBFOWVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0ZpeGVyUmVjb21tZW5kZWRGb3JMb2NhbGUoZml4ZXJJZDogc3RyaW5nLCBsb2NhbGU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcmVjb21tZW5kZWRGaXhlcnMgPSBnZXRSZWNvbW1lbmRlZEZpeGVyc0ZvckxvY2FsZShsb2NhbGUpO1xyXG4gICAgcmV0dXJuIHJlY29tbWVuZGVkRml4ZXJzLmluY2x1ZGVzKGZpeGVySWQpO1xyXG59XHJcblxyXG4vKipcclxuICogTVx1MDBFOXRhZG9ublx1MDBFOWVzIHN1ciBsZXMgY2F0XHUwMEU5Z29yaWVzIGRlIGZpeGVyc1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEZJWEVSX0NBVEVHT1JJRVM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHtcclxuICAgICdwdW5jdHVhdGlvbic6IFsnRWxsaXBzaXMnLCAnRGFzaCcsICdIeXBoZW4nXSxcclxuICAgICdzcGFjaW5nJzogWydGcmVuY2hOb0JyZWFrU3BhY2UnLCAnTm9TcGFjZUJlZm9yZUNvbW1hJywgJ1VuaXQnLCAnRGltZW5zaW9uJ10sXHJcbiAgICAncXVvdGVzJzogWydTbWFydFF1b3RlcycsICdDdXJseVF1b3RlJ10sXHJcbiAgICAnc3ltYm9scyc6IFsnVHJhZGVtYXJrJ11cclxufTtcclxuXHJcbi8qKlxyXG4gKiBOb21zIGQnYWZmaWNoYWdlIGRlcyBjYXRcdTAwRTlnb3JpZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBDQVRFR09SWV9OQU1FUzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcclxuICAgICdwdW5jdHVhdGlvbic6ICdQb25jdHVhdGlvbicsXHJcbiAgICAnc3BhY2luZyc6ICdFc3BhY2VtZW50JywgXHJcbiAgICAncXVvdGVzJzogJ0d1aWxsZW1ldHMnLFxyXG4gICAgJ3N5bWJvbHMnOiAnU3ltYm9sZXMnXHJcbn07Il0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QTtBQUFBLFFBQ0ksU0FBUztBQUFBLFFBQ1QsYUFBYSxLQUFLLGNBQWMsY0FBYztBQUFBLE1BQ2xEO0FBQUE7QUFBQSxNQUdBO0FBQUEsUUFDSSxTQUFTO0FBQUEsUUFDVCxhQUFhLEtBQUssY0FBYyxjQUFjO0FBQUEsTUFDbEQ7QUFBQTtBQUFBLE1BRUE7QUFBQSxRQUNJLFNBQVM7QUFBQSxRQUNULGFBQWEsS0FBSyxjQUFjLGNBQWM7QUFBQSxNQUNsRDtBQUFBO0FBQUEsTUFHQTtBQUFBLFFBQ0ksU0FBUztBQUFBLFFBQ1QsYUFBYSxLQUFLLGNBQWMsY0FBYztBQUFBLE1BQ2xEO0FBQUE7QUFBQTtBQUFBLE1BSUE7QUFBQSxRQUNJLFNBQVM7QUFBQSxRQUNULGFBQWEsS0FBSyxjQUFjLGNBQWM7QUFBQSxNQUNsRDtBQUFBO0FBQUEsTUFFQTtBQUFBLFFBQ0ksU0FBUztBQUFBLFFBQ1QsYUFBYSxLQUFLLGNBQWMsY0FBYztBQUFBLE1BQ2xEO0FBQUE7QUFBQSxNQUVBO0FBQUEsUUFDSSxTQUFTO0FBQUEsUUFDVCxhQUFhLEtBQUssY0FBYyxjQUFjO0FBQUEsTUFDbEQ7QUFBQTtBQUFBLE1BRUE7QUFBQSxRQUNJLFNBQVM7QUFBQSxRQUNULGFBQWEsS0FBSyxjQUFjLGNBQWM7QUFBQSxNQUNsRDtBQUFBO0FBQUEsTUFFQTtBQUFBLFFBQ0ksU0FBUztBQUFBLFFBQ1QsYUFBYSxLQUFLLGNBQWMsY0FBYztBQUFBLE1BQ2xEO0FBQUE7QUFBQSxNQUdBO0FBQUEsUUFDSSxTQUFTO0FBQUEsUUFDVCxhQUFhLEtBQUssY0FBYyxjQUFjO0FBQUEsTUFDbEQ7QUFBQTtBQUFBLE1BR0E7QUFBQSxRQUNJLFNBQVM7QUFBQSxRQUNULGFBQWEsS0FBSyxjQUFjLGNBQWM7QUFBQSxNQUNsRDtBQUFBO0FBQUEsTUFFQTtBQUFBLFFBQ0ksU0FBUztBQUFBLFFBQ1QsYUFBYSxLQUFLLGNBQWMsY0FBYztBQUFBLE1BQ2xEO0FBQUE7QUFBQSxNQUdBO0FBQUEsUUFDSSxTQUFTO0FBQUEsUUFDVCxhQUFhLEtBQUssY0FBYyxj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

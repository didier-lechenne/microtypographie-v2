const esbuild = require("esbuild");
const process = require("process");
const builtins = require("builtin-modules");

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
Typography Fixers Plugin for Obsidian
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === 'production');

async function startBuild() {
  const context = await esbuild.context({
    banner: {
      js: banner,
    },
    entryPoints: ['main.ts'], // Point d'entrée modifié
    bundle: true,
    external: [
      'obsidian',
      'electron',
      '@codemirror/autocomplete',
      '@codemirror/collab',
      '@codemirror/commands',
      '@codemirror/language',
      '@codemirror/lint',
      '@codemirror/search',
      '@codemirror/state',
      '@codemirror/view',
      '@lezer/common',
      '@lezer/highlight',
      '@lezer/lr',
      ...builtins
    ],
    format: 'cjs',
    target: 'es2018',
    logLevel: "info",
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'main.js',
    // Résolution des alias pour la structure modulaire
    alias: {
      '@': './src',
      '@types': './src/types',
      '@fixers': './src/fixers',
      '@engine': './src/engine',
      '@settings': './src/settings',
      '@constants': './src/constants'
    },
    // Options supplémentaires pour la production
    minify: prod,
    drop: prod ? ['console', 'debugger'] : [],
  });

  if (prod) {
    console.log('🏗️  Building for production...');
    await context.rebuild();
    console.log('✅ Production build complete!');
    process.exit(0);
  } else {
    console.log('👀 Watching for changes...');
    await context.watch();
    console.log('🚀 Development build started');
  }
}

startBuild().catch(e => {
  console.error('❌ Build failed:', e);
  process.exit(1);
});